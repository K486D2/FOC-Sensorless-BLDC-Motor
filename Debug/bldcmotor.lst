
bldcmotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004de0  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000144  2000000c  10005de0  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000400  20000150  00000000  00000150  2**0
                  ALLOC
  3 .data         0000041c  20000550  10005f24  00008550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000025c  2000096c  0000081c  0000896c  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  6 .debug_aranges 00001150  00000000  00000000  00008970  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00026c00  00000000  00000000  00009ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003e89  00000000  00000000  000306c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000913e  00000000  00000000  00034549  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003a0c  00000000  00000000  0003d688  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000dcaf  00000000  00000000  00041094  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005f48  00000000  00000000  0004ed43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000eb0  00000000  00000000  00054c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 000007d3  00000000  00000000  00055b40  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 05 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	10005de0 	.word	0x10005de0
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	100010a1 	.word	0x100010a1
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	10005f24 	.word	0x10005f24
	ldr	r2, =__data_start
10001078:	20000550 	.word	0x20000550
	ldr	r3, =__data_end
1000107c:	2000096c 	.word	0x2000096c
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	10006340 	.word	0x10006340
	ldr	r2, =__ram_code_start
10001084:	2000096c 	.word	0x2000096c
	ldr	r3, =__ram_code_end
10001088:	2000096c 	.word	0x2000096c
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	2000096c 	.word	0x2000096c
	ldr	r2, =__bss_end
10001090:	20000bc4 	.word	0x20000bc4
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	1000589d 	.word	0x1000589d
    blx  r0
#endif

    ldr  r0, =main
10001098:	10005145 	.word	0x10005145

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
100010a0:	b580      	push	{r7, lr}
100010a2:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a4:	f003 fddc 	bl	10004c60 <SystemCoreSetup>
  SystemCoreClockSetup();
100010a8:	f003 fe28 	bl	10004cfc <SystemCoreClockSetup>
}
100010ac:	46bd      	mov	sp, r7
100010ae:	bd80      	pop	{r7, pc}

100010b0 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010b0:	b580      	push	{r7, lr}
100010b2:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b4:	4b2a      	ldr	r3, [pc, #168]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010b6:	681a      	ldr	r2, [r3, #0]
100010b8:	23ff      	movs	r3, #255	; 0xff
100010ba:	021b      	lsls	r3, r3, #8
100010bc:	4013      	ands	r3, r2
100010be:	0a1a      	lsrs	r2, r3, #8
100010c0:	4b28      	ldr	r3, [pc, #160]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c2:	601a      	str	r2, [r3, #0]

  if (IDIV != 0)
100010c4:	4b27      	ldr	r3, [pc, #156]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c6:	681b      	ldr	r3, [r3, #0]
100010c8:	2b00      	cmp	r3, #0
100010ca:	d037      	beq.n	1000113c <SystemCoreClockUpdate+0x8c>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010cc:	4b24      	ldr	r3, [pc, #144]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	22ff      	movs	r2, #255	; 0xff
100010d2:	401a      	ands	r2, r3
100010d4:	4b24      	ldr	r3, [pc, #144]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010d6:	601a      	str	r2, [r3, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
100010d8:	4b21      	ldr	r3, [pc, #132]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010da:	69db      	ldr	r3, [r3, #28]
100010dc:	2203      	movs	r2, #3
100010de:	4013      	ands	r3, r2
100010e0:	021a      	lsls	r2, r3, #8
100010e2:	4b21      	ldr	r3, [pc, #132]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010e4:	681b      	ldr	r3, [r3, #0]
100010e6:	431a      	orrs	r2, r3
100010e8:	4b1f      	ldr	r3, [pc, #124]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010ea:	601a      	str	r2, [r3, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
100010ec:	4b1c      	ldr	r3, [pc, #112]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ee:	69da      	ldr	r2, [r3, #28]
100010f0:	2380      	movs	r3, #128	; 0x80
100010f2:	009b      	lsls	r3, r3, #2
100010f4:	4013      	ands	r3, r2
100010f6:	d10e      	bne.n	10001116 <SystemCoreClockUpdate+0x66>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
100010f8:	4b1a      	ldr	r3, [pc, #104]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010fa:	681b      	ldr	r3, [r3, #0]
100010fc:	029a      	lsls	r2, r3, #10
100010fe:	4b1a      	ldr	r3, [pc, #104]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001100:	681b      	ldr	r3, [r3, #0]
10001102:	18d3      	adds	r3, r2, r3
10001104:	4819      	ldr	r0, [pc, #100]	; (1000116c <SystemCoreClockUpdate+0xbc>)
10001106:	1c19      	adds	r1, r3, #0
10001108:	f001 fad6 	bl	100026b8 <__aeabi_uidiv>
1000110c:	1c03      	adds	r3, r0, #0
1000110e:	011a      	lsls	r2, r3, #4
10001110:	4b17      	ldr	r3, [pc, #92]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001112:	601a      	str	r2, [r3, #0]
10001114:	e021      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10001116:	f000 f82f 	bl	10001178 <OSCHP_GetFrequency>
1000111a:	1c03      	adds	r3, r0, #0
1000111c:	0199      	lsls	r1, r3, #6
1000111e:	4b11      	ldr	r3, [pc, #68]	; (10001164 <SystemCoreClockUpdate+0xb4>)
10001120:	681b      	ldr	r3, [r3, #0]
10001122:	029a      	lsls	r2, r3, #10
10001124:	4b10      	ldr	r3, [pc, #64]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001126:	681b      	ldr	r3, [r3, #0]
10001128:	18d3      	adds	r3, r2, r3
1000112a:	1c08      	adds	r0, r1, #0
1000112c:	1c19      	adds	r1, r3, #0
1000112e:	f001 fac3 	bl	100026b8 <__aeabi_uidiv>
10001132:	1c03      	adds	r3, r0, #0
10001134:	011a      	lsls	r2, r3, #4
10001136:	4b0e      	ldr	r3, [pc, #56]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001138:	601a      	str	r2, [r3, #0]
1000113a:	e00e      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
1000113c:	4b08      	ldr	r3, [pc, #32]	; (10001160 <SystemCoreClockUpdate+0xb0>)
1000113e:	69da      	ldr	r2, [r3, #28]
10001140:	2380      	movs	r3, #128	; 0x80
10001142:	009b      	lsls	r3, r3, #2
10001144:	4013      	ands	r3, r2
10001146:	d103      	bne.n	10001150 <SystemCoreClockUpdate+0xa0>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10001148:	4b09      	ldr	r3, [pc, #36]	; (10001170 <SystemCoreClockUpdate+0xc0>)
1000114a:	4a0a      	ldr	r2, [pc, #40]	; (10001174 <SystemCoreClockUpdate+0xc4>)
1000114c:	601a      	str	r2, [r3, #0]
1000114e:	e004      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10001150:	f000 f812 	bl	10001178 <OSCHP_GetFrequency>
10001154:	1c02      	adds	r2, r0, #0
10001156:	4b06      	ldr	r3, [pc, #24]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001158:	601a      	str	r2, [r3, #0]
    }
  }
}
1000115a:	46bd      	mov	sp, r7
1000115c:	bd80      	pop	{r7, pc}
1000115e:	46c0      	nop			; (mov r8, r8)
10001160:	40010300 	.word	0x40010300
10001164:	2000096c 	.word	0x2000096c
10001168:	20000970 	.word	0x20000970
1000116c:	b71b0000 	.word	0xb71b0000
10001170:	20003ffc 	.word	0x20003ffc
10001174:	02dc6c00 	.word	0x02dc6c00

10001178 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
10001178:	b580      	push	{r7, lr}
1000117a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
1000117c:	4b01      	ldr	r3, [pc, #4]	; (10001184 <OSCHP_GetFrequency+0xc>)
}
1000117e:	1c18      	adds	r0, r3, #0
10001180:	46bd      	mov	sp, r7
10001182:	bd80      	pop	{r7, pc}
10001184:	01312d00 	.word	0x01312d00

10001188 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001188:	b590      	push	{r4, r7, lr}
1000118a:	b085      	sub	sp, #20
1000118c:	af00      	add	r7, sp, #0
1000118e:	60f8      	str	r0, [r7, #12]
10001190:	607a      	str	r2, [r7, #4]
10001192:	230b      	movs	r3, #11
10001194:	18fb      	adds	r3, r7, r3
10001196:	1c0a      	adds	r2, r1, #0
10001198:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
1000119a:	230b      	movs	r3, #11
1000119c:	18fb      	adds	r3, r7, r3
1000119e:	781b      	ldrb	r3, [r3, #0]
100011a0:	089b      	lsrs	r3, r3, #2
100011a2:	b2db      	uxtb	r3, r3
100011a4:	1c18      	adds	r0, r3, #0
100011a6:	230b      	movs	r3, #11
100011a8:	18fb      	adds	r3, r7, r3
100011aa:	781b      	ldrb	r3, [r3, #0]
100011ac:	089b      	lsrs	r3, r3, #2
100011ae:	b2db      	uxtb	r3, r3
100011b0:	1c1a      	adds	r2, r3, #0
100011b2:	68fb      	ldr	r3, [r7, #12]
100011b4:	3204      	adds	r2, #4
100011b6:	0092      	lsls	r2, r2, #2
100011b8:	58d3      	ldr	r3, [r2, r3]
100011ba:	220b      	movs	r2, #11
100011bc:	18ba      	adds	r2, r7, r2
100011be:	7812      	ldrb	r2, [r2, #0]
100011c0:	2103      	movs	r1, #3
100011c2:	400a      	ands	r2, r1
100011c4:	00d2      	lsls	r2, r2, #3
100011c6:	1c11      	adds	r1, r2, #0
100011c8:	22fc      	movs	r2, #252	; 0xfc
100011ca:	408a      	lsls	r2, r1
100011cc:	43d2      	mvns	r2, r2
100011ce:	401a      	ands	r2, r3
100011d0:	1c11      	adds	r1, r2, #0
100011d2:	68fb      	ldr	r3, [r7, #12]
100011d4:	1d02      	adds	r2, r0, #4
100011d6:	0092      	lsls	r2, r2, #2
100011d8:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100011da:	68fb      	ldr	r3, [r7, #12]
100011dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100011de:	220b      	movs	r2, #11
100011e0:	18ba      	adds	r2, r7, r2
100011e2:	7812      	ldrb	r2, [r2, #0]
100011e4:	0052      	lsls	r2, r2, #1
100011e6:	1c11      	adds	r1, r2, #0
100011e8:	2203      	movs	r2, #3
100011ea:	408a      	lsls	r2, r1
100011ec:	43d2      	mvns	r2, r2
100011ee:	401a      	ands	r2, r3
100011f0:	68fb      	ldr	r3, [r7, #12]
100011f2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
100011f4:	230b      	movs	r3, #11
100011f6:	18fb      	adds	r3, r7, r3
100011f8:	781b      	ldrb	r3, [r3, #0]
100011fa:	08db      	lsrs	r3, r3, #3
100011fc:	b2db      	uxtb	r3, r3
100011fe:	1c18      	adds	r0, r3, #0
10001200:	230b      	movs	r3, #11
10001202:	18fb      	adds	r3, r7, r3
10001204:	781b      	ldrb	r3, [r3, #0]
10001206:	08db      	lsrs	r3, r3, #3
10001208:	b2db      	uxtb	r3, r3
1000120a:	1c1a      	adds	r2, r3, #0
1000120c:	68fb      	ldr	r3, [r7, #12]
1000120e:	3210      	adds	r2, #16
10001210:	0092      	lsls	r2, r2, #2
10001212:	58d3      	ldr	r3, [r2, r3]
10001214:	220b      	movs	r2, #11
10001216:	18ba      	adds	r2, r7, r2
10001218:	7812      	ldrb	r2, [r2, #0]
1000121a:	2107      	movs	r1, #7
1000121c:	400a      	ands	r2, r1
1000121e:	0092      	lsls	r2, r2, #2
10001220:	1c11      	adds	r1, r2, #0
10001222:	2204      	movs	r2, #4
10001224:	408a      	lsls	r2, r1
10001226:	43d2      	mvns	r2, r2
10001228:	401a      	ands	r2, r3
1000122a:	1c11      	adds	r1, r2, #0
1000122c:	68fb      	ldr	r3, [r7, #12]
1000122e:	1c02      	adds	r2, r0, #0
10001230:	3210      	adds	r2, #16
10001232:	0092      	lsls	r2, r2, #2
10001234:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10001236:	230b      	movs	r3, #11
10001238:	18fb      	adds	r3, r7, r3
1000123a:	781b      	ldrb	r3, [r3, #0]
1000123c:	08db      	lsrs	r3, r3, #3
1000123e:	b2db      	uxtb	r3, r3
10001240:	1c18      	adds	r0, r3, #0
10001242:	230b      	movs	r3, #11
10001244:	18fb      	adds	r3, r7, r3
10001246:	781b      	ldrb	r3, [r3, #0]
10001248:	08db      	lsrs	r3, r3, #3
1000124a:	b2db      	uxtb	r3, r3
1000124c:	1c1a      	adds	r2, r3, #0
1000124e:	68fb      	ldr	r3, [r7, #12]
10001250:	3210      	adds	r2, #16
10001252:	0092      	lsls	r2, r2, #2
10001254:	58d2      	ldr	r2, [r2, r3]
10001256:	687b      	ldr	r3, [r7, #4]
10001258:	785b      	ldrb	r3, [r3, #1]
1000125a:	1c1c      	adds	r4, r3, #0
1000125c:	230b      	movs	r3, #11
1000125e:	18fb      	adds	r3, r7, r3
10001260:	781b      	ldrb	r3, [r3, #0]
10001262:	2107      	movs	r1, #7
10001264:	400b      	ands	r3, r1
10001266:	009b      	lsls	r3, r3, #2
10001268:	409c      	lsls	r4, r3
1000126a:	1c23      	adds	r3, r4, #0
1000126c:	431a      	orrs	r2, r3
1000126e:	1c11      	adds	r1, r2, #0
10001270:	68fb      	ldr	r3, [r7, #12]
10001272:	1c02      	adds	r2, r0, #0
10001274:	3210      	adds	r2, #16
10001276:	0092      	lsls	r2, r2, #2
10001278:	50d1      	str	r1, [r2, r3]

  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
1000127a:	68fb      	ldr	r3, [r7, #12]
1000127c:	4a20      	ldr	r2, [pc, #128]	; (10001300 <XMC_GPIO_Init+0x178>)
1000127e:	4293      	cmp	r3, r2
10001280:	d10b      	bne.n	1000129a <XMC_GPIO_Init+0x112>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001282:	68fb      	ldr	r3, [r7, #12]
10001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001286:	220b      	movs	r2, #11
10001288:	18ba      	adds	r2, r7, r2
1000128a:	7812      	ldrb	r2, [r2, #0]
1000128c:	2101      	movs	r1, #1
1000128e:	4091      	lsls	r1, r2
10001290:	1c0a      	adds	r2, r1, #0
10001292:	43d2      	mvns	r2, r2
10001294:	401a      	ands	r2, r3
10001296:	68fb      	ldr	r3, [r7, #12]
10001298:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
1000129a:	687b      	ldr	r3, [r7, #4]
1000129c:	781b      	ldrb	r3, [r3, #0]
1000129e:	b2db      	uxtb	r3, r3
100012a0:	b25b      	sxtb	r3, r3
100012a2:	2b00      	cmp	r3, #0
100012a4:	da07      	bge.n	100012b6 <XMC_GPIO_Init+0x12e>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
100012a6:	687b      	ldr	r3, [r7, #4]
100012a8:	685a      	ldr	r2, [r3, #4]
100012aa:	230b      	movs	r3, #11
100012ac:	18fb      	adds	r3, r7, r3
100012ae:	781b      	ldrb	r3, [r3, #0]
100012b0:	409a      	lsls	r2, r3
100012b2:	68fb      	ldr	r3, [r7, #12]
100012b4:	605a      	str	r2, [r3, #4]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
100012b6:	230b      	movs	r3, #11
100012b8:	18fb      	adds	r3, r7, r3
100012ba:	781b      	ldrb	r3, [r3, #0]
100012bc:	089b      	lsrs	r3, r3, #2
100012be:	b2db      	uxtb	r3, r3
100012c0:	1c18      	adds	r0, r3, #0
100012c2:	230b      	movs	r3, #11
100012c4:	18fb      	adds	r3, r7, r3
100012c6:	781b      	ldrb	r3, [r3, #0]
100012c8:	089b      	lsrs	r3, r3, #2
100012ca:	b2db      	uxtb	r3, r3
100012cc:	1c1a      	adds	r2, r3, #0
100012ce:	68fb      	ldr	r3, [r7, #12]
100012d0:	3204      	adds	r2, #4
100012d2:	0092      	lsls	r2, r2, #2
100012d4:	58d2      	ldr	r2, [r2, r3]
100012d6:	687b      	ldr	r3, [r7, #4]
100012d8:	781b      	ldrb	r3, [r3, #0]
100012da:	1c1c      	adds	r4, r3, #0
100012dc:	230b      	movs	r3, #11
100012de:	18fb      	adds	r3, r7, r3
100012e0:	781b      	ldrb	r3, [r3, #0]
100012e2:	2103      	movs	r1, #3
100012e4:	400b      	ands	r3, r1
100012e6:	00db      	lsls	r3, r3, #3
100012e8:	409c      	lsls	r4, r3
100012ea:	1c23      	adds	r3, r4, #0
100012ec:	431a      	orrs	r2, r3
100012ee:	1c11      	adds	r1, r2, #0
100012f0:	68fb      	ldr	r3, [r7, #12]
100012f2:	1d02      	adds	r2, r0, #4
100012f4:	0092      	lsls	r2, r2, #2
100012f6:	50d1      	str	r1, [r2, r3]
}
100012f8:	46bd      	mov	sp, r7
100012fa:	b005      	add	sp, #20
100012fc:	bd90      	pop	{r4, r7, pc}
100012fe:	46c0      	nop			; (mov r8, r8)
10001300:	40040200 	.word	0x40040200

10001304 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10001304:	b580      	push	{r7, lr}
10001306:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001308:	4b02      	ldr	r3, [pc, #8]	; (10001314 <XMC_SCU_LockProtectedBits+0x10>)
1000130a:	22c3      	movs	r2, #195	; 0xc3
1000130c:	625a      	str	r2, [r3, #36]	; 0x24
}
1000130e:	46bd      	mov	sp, r7
10001310:	bd80      	pop	{r7, pc}
10001312:	46c0      	nop			; (mov r8, r8)
10001314:	40010000 	.word	0x40010000

10001318 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
10001318:	b580      	push	{r7, lr}
1000131a:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
1000131c:	4b05      	ldr	r3, [pc, #20]	; (10001334 <XMC_SCU_UnlockProtectedBits+0x1c>)
1000131e:	22c0      	movs	r2, #192	; 0xc0
10001320:	625a      	str	r2, [r3, #36]	; 0x24

  while (((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001322:	46c0      	nop			; (mov r8, r8)
10001324:	4b03      	ldr	r3, [pc, #12]	; (10001334 <XMC_SCU_UnlockProtectedBits+0x1c>)
10001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001328:	2204      	movs	r2, #4
1000132a:	4013      	ands	r3, r2
1000132c:	d1fa      	bne.n	10001324 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
1000132e:	46bd      	mov	sp, r7
10001330:	bd80      	pop	{r7, pc}
10001332:	46c0      	nop			; (mov r8, r8)
10001334:	40010000 	.word	0x40010000

10001338 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
10001338:	b580      	push	{r7, lr}
1000133a:	b086      	sub	sp, #24
1000133c:	af00      	add	r7, sp, #0
1000133e:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
10001340:	f7ff ffea 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

#if (UC_SERIES == XMC14)
  /* OSCHP source selection - OSC mode */

  if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
10001344:	687b      	ldr	r3, [r7, #4]
10001346:	799b      	ldrb	r3, [r3, #6]
10001348:	2b30      	cmp	r3, #48	; 0x30
1000134a:	d053      	beq.n	100013f4 <XMC_SCU_CLOCK_Init+0xbc>
  {
    if (OSCHP_GetFrequency() > 20000000U)
1000134c:	f7ff ff14 	bl	10001178 <OSCHP_GetFrequency>
10001350:	1e02      	subs	r2, r0, #0
10001352:	4b49      	ldr	r3, [pc, #292]	; (10001478 <XMC_SCU_CLOCK_Init+0x140>)
10001354:	429a      	cmp	r2, r3
10001356:	d909      	bls.n	1000136c <XMC_SCU_CLOCK_Init+0x34>
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
10001358:	4a48      	ldr	r2, [pc, #288]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000135a:	4948      	ldr	r1, [pc, #288]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000135c:	2390      	movs	r3, #144	; 0x90
1000135e:	5acb      	ldrh	r3, [r1, r3]
10001360:	b29b      	uxth	r3, r3
10001362:	2140      	movs	r1, #64	; 0x40
10001364:	430b      	orrs	r3, r1
10001366:	b299      	uxth	r1, r3
10001368:	2390      	movs	r3, #144	; 0x90
1000136a:	52d1      	strh	r1, [r2, r3]
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
1000136c:	4a43      	ldr	r2, [pc, #268]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000136e:	4943      	ldr	r1, [pc, #268]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
10001370:	2390      	movs	r3, #144	; 0x90
10001372:	5acb      	ldrh	r3, [r1, r3]
10001374:	b29b      	uxth	r3, r3
10001376:	b29b      	uxth	r3, r3
10001378:	1c19      	adds	r1, r3, #0
1000137a:	2332      	movs	r3, #50	; 0x32
1000137c:	4399      	bics	r1, r3
1000137e:	1c0b      	adds	r3, r1, #0
10001380:	b299      	uxth	r1, r3
                               config->oschp_mode;
10001382:	687b      	ldr	r3, [r7, #4]
10001384:	799b      	ldrb	r3, [r3, #6]
    if (OSCHP_GetFrequency() > 20000000U)
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
10001386:	b29b      	uxth	r3, r3
10001388:	430b      	orrs	r3, r1
1000138a:	b29b      	uxth	r3, r3
1000138c:	b299      	uxth	r1, r3
1000138e:	2390      	movs	r3, #144	; 0x90
10001390:	52d1      	strh	r1, [r2, r3]
                               config->oschp_mode;

    do
    {
      /* clear the status bit before restarting the detection. */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
10001392:	4b3b      	ldr	r3, [pc, #236]	; (10001480 <XMC_SCU_CLOCK_Init+0x148>)
10001394:	2202      	movs	r2, #2
10001396:	629a      	str	r2, [r3, #40]	; 0x28

      /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watchdog,
         keeping in between at least one DCO2 cycle */

      /* Disable XOWD */
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
10001398:	4b3a      	ldr	r3, [pc, #232]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
1000139a:	4a3a      	ldr	r2, [pc, #232]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
1000139c:	6952      	ldr	r2, [r2, #20]
1000139e:	493a      	ldr	r1, [pc, #232]	; (10001488 <XMC_SCU_CLOCK_Init+0x150>)
100013a0:	400a      	ands	r2, r1
100013a2:	615a      	str	r2, [r3, #20]
100013a4:	4b39      	ldr	r3, [pc, #228]	; (1000148c <XMC_SCU_CLOCK_Init+0x154>)
100013a6:	617b      	str	r3, [r7, #20]
100013a8:	e000      	b.n	100013ac <XMC_SCU_CLOCK_Init+0x74>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100013aa:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100013ac:	697b      	ldr	r3, [r7, #20]
100013ae:	3b01      	subs	r3, #1
100013b0:	617b      	str	r3, [r7, #20]
100013b2:	697b      	ldr	r3, [r7, #20]
100013b4:	2b00      	cmp	r3, #0
100013b6:	d1f8      	bne.n	100013aa <XMC_SCU_CLOCK_Init+0x72>
      /* Clock domains synchronization, at least 1 DCO2 cycle */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(538);

      /* Enable XOWD */
      SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk | SCU_CLK_OSCCSR_XOWDRES_Msk;
100013b8:	4b32      	ldr	r3, [pc, #200]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013ba:	4a32      	ldr	r2, [pc, #200]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013bc:	6952      	ldr	r2, [r2, #20]
100013be:	21c0      	movs	r1, #192	; 0xc0
100013c0:	0489      	lsls	r1, r1, #18
100013c2:	430a      	orrs	r2, r1
100013c4:	615a      	str	r2, [r3, #20]

      /* OSCCSR.XOWDRES bit will be automatically reset to 0 after XOWD is reset */
      while (SCU_CLK->OSCCSR & SCU_CLK_OSCCSR_XOWDRES_Msk);
100013c6:	46c0      	nop			; (mov r8, r8)
100013c8:	4b2e      	ldr	r3, [pc, #184]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013ca:	695a      	ldr	r2, [r3, #20]
100013cc:	2380      	movs	r3, #128	; 0x80
100013ce:	045b      	lsls	r3, r3, #17
100013d0:	4013      	ands	r3, r2
100013d2:	d1f9      	bne.n	100013c8 <XMC_SCU_CLOCK_Init+0x90>
100013d4:	4b2e      	ldr	r3, [pc, #184]	; (10001490 <XMC_SCU_CLOCK_Init+0x158>)
100013d6:	613b      	str	r3, [r7, #16]
100013d8:	e000      	b.n	100013dc <XMC_SCU_CLOCK_Init+0xa4>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100013da:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100013dc:	693b      	ldr	r3, [r7, #16]
100013de:	3b01      	subs	r3, #1
100013e0:	613b      	str	r3, [r7, #16]
100013e2:	693b      	ldr	r3, [r7, #16]
100013e4:	2b00      	cmp	r3, #0
100013e6:	d1f8      	bne.n	100013da <XMC_SCU_CLOCK_Init+0xa2>
      /* Wait a at least 5 DCO2 cycles for the update of the XTAL OWD result */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(2685);

    }
    while (SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
100013e8:	4b25      	ldr	r3, [pc, #148]	; (10001480 <XMC_SCU_CLOCK_Init+0x148>)
100013ea:	6a1b      	ldr	r3, [r3, #32]
100013ec:	2202      	movs	r2, #2
100013ee:	4013      	ands	r3, r2
100013f0:	d1cf      	bne.n	10001392 <XMC_SCU_CLOCK_Init+0x5a>
100013f2:	e009      	b.n	10001408 <XMC_SCU_CLOCK_Init+0xd0>
  }
  else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
  {
    SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
100013f4:	4a21      	ldr	r2, [pc, #132]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
100013f6:	4921      	ldr	r1, [pc, #132]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
100013f8:	2390      	movs	r3, #144	; 0x90
100013fa:	5acb      	ldrh	r3, [r1, r3]
100013fc:	b29b      	uxth	r3, r3
100013fe:	2130      	movs	r1, #48	; 0x30
10001400:	430b      	orrs	r3, r1
10001402:	b299      	uxth	r1, r3
10001404:	2390      	movs	r3, #144	; 0x90
10001406:	52d1      	strh	r1, [r2, r3]
  }

  SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
10001408:	4a1c      	ldr	r2, [pc, #112]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000140a:	687b      	ldr	r3, [r7, #4]
1000140c:	79db      	ldrb	r3, [r3, #7]
1000140e:	b299      	uxth	r1, r3
10001410:	238c      	movs	r3, #140	; 0x8c
10001412:	52d1      	strh	r1, [r2, r3]
#ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP
  if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
10001414:	687b      	ldr	r3, [r7, #4]
10001416:	79db      	ldrb	r3, [r3, #7]
10001418:	2b00      	cmp	r3, #0
1000141a:	d109      	bne.n	10001430 <XMC_SCU_CLOCK_Init+0xf8>
1000141c:	4b1d      	ldr	r3, [pc, #116]	; (10001494 <XMC_SCU_CLOCK_Init+0x15c>)
1000141e:	60fb      	str	r3, [r7, #12]
10001420:	e000      	b.n	10001424 <XMC_SCU_CLOCK_Init+0xec>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
10001422:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
10001424:	68fb      	ldr	r3, [r7, #12]
10001426:	3b01      	subs	r3, #1
10001428:	60fb      	str	r3, [r7, #12]
1000142a:	68fb      	ldr	r3, [r7, #12]
1000142c:	2b00      	cmp	r3, #0
1000142e:	d1f8      	bne.n	10001422 <XMC_SCU_CLOCK_Init+0xea>
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
10001430:	4b14      	ldr	r3, [pc, #80]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001432:	4a14      	ldr	r2, [pc, #80]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001434:	69d2      	ldr	r2, [r2, #28]
10001436:	4918      	ldr	r1, [pc, #96]	; (10001498 <XMC_SCU_CLOCK_Init+0x160>)
10001438:	400a      	ands	r2, r1
                    config->dclk_src;
1000143a:	6879      	ldr	r1, [r7, #4]
1000143c:	8889      	ldrh	r1, [r1, #4]
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
1000143e:	430a      	orrs	r2, r1
10001440:	61da      	str	r2, [r3, #28]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001442:	4a10      	ldr	r2, [pc, #64]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001444:	4b0f      	ldr	r3, [pc, #60]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001446:	681b      	ldr	r3, [r3, #0]
10001448:	4914      	ldr	r1, [pc, #80]	; (1000149c <XMC_SCU_CLOCK_Init+0x164>)
1000144a:	4019      	ands	r1, r3
                   config->rtc_src |
1000144c:	687b      	ldr	r3, [r7, #4]
1000144e:	68db      	ldr	r3, [r3, #12]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001450:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
10001452:	687b      	ldr	r3, [r7, #4]
10001454:	689b      	ldr	r3, [r3, #8]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10001456:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001458:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
1000145a:	f7ff ff53 	bl	10001304 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
1000145e:	687b      	ldr	r3, [r7, #4]
10001460:	789b      	ldrb	r3, [r3, #2]
10001462:	1c1a      	adds	r2, r3, #0
10001464:	687b      	ldr	r3, [r7, #4]
10001466:	881b      	ldrh	r3, [r3, #0]
10001468:	1c10      	adds	r0, r2, #0
1000146a:	1c19      	adds	r1, r3, #0
1000146c:	f000 f84c 	bl	10001508 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
10001470:	46bd      	mov	sp, r7
10001472:	b006      	add	sp, #24
10001474:	bd80      	pop	{r7, pc}
10001476:	46c0      	nop			; (mov r8, r8)
10001478:	01312d00 	.word	0x01312d00
1000147c:	40011000 	.word	0x40011000
10001480:	40010038 	.word	0x40010038
10001484:	40010300 	.word	0x40010300
10001488:	fdffffff 	.word	0xfdffffff
1000148c:	0000021a 	.word	0x0000021a
10001490:	00000a7d 	.word	0x00000a7d
10001494:	00632ea0 	.word	0x00632ea0
10001498:	fffffdff 	.word	0xfffffdff
1000149c:	fff0ffff 	.word	0xfff0ffff

100014a0 <XMC_SCU_CLOCK_SetAdcClockSrc>:
  XMC_SCU_LockProtectedBits();
}

#if (UC_SERIES == XMC14)
void XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_t adcclk_src)
{
100014a0:	b580      	push	{r7, lr}
100014a2:	b082      	sub	sp, #8
100014a4:	af00      	add	r7, sp, #0
100014a6:	1c02      	adds	r2, r0, #0
100014a8:	1dbb      	adds	r3, r7, #6
100014aa:	801a      	strh	r2, [r3, #0]
  XMC_SCU_UnlockProtectedBits();
100014ac:	f7ff ff34 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_ADCCLKSEL_Msk) | adcclk_src;
100014b0:	4b06      	ldr	r3, [pc, #24]	; (100014cc <XMC_SCU_CLOCK_SetAdcClockSrc+0x2c>)
100014b2:	4a06      	ldr	r2, [pc, #24]	; (100014cc <XMC_SCU_CLOCK_SetAdcClockSrc+0x2c>)
100014b4:	69d2      	ldr	r2, [r2, #28]
100014b6:	4906      	ldr	r1, [pc, #24]	; (100014d0 <XMC_SCU_CLOCK_SetAdcClockSrc+0x30>)
100014b8:	4011      	ands	r1, r2
100014ba:	1dba      	adds	r2, r7, #6
100014bc:	8812      	ldrh	r2, [r2, #0]
100014be:	430a      	orrs	r2, r1
100014c0:	61da      	str	r2, [r3, #28]

  XMC_SCU_LockProtectedBits();
100014c2:	f7ff ff1f 	bl	10001304 <XMC_SCU_LockProtectedBits>
}
100014c6:	46bd      	mov	sp, r7
100014c8:	b002      	add	sp, #8
100014ca:	bd80      	pop	{r7, pc}
100014cc:	40010300 	.word	0x40010300
100014d0:	fffffeff 	.word	0xfffffeff

100014d4 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
100014d4:	b580      	push	{r7, lr}
100014d6:	b082      	sub	sp, #8
100014d8:	af00      	add	r7, sp, #0
100014da:	6078      	str	r0, [r7, #4]
  XMC_SCU_UnlockProtectedBits();
100014dc:	f7ff ff1c 	bl	10001318 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
100014e0:	4b08      	ldr	r3, [pc, #32]	; (10001504 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014e2:	4a08      	ldr	r2, [pc, #32]	; (10001504 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014e4:	6911      	ldr	r1, [r2, #16]
100014e6:	687a      	ldr	r2, [r7, #4]
100014e8:	430a      	orrs	r2, r1
100014ea:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100014ec:	46c0      	nop			; (mov r8, r8)
100014ee:	4b05      	ldr	r3, [pc, #20]	; (10001504 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014f0:	681a      	ldr	r2, [r3, #0]
100014f2:	2380      	movs	r3, #128	; 0x80
100014f4:	05db      	lsls	r3, r3, #23
100014f6:	4013      	ands	r3, r2
100014f8:	d1f9      	bne.n	100014ee <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
100014fa:	f7ff ff03 	bl	10001304 <XMC_SCU_LockProtectedBits>
}
100014fe:	46bd      	mov	sp, r7
10001500:	b002      	add	sp, #8
10001502:	bd80      	pop	{r7, pc}
10001504:	40010300 	.word	0x40010300

10001508 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
10001508:	b580      	push	{r7, lr}
1000150a:	b084      	sub	sp, #16
1000150c:	af00      	add	r7, sp, #0
1000150e:	6078      	str	r0, [r7, #4]
10001510:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
10001512:	f7ff ff01 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001516:	4b27      	ldr	r3, [pc, #156]	; (100015b4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001518:	681a      	ldr	r2, [r3, #0]
1000151a:	23ff      	movs	r3, #255	; 0xff
1000151c:	021b      	lsls	r3, r3, #8
1000151e:	4013      	ands	r3, r2
10001520:	0a1b      	lsrs	r3, r3, #8
10001522:	60fb      	str	r3, [r7, #12]

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10001524:	4b23      	ldr	r3, [pc, #140]	; (100015b4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001526:	4a23      	ldr	r2, [pc, #140]	; (100015b4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001528:	69d2      	ldr	r2, [r2, #28]
1000152a:	2103      	movs	r1, #3
1000152c:	438a      	bics	r2, r1
1000152e:	1c11      	adds	r1, r2, #0
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
10001530:	683a      	ldr	r2, [r7, #0]
10001532:	0a12      	lsrs	r2, r2, #8

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10001534:	430a      	orrs	r2, r1
10001536:	61da      	str	r2, [r3, #28]
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001538:	4b1e      	ldr	r3, [pc, #120]	; (100015b4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000153a:	4a1e      	ldr	r2, [pc, #120]	; (100015b4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000153c:	6812      	ldr	r2, [r2, #0]
1000153e:	491e      	ldr	r1, [pc, #120]	; (100015b8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb0>)
10001540:	4011      	ands	r1, r2
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
10001542:	683a      	ldr	r2, [r7, #0]
10001544:	20ff      	movs	r0, #255	; 0xff
10001546:	4002      	ands	r2, r0

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001548:	430a      	orrs	r2, r1
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
1000154a:	491c      	ldr	r1, [pc, #112]	; (100015bc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
1000154c:	430a      	orrs	r2, r1

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000154e:	601a      	str	r2, [r3, #0]
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001550:	46c0      	nop			; (mov r8, r8)
10001552:	4b18      	ldr	r3, [pc, #96]	; (100015b4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001554:	681a      	ldr	r2, [r3, #0]
10001556:	2380      	movs	r3, #128	; 0x80
10001558:	05db      	lsls	r3, r3, #23
1000155a:	4013      	ands	r3, r2
1000155c:	d1f9      	bne.n	10001552 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x4a>
  {
    /* Spin until the core supply stabilizes */
  }

  if (curr_idiv <= idiv)
1000155e:	68fa      	ldr	r2, [r7, #12]
10001560:	687b      	ldr	r3, [r7, #4]
10001562:	429a      	cmp	r2, r3
10001564:	d806      	bhi.n	10001574 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
10001566:	68fa      	ldr	r2, [r7, #12]
10001568:	687b      	ldr	r3, [r7, #4]
1000156a:	1c10      	adds	r0, r2, #0
1000156c:	1c19      	adds	r1, r3, #0
1000156e:	f000 f853 	bl	10001618 <XMC_SCU_CLOCK_lFrequencyDownScaling>
10001572:	e005      	b.n	10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
10001574:	68fa      	ldr	r2, [r7, #12]
10001576:	687b      	ldr	r3, [r7, #4]
10001578:	1c10      	adds	r0, r2, #0
1000157a:	1c19      	adds	r1, r3, #0
1000157c:	f000 f822 	bl	100015c4 <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001580:	4b0c      	ldr	r3, [pc, #48]	; (100015b4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001582:	4a0c      	ldr	r2, [pc, #48]	; (100015b4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001584:	6812      	ldr	r2, [r2, #0]
10001586:	490e      	ldr	r1, [pc, #56]	; (100015c0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb8>)
10001588:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
1000158a:	687a      	ldr	r2, [r7, #4]
1000158c:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000158e:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10001590:	490a      	ldr	r1, [pc, #40]	; (100015bc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
10001592:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001594:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001596:	46c0      	nop			; (mov r8, r8)
10001598:	4b06      	ldr	r3, [pc, #24]	; (100015b4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000159a:	681a      	ldr	r2, [r3, #0]
1000159c:	2380      	movs	r3, #128	; 0x80
1000159e:	05db      	lsls	r3, r3, #23
100015a0:	4013      	ands	r3, r2
100015a2:	d1f9      	bne.n	10001598 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x90>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
100015a4:	f7ff feae 	bl	10001304 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
100015a8:	f7ff fd82 	bl	100010b0 <SystemCoreClockUpdate>

}
100015ac:	46bd      	mov	sp, r7
100015ae:	b004      	add	sp, #16
100015b0:	bd80      	pop	{r7, pc}
100015b2:	46c0      	nop			; (mov r8, r8)
100015b4:	40010300 	.word	0x40010300
100015b8:	c00fff00 	.word	0xc00fff00
100015bc:	3ff00000 	.word	0x3ff00000
100015c0:	c00f00ff 	.word	0xc00f00ff

100015c4 <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100015c4:	b580      	push	{r7, lr}
100015c6:	b082      	sub	sp, #8
100015c8:	af00      	add	r7, sp, #0
100015ca:	6078      	str	r0, [r7, #4]
100015cc:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
100015ce:	e014      	b.n	100015fa <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
100015d0:	687b      	ldr	r3, [r7, #4]
100015d2:	089b      	lsrs	r3, r3, #2
100015d4:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015d6:	4b0d      	ldr	r3, [pc, #52]	; (1000160c <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015d8:	4a0c      	ldr	r2, [pc, #48]	; (1000160c <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015da:	6812      	ldr	r2, [r2, #0]
100015dc:	490c      	ldr	r1, [pc, #48]	; (10001610 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
100015de:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015e0:	687a      	ldr	r2, [r7, #4]
100015e2:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015e4:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015e6:	490b      	ldr	r1, [pc, #44]	; (10001614 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
100015e8:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015ea:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100015ec:	46c0      	nop			; (mov r8, r8)
100015ee:	4b07      	ldr	r3, [pc, #28]	; (1000160c <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015f0:	681a      	ldr	r2, [r3, #0]
100015f2:	2380      	movs	r3, #128	; 0x80
100015f4:	05db      	lsls	r3, r3, #23
100015f6:	4013      	ands	r3, r2
100015f8:	d1f9      	bne.n	100015ee <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
100015fa:	683b      	ldr	r3, [r7, #0]
100015fc:	009a      	lsls	r2, r3, #2
100015fe:	687b      	ldr	r3, [r7, #4]
10001600:	429a      	cmp	r2, r3
10001602:	d3e5      	bcc.n	100015d0 <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
10001604:	46bd      	mov	sp, r7
10001606:	b002      	add	sp, #8
10001608:	bd80      	pop	{r7, pc}
1000160a:	46c0      	nop			; (mov r8, r8)
1000160c:	40010300 	.word	0x40010300
10001610:	c00f00ff 	.word	0xc00f00ff
10001614:	3ff00000 	.word	0x3ff00000

10001618 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10001618:	b580      	push	{r7, lr}
1000161a:	b082      	sub	sp, #8
1000161c:	af00      	add	r7, sp, #0
1000161e:	6078      	str	r0, [r7, #4]
10001620:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
10001622:	e019      	b.n	10001658 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if (0U == curr_idiv)
10001624:	687b      	ldr	r3, [r7, #4]
10001626:	2b00      	cmp	r3, #0
10001628:	d101      	bne.n	1000162e <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
1000162a:	2301      	movs	r3, #1
1000162c:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
1000162e:	687b      	ldr	r3, [r7, #4]
10001630:	009b      	lsls	r3, r3, #2
10001632:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001634:	4b0c      	ldr	r3, [pc, #48]	; (10001668 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001636:	4a0c      	ldr	r2, [pc, #48]	; (10001668 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001638:	6812      	ldr	r2, [r2, #0]
1000163a:	490c      	ldr	r1, [pc, #48]	; (1000166c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
1000163c:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000163e:	687a      	ldr	r2, [r7, #4]
10001640:	0212      	lsls	r2, r2, #8
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001642:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001644:	490a      	ldr	r1, [pc, #40]	; (10001670 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
10001646:	430a      	orrs	r2, r1
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001648:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000164a:	46c0      	nop			; (mov r8, r8)
1000164c:	4b06      	ldr	r3, [pc, #24]	; (10001668 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
1000164e:	681a      	ldr	r2, [r3, #0]
10001650:	2380      	movs	r3, #128	; 0x80
10001652:	05db      	lsls	r3, r3, #23
10001654:	4013      	ands	r3, r2
10001656:	d1f9      	bne.n	1000164c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10001658:	687b      	ldr	r3, [r7, #4]
1000165a:	009a      	lsls	r2, r3, #2
1000165c:	683b      	ldr	r3, [r7, #0]
1000165e:	429a      	cmp	r2, r3
10001660:	d3e0      	bcc.n	10001624 <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
10001662:	46bd      	mov	sp, r7
10001664:	b002      	add	sp, #8
10001666:	bd80      	pop	{r7, pc}
10001668:	40010300 	.word	0x40010300
1000166c:	c00f00ff 	.word	0xc00f00ff
10001670:	3ff00000 	.word	0x3ff00000

10001674 <XMC_SCU_SetInterruptControl>:
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
10001674:	b580      	push	{r7, lr}
10001676:	b082      	sub	sp, #8
10001678:	af00      	add	r7, sp, #0
1000167a:	1c02      	adds	r2, r0, #0
1000167c:	1dfb      	adds	r3, r7, #7
1000167e:	701a      	strb	r2, [r3, #0]
10001680:	1d3b      	adds	r3, r7, #4
10001682:	1c0a      	adds	r2, r1, #0
10001684:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
10001686:	1d3b      	adds	r3, r7, #4
10001688:	1d3a      	adds	r2, r7, #4
1000168a:	8812      	ldrh	r2, [r2, #0]
1000168c:	2103      	movs	r1, #3
1000168e:	400a      	ands	r2, r1
10001690:	801a      	strh	r2, [r3, #0]
  if (irq_number < 16U)
10001692:	1dfb      	adds	r3, r7, #7
10001694:	781b      	ldrb	r3, [r3, #0]
10001696:	2b0f      	cmp	r3, #15
10001698:	d813      	bhi.n	100016c2 <XMC_SCU_SetInterruptControl+0x4e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000169a:	4b18      	ldr	r3, [pc, #96]	; (100016fc <XMC_SCU_SetInterruptControl+0x88>)
1000169c:	4a17      	ldr	r2, [pc, #92]	; (100016fc <XMC_SCU_SetInterruptControl+0x88>)
1000169e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
100016a0:	1df9      	adds	r1, r7, #7
100016a2:	7809      	ldrb	r1, [r1, #0]
100016a4:	0049      	lsls	r1, r1, #1
100016a6:	1c08      	adds	r0, r1, #0
100016a8:	2103      	movs	r1, #3
100016aa:	4081      	lsls	r1, r0
100016ac:	43c9      	mvns	r1, r1
100016ae:	400a      	ands	r2, r1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
100016b0:	1d39      	adds	r1, r7, #4
100016b2:	8809      	ldrh	r1, [r1, #0]
100016b4:	1df8      	adds	r0, r7, #7
100016b6:	7800      	ldrb	r0, [r0, #0]
100016b8:	0040      	lsls	r0, r0, #1
100016ba:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016bc:	430a      	orrs	r2, r1
100016be:	66da      	str	r2, [r3, #108]	; 0x6c
100016c0:	e018      	b.n	100016f4 <XMC_SCU_SetInterruptControl+0x80>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
100016c2:	1dfb      	adds	r3, r7, #7
100016c4:	1dfa      	adds	r2, r7, #7
100016c6:	7812      	ldrb	r2, [r2, #0]
100016c8:	210f      	movs	r1, #15
100016ca:	400a      	ands	r2, r1
100016cc:	701a      	strb	r2, [r3, #0]
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016ce:	4b0b      	ldr	r3, [pc, #44]	; (100016fc <XMC_SCU_SetInterruptControl+0x88>)
100016d0:	4a0a      	ldr	r2, [pc, #40]	; (100016fc <XMC_SCU_SetInterruptControl+0x88>)
100016d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
100016d4:	1df9      	adds	r1, r7, #7
100016d6:	7809      	ldrb	r1, [r1, #0]
100016d8:	0049      	lsls	r1, r1, #1
100016da:	1c08      	adds	r0, r1, #0
100016dc:	2103      	movs	r1, #3
100016de:	4081      	lsls	r1, r0
100016e0:	43c9      	mvns	r1, r1
100016e2:	400a      	ands	r2, r1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
100016e4:	1d39      	adds	r1, r7, #4
100016e6:	8809      	ldrh	r1, [r1, #0]
100016e8:	1df8      	adds	r0, r7, #7
100016ea:	7800      	ldrb	r0, [r0, #0]
100016ec:	0040      	lsls	r0, r0, #1
100016ee:	4081      	lsls	r1, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016f0:	430a      	orrs	r2, r1
100016f2:	671a      	str	r2, [r3, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
100016f4:	46bd      	mov	sp, r7
100016f6:	b002      	add	sp, #8
100016f8:	bd80      	pop	{r7, pc}
100016fa:	46c0      	nop			; (mov r8, r8)
100016fc:	40010000 	.word	0x40010000

10001700 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10001700:	b580      	push	{r7, lr}
10001702:	b082      	sub	sp, #8
10001704:	af00      	add	r7, sp, #0
10001706:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10001708:	687b      	ldr	r3, [r7, #4]
1000170a:	2280      	movs	r2, #128	; 0x80
1000170c:	0052      	lsls	r2, r2, #1
1000170e:	60da      	str	r2, [r3, #12]
}
10001710:	46bd      	mov	sp, r7
10001712:	b002      	add	sp, #8
10001714:	bd80      	pop	{r7, pc}
10001716:	46c0      	nop			; (mov r8, r8)

10001718 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
10001718:	b580      	push	{r7, lr}
1000171a:	b082      	sub	sp, #8
1000171c:	af00      	add	r7, sp, #0
1000171e:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
10001720:	687b      	ldr	r3, [r7, #4]
10001722:	4a09      	ldr	r2, [pc, #36]	; (10001748 <XMC_CCU4_lUngateClock+0x30>)
10001724:	4293      	cmp	r3, r2
10001726:	d103      	bne.n	10001730 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
10001728:	2004      	movs	r0, #4
1000172a:	f7ff fed3 	bl	100014d4 <XMC_SCU_CLOCK_UngatePeripheralClock>
1000172e:	e008      	b.n	10001742 <XMC_CCU4_lUngateClock+0x2a>
  }
#if defined(CCU41)
  else if (module == CCU41)
10001730:	687b      	ldr	r3, [r7, #4]
10001732:	4a06      	ldr	r2, [pc, #24]	; (1000174c <XMC_CCU4_lUngateClock+0x34>)
10001734:	4293      	cmp	r3, r2
10001736:	d104      	bne.n	10001742 <XMC_CCU4_lUngateClock+0x2a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
10001738:	2380      	movs	r3, #128	; 0x80
1000173a:	029b      	lsls	r3, r3, #10
1000173c:	1c18      	adds	r0, r3, #0
1000173e:	f7ff fec9 	bl	100014d4 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
10001742:	46bd      	mov	sp, r7
10001744:	b002      	add	sp, #8
10001746:	bd80      	pop	{r7, pc}
10001748:	48040000 	.word	0x48040000
1000174c:	48044000 	.word	0x48044000

10001750 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
10001750:	b580      	push	{r7, lr}
10001752:	b082      	sub	sp, #8
10001754:	af00      	add	r7, sp, #0
10001756:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
10001758:	687b      	ldr	r3, [r7, #4]
1000175a:	1c18      	adds	r0, r3, #0
1000175c:	f7ff ffdc 	bl	10001718 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
10001760:	46bd      	mov	sp, r7
10001762:	b002      	add	sp, #8
10001764:	bd80      	pop	{r7, pc}
10001766:	46c0      	nop			; (mov r8, r8)

10001768 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
10001768:	b580      	push	{r7, lr}
1000176a:	b084      	sub	sp, #16
1000176c:	af00      	add	r7, sp, #0
1000176e:	6078      	str	r0, [r7, #4]
10001770:	1c0a      	adds	r2, r1, #0
10001772:	1cfb      	adds	r3, r7, #3
10001774:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
10001776:	687b      	ldr	r3, [r7, #4]
10001778:	1c18      	adds	r0, r3, #0
1000177a:	f7ff ffe9 	bl	10001750 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
1000177e:	687b      	ldr	r3, [r7, #4]
10001780:	1c18      	adds	r0, r3, #0
10001782:	f7ff ffbd 	bl	10001700 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
10001786:	687b      	ldr	r3, [r7, #4]
10001788:	681b      	ldr	r3, [r3, #0]
1000178a:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
1000178c:	68fb      	ldr	r3, [r7, #12]
1000178e:	4a07      	ldr	r2, [pc, #28]	; (100017ac <XMC_CCU4_Init+0x44>)
10001790:	4013      	ands	r3, r2
10001792:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10001794:	1cfb      	adds	r3, r7, #3
10001796:	781b      	ldrb	r3, [r3, #0]
10001798:	039b      	lsls	r3, r3, #14
1000179a:	68fa      	ldr	r2, [r7, #12]
1000179c:	4313      	orrs	r3, r2
1000179e:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
100017a0:	687b      	ldr	r3, [r7, #4]
100017a2:	68fa      	ldr	r2, [r7, #12]
100017a4:	601a      	str	r2, [r3, #0]
}
100017a6:	46bd      	mov	sp, r7
100017a8:	b004      	add	sp, #16
100017aa:	bd80      	pop	{r7, pc}
100017ac:	ffff3fff 	.word	0xffff3fff

100017b0 <XMC_CCU4_SetMultiChannelShadowTransferMode>:
  module->GCTRL = gctrl;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
100017b0:	b580      	push	{r7, lr}
100017b2:	b084      	sub	sp, #16
100017b4:	af00      	add	r7, sp, #0
100017b6:	6078      	str	r0, [r7, #4]
100017b8:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));

  gctrl = module->GCTRL;
100017ba:	687b      	ldr	r3, [r7, #4]
100017bc:	681b      	ldr	r3, [r3, #0]
100017be:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
100017c0:	683b      	ldr	r3, [r7, #0]
100017c2:	0c1b      	lsrs	r3, r3, #16
100017c4:	43da      	mvns	r2, r3
100017c6:	68fb      	ldr	r3, [r7, #12]
100017c8:	4013      	ands	r3, r2
100017ca:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
100017cc:	683b      	ldr	r3, [r7, #0]
100017ce:	041b      	lsls	r3, r3, #16
100017d0:	0c1b      	lsrs	r3, r3, #16
100017d2:	68fa      	ldr	r2, [r7, #12]
100017d4:	4313      	orrs	r3, r2
100017d6:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
100017d8:	687b      	ldr	r3, [r7, #4]
100017da:	68fa      	ldr	r2, [r7, #12]
100017dc:	601a      	str	r2, [r3, #0]
}
100017de:	46bd      	mov	sp, r7
100017e0:	b004      	add	sp, #16
100017e2:	bd80      	pop	{r7, pc}

100017e4 <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
100017e4:	b580      	push	{r7, lr}
100017e6:	b082      	sub	sp, #8
100017e8:	af00      	add	r7, sp, #0
100017ea:	6078      	str	r0, [r7, #4]
100017ec:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
100017ee:	683b      	ldr	r3, [r7, #0]
100017f0:	681a      	ldr	r2, [r3, #0]
100017f2:	687b      	ldr	r3, [r7, #4]
100017f4:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
100017f6:	683b      	ldr	r3, [r7, #0]
100017f8:	795b      	ldrb	r3, [r3, #5]
100017fa:	069b      	lsls	r3, r3, #26
100017fc:	0fdb      	lsrs	r3, r3, #31
100017fe:	b2db      	uxtb	r3, r3
10001800:	051a      	lsls	r2, r3, #20
10001802:	687b      	ldr	r3, [r7, #4]
10001804:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
10001806:	683b      	ldr	r3, [r7, #0]
10001808:	791b      	ldrb	r3, [r3, #4]
1000180a:	071b      	lsls	r3, r3, #28
1000180c:	0f1b      	lsrs	r3, r3, #28
1000180e:	b2db      	uxtb	r3, r3
10001810:	1c1a      	adds	r2, r3, #0
10001812:	687b      	ldr	r3, [r7, #4]
10001814:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
10001816:	683b      	ldr	r3, [r7, #0]
10001818:	795b      	ldrb	r3, [r3, #5]
1000181a:	071b      	lsls	r3, r3, #28
1000181c:	0f1b      	lsrs	r3, r3, #28
1000181e:	b2db      	uxtb	r3, r3
10001820:	1c1a      	adds	r2, r3, #0
10001822:	687b      	ldr	r3, [r7, #4]
10001824:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
10001826:	683b      	ldr	r3, [r7, #0]
10001828:	795b      	ldrb	r3, [r3, #5]
1000182a:	06db      	lsls	r3, r3, #27
1000182c:	0fdb      	lsrs	r3, r3, #31
1000182e:	b2db      	uxtb	r3, r3
10001830:	1c1a      	adds	r2, r3, #0
10001832:	687b      	ldr	r3, [r7, #4]
10001834:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
10001836:	683b      	ldr	r3, [r7, #0]
10001838:	791b      	ldrb	r3, [r3, #4]
1000183a:	061b      	lsls	r3, r3, #24
1000183c:	0f1b      	lsrs	r3, r3, #28
1000183e:	b2db      	uxtb	r3, r3
10001840:	1c1a      	adds	r2, r3, #0
10001842:	687b      	ldr	r3, [r7, #4]
10001844:	62da      	str	r2, [r3, #44]	; 0x2c
}
10001846:	46bd      	mov	sp, r7
10001848:	b002      	add	sp, #8
1000184a:	bd80      	pop	{r7, pc}

1000184c <XMC_CCU4_SLICE_CaptureInit>:

/* API to configure CC4 Slice for Capture */
void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
{
1000184c:	b580      	push	{r7, lr}
1000184e:	b082      	sub	sp, #8
10001850:	af00      	add	r7, sp, #0
10001852:	6078      	str	r0, [r7, #4]
10001854:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
             (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);

  /* Program the capture mode */
  slice->TC = capture_init->tc;
10001856:	683b      	ldr	r3, [r7, #0]
10001858:	681a      	ldr	r2, [r3, #0]
1000185a:	687b      	ldr	r3, [r7, #4]
1000185c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
1000185e:	683b      	ldr	r3, [r7, #0]
10001860:	795b      	ldrb	r3, [r3, #5]
10001862:	07db      	lsls	r3, r3, #31
10001864:	0fdb      	lsrs	r3, r3, #31
10001866:	b2db      	uxtb	r3, r3
10001868:	051a      	lsls	r2, r3, #20
1000186a:	687b      	ldr	r3, [r7, #4]
1000186c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
1000186e:	683b      	ldr	r3, [r7, #0]
10001870:	791b      	ldrb	r3, [r3, #4]
10001872:	071b      	lsls	r3, r3, #28
10001874:	0f1b      	lsrs	r3, r3, #28
10001876:	b2db      	uxtb	r3, r3
10001878:	1c1a      	adds	r2, r3, #0
1000187a:	687b      	ldr	r3, [r7, #4]
1000187c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program initial floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
1000187e:	683b      	ldr	r3, [r7, #0]
10001880:	791b      	ldrb	r3, [r3, #4]
10001882:	061b      	lsls	r3, r3, #24
10001884:	0f1b      	lsrs	r3, r3, #28
10001886:	b2db      	uxtb	r3, r3
10001888:	1c1a      	adds	r2, r3, #0
1000188a:	687b      	ldr	r3, [r7, #4]
1000188c:	62da      	str	r2, [r3, #44]	; 0x2c
}
1000188e:	46bd      	mov	sp, r7
10001890:	b002      	add	sp, #8
10001892:	bd80      	pop	{r7, pc}

10001894 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
10001894:	b580      	push	{r7, lr}
10001896:	b084      	sub	sp, #16
10001898:	af00      	add	r7, sp, #0
1000189a:	6078      	str	r0, [r7, #4]
1000189c:	1c08      	adds	r0, r1, #0
1000189e:	1c11      	adds	r1, r2, #0
100018a0:	1cfb      	adds	r3, r7, #3
100018a2:	1c02      	adds	r2, r0, #0
100018a4:	701a      	strb	r2, [r3, #0]
100018a6:	1cbb      	adds	r3, r7, #2
100018a8:	1c0a      	adds	r2, r1, #0
100018aa:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode",
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) || \
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
100018ac:	687b      	ldr	r3, [r7, #4]
100018ae:	685b      	ldr	r3, [r3, #4]
100018b0:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
100018b2:	68bb      	ldr	r3, [r7, #8]
100018b4:	2203      	movs	r2, #3
100018b6:	4393      	bics	r3, r2
100018b8:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
100018ba:	1cfb      	adds	r3, r7, #3
100018bc:	781b      	ldrb	r3, [r3, #0]
100018be:	68ba      	ldr	r2, [r7, #8]
100018c0:	4313      	orrs	r3, r2
100018c2:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
100018c4:	687b      	ldr	r3, [r7, #4]
100018c6:	68ba      	ldr	r2, [r7, #8]
100018c8:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
100018ca:	687b      	ldr	r3, [r7, #4]
100018cc:	695b      	ldr	r3, [r3, #20]
100018ce:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
100018d0:	1cbb      	adds	r3, r7, #2
100018d2:	781b      	ldrb	r3, [r3, #0]
100018d4:	2b01      	cmp	r3, #1
100018d6:	d105      	bne.n	100018e4 <XMC_CCU4_SLICE_StartConfig+0x50>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
100018d8:	68fb      	ldr	r3, [r7, #12]
100018da:	2280      	movs	r2, #128	; 0x80
100018dc:	00d2      	lsls	r2, r2, #3
100018de:	4313      	orrs	r3, r2
100018e0:	60fb      	str	r3, [r7, #12]
100018e2:	e003      	b.n	100018ec <XMC_CCU4_SLICE_StartConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
100018e4:	68fb      	ldr	r3, [r7, #12]
100018e6:	4a04      	ldr	r2, [pc, #16]	; (100018f8 <XMC_CCU4_SLICE_StartConfig+0x64>)
100018e8:	4013      	ands	r3, r2
100018ea:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
100018ec:	687b      	ldr	r3, [r7, #4]
100018ee:	68fa      	ldr	r2, [r7, #12]
100018f0:	615a      	str	r2, [r3, #20]
}
100018f2:	46bd      	mov	sp, r7
100018f4:	b004      	add	sp, #16
100018f6:	bd80      	pop	{r7, pc}
100018f8:	fffffbff 	.word	0xfffffbff

100018fc <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
100018fc:	b580      	push	{r7, lr}
100018fe:	b084      	sub	sp, #16
10001900:	af00      	add	r7, sp, #0
10001902:	6078      	str	r0, [r7, #4]
10001904:	1c08      	adds	r0, r1, #0
10001906:	1c11      	adds	r1, r2, #0
10001908:	1cfb      	adds	r3, r7, #3
1000190a:	1c02      	adds	r2, r0, #0
1000190c:	701a      	strb	r2, [r3, #0]
1000190e:	1cbb      	adds	r3, r7, #2
10001910:	1c0a      	adds	r2, r1, #0
10001912:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));

  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
10001914:	687b      	ldr	r3, [r7, #4]
10001916:	685b      	ldr	r3, [r3, #4]
10001918:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
1000191a:	68fb      	ldr	r3, [r7, #12]
1000191c:	220c      	movs	r2, #12
1000191e:	4393      	bics	r3, r2
10001920:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
10001922:	1cfb      	adds	r3, r7, #3
10001924:	781b      	ldrb	r3, [r3, #0]
10001926:	009b      	lsls	r3, r3, #2
10001928:	68fa      	ldr	r2, [r7, #12]
1000192a:	4313      	orrs	r3, r2
1000192c:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
1000192e:	687b      	ldr	r3, [r7, #4]
10001930:	68fa      	ldr	r2, [r7, #12]
10001932:	605a      	str	r2, [r3, #4]

  /* Next, Configure the stop mode */
  tc = slice->TC;
10001934:	687b      	ldr	r3, [r7, #4]
10001936:	695b      	ldr	r3, [r3, #20]
10001938:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
1000193a:	68bb      	ldr	r3, [r7, #8]
1000193c:	4a07      	ldr	r2, [pc, #28]	; (1000195c <XMC_CCU4_SLICE_StopConfig+0x60>)
1000193e:	4013      	ands	r3, r2
10001940:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
10001942:	1cbb      	adds	r3, r7, #2
10001944:	781b      	ldrb	r3, [r3, #0]
10001946:	021b      	lsls	r3, r3, #8
10001948:	68ba      	ldr	r2, [r7, #8]
1000194a:	4313      	orrs	r3, r2
1000194c:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
1000194e:	687b      	ldr	r3, [r7, #4]
10001950:	68ba      	ldr	r2, [r7, #8]
10001952:	615a      	str	r2, [r3, #20]
}
10001954:	46bd      	mov	sp, r7
10001956:	b004      	add	sp, #16
10001958:	bd80      	pop	{r7, pc}
1000195a:	46c0      	nop			; (mov r8, r8)
1000195c:	fffffcff 	.word	0xfffffcff

10001960 <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
10001960:	b580      	push	{r7, lr}
10001962:	b084      	sub	sp, #16
10001964:	af00      	add	r7, sp, #0
10001966:	6078      	str	r0, [r7, #4]
10001968:	1c0a      	adds	r2, r1, #0
1000196a:	1cfb      	adds	r3, r7, #3
1000196c:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the load function */
  cmc = slice->CMC;
1000196e:	687b      	ldr	r3, [r7, #4]
10001970:	685b      	ldr	r3, [r3, #4]
10001972:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
10001974:	68fb      	ldr	r3, [r7, #12]
10001976:	4a07      	ldr	r2, [pc, #28]	; (10001994 <XMC_CCU4_SLICE_LoadConfig+0x34>)
10001978:	4013      	ands	r3, r2
1000197a:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
1000197c:	1cfb      	adds	r3, r7, #3
1000197e:	781b      	ldrb	r3, [r3, #0]
10001980:	031b      	lsls	r3, r3, #12
10001982:	68fa      	ldr	r2, [r7, #12]
10001984:	4313      	orrs	r3, r2
10001986:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001988:	687b      	ldr	r3, [r7, #4]
1000198a:	68fa      	ldr	r2, [r7, #12]
1000198c:	605a      	str	r2, [r3, #4]
}
1000198e:	46bd      	mov	sp, r7
10001990:	b004      	add	sp, #16
10001992:	bd80      	pop	{r7, pc}
10001994:	ffffcfff 	.word	0xffffcfff

10001998 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
10001998:	b590      	push	{r4, r7, lr}
1000199a:	b085      	sub	sp, #20
1000199c:	af00      	add	r7, sp, #0
1000199e:	6078      	str	r0, [r7, #4]
100019a0:	1c0c      	adds	r4, r1, #0
100019a2:	1c10      	adds	r0, r2, #0
100019a4:	1c19      	adds	r1, r3, #0
100019a6:	1cfb      	adds	r3, r7, #3
100019a8:	1c22      	adds	r2, r4, #0
100019aa:	701a      	strb	r2, [r3, #0]
100019ac:	1cbb      	adds	r3, r7, #2
100019ae:	1c02      	adds	r2, r0, #0
100019b0:	701a      	strb	r2, [r3, #0]
100019b2:	1c7b      	adds	r3, r7, #1
100019b4:	1c0a      	adds	r2, r1, #0
100019b6:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) || \
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));

  tc  = slice->TC;
100019b8:	687b      	ldr	r3, [r7, #4]
100019ba:	695b      	ldr	r3, [r3, #20]
100019bc:	60fb      	str	r3, [r7, #12]
  cmc = slice->CMC;
100019be:	687b      	ldr	r3, [r7, #4]
100019c0:	685b      	ldr	r3, [r3, #4]
100019c2:	60bb      	str	r3, [r7, #8]

  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
100019c4:	68bb      	ldr	r3, [r7, #8]
100019c6:	4a17      	ldr	r2, [pc, #92]	; (10001a24 <XMC_CCU4_SLICE_ModulationConfig+0x8c>)
100019c8:	4013      	ands	r3, r2
100019ca:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
100019cc:	1cfb      	adds	r3, r7, #3
100019ce:	781b      	ldrb	r3, [r3, #0]
100019d0:	049b      	lsls	r3, r3, #18
100019d2:	68ba      	ldr	r2, [r7, #8]
100019d4:	4313      	orrs	r3, r2
100019d6:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
100019d8:	687b      	ldr	r3, [r7, #4]
100019da:	68ba      	ldr	r2, [r7, #8]
100019dc:	605a      	str	r2, [r3, #4]

  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
100019de:	1cbb      	adds	r3, r7, #2
100019e0:	781b      	ldrb	r3, [r3, #0]
100019e2:	2b01      	cmp	r3, #1
100019e4:	d105      	bne.n	100019f2 <XMC_CCU4_SLICE_ModulationConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
100019e6:	68fb      	ldr	r3, [r7, #12]
100019e8:	2280      	movs	r2, #128	; 0x80
100019ea:	0452      	lsls	r2, r2, #17
100019ec:	4313      	orrs	r3, r2
100019ee:	60fb      	str	r3, [r7, #12]
100019f0:	e003      	b.n	100019fa <XMC_CCU4_SLICE_ModulationConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
100019f2:	68fb      	ldr	r3, [r7, #12]
100019f4:	4a0c      	ldr	r2, [pc, #48]	; (10001a28 <XMC_CCU4_SLICE_ModulationConfig+0x90>)
100019f6:	4013      	ands	r3, r2
100019f8:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
100019fa:	1c7b      	adds	r3, r7, #1
100019fc:	781b      	ldrb	r3, [r3, #0]
100019fe:	2b00      	cmp	r3, #0
10001a00:	d005      	beq.n	10001a0e <XMC_CCU4_SLICE_ModulationConfig+0x76>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
10001a02:	68fb      	ldr	r3, [r7, #12]
10001a04:	2280      	movs	r2, #128	; 0x80
10001a06:	0412      	lsls	r2, r2, #16
10001a08:	4313      	orrs	r3, r2
10001a0a:	60fb      	str	r3, [r7, #12]
10001a0c:	e003      	b.n	10001a16 <XMC_CCU4_SLICE_ModulationConfig+0x7e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
10001a0e:	68fb      	ldr	r3, [r7, #12]
10001a10:	4a06      	ldr	r2, [pc, #24]	; (10001a2c <XMC_CCU4_SLICE_ModulationConfig+0x94>)
10001a12:	4013      	ands	r3, r2
10001a14:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
10001a16:	687b      	ldr	r3, [r7, #4]
10001a18:	68fa      	ldr	r2, [r7, #12]
10001a1a:	615a      	str	r2, [r3, #20]
}
10001a1c:	46bd      	mov	sp, r7
10001a1e:	b005      	add	sp, #20
10001a20:	bd90      	pop	{r4, r7, pc}
10001a22:	46c0      	nop			; (mov r8, r8)
10001a24:	fff3ffff 	.word	0xfff3ffff
10001a28:	feffffff 	.word	0xfeffffff
10001a2c:	ff7fffff 	.word	0xff7fffff

10001a30 <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
10001a30:	b580      	push	{r7, lr}
10001a32:	b084      	sub	sp, #16
10001a34:	af00      	add	r7, sp, #0
10001a36:	6078      	str	r0, [r7, #4]
10001a38:	1c0a      	adds	r2, r1, #0
10001a3a:	1cfb      	adds	r3, r7, #3
10001a3c:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
10001a3e:	687b      	ldr	r3, [r7, #4]
10001a40:	685b      	ldr	r3, [r3, #4]
10001a42:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
10001a44:	68fb      	ldr	r3, [r7, #12]
10001a46:	4a07      	ldr	r2, [pc, #28]	; (10001a64 <XMC_CCU4_SLICE_CountConfig+0x34>)
10001a48:	4013      	ands	r3, r2
10001a4a:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
10001a4c:	1cfb      	adds	r3, r7, #3
10001a4e:	781b      	ldrb	r3, [r3, #0]
10001a50:	039b      	lsls	r3, r3, #14
10001a52:	68fa      	ldr	r2, [r7, #12]
10001a54:	4313      	orrs	r3, r2
10001a56:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001a58:	687b      	ldr	r3, [r7, #4]
10001a5a:	68fa      	ldr	r2, [r7, #12]
10001a5c:	605a      	str	r2, [r3, #4]
}
10001a5e:	46bd      	mov	sp, r7
10001a60:	b004      	add	sp, #16
10001a62:	bd80      	pop	{r7, pc}
10001a64:	ffff3fff 	.word	0xffff3fff

10001a68 <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
10001a68:	b580      	push	{r7, lr}
10001a6a:	b084      	sub	sp, #16
10001a6c:	af00      	add	r7, sp, #0
10001a6e:	6078      	str	r0, [r7, #4]
10001a70:	1c0a      	adds	r2, r1, #0
10001a72:	1cfb      	adds	r3, r7, #3
10001a74:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the gate function */
  cmc = slice->CMC;
10001a76:	687b      	ldr	r3, [r7, #4]
10001a78:	685b      	ldr	r3, [r3, #4]
10001a7a:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
10001a7c:	68fb      	ldr	r3, [r7, #12]
10001a7e:	4a07      	ldr	r2, [pc, #28]	; (10001a9c <XMC_CCU4_SLICE_GateConfig+0x34>)
10001a80:	4013      	ands	r3, r2
10001a82:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
10001a84:	1cfb      	adds	r3, r7, #3
10001a86:	781b      	ldrb	r3, [r3, #0]
10001a88:	021b      	lsls	r3, r3, #8
10001a8a:	68fa      	ldr	r2, [r7, #12]
10001a8c:	4313      	orrs	r3, r2
10001a8e:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001a90:	687b      	ldr	r3, [r7, #4]
10001a92:	68fa      	ldr	r2, [r7, #12]
10001a94:	605a      	str	r2, [r3, #4]
}
10001a96:	46bd      	mov	sp, r7
10001a98:	b004      	add	sp, #16
10001a9a:	bd80      	pop	{r7, pc}
10001a9c:	fffffcff 	.word	0xfffffcff

10001aa0 <XMC_CCU4_SLICE_Capture1Config>:
  slice->CMC = cmc;
}

/* API to configure Capture-1 function */
void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
10001aa0:	b580      	push	{r7, lr}
10001aa2:	b084      	sub	sp, #16
10001aa4:	af00      	add	r7, sp, #0
10001aa6:	6078      	str	r0, [r7, #4]
10001aa8:	1c0a      	adds	r2, r1, #0
10001aaa:	1cfb      	adds	r3, r7, #3
10001aac:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the gate function */
  cmc = slice->CMC;
10001aae:	687b      	ldr	r3, [r7, #4]
10001ab0:	685b      	ldr	r3, [r3, #4]
10001ab2:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
10001ab4:	68fb      	ldr	r3, [r7, #12]
10001ab6:	22c0      	movs	r2, #192	; 0xc0
10001ab8:	4393      	bics	r3, r2
10001aba:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
10001abc:	1cfb      	adds	r3, r7, #3
10001abe:	781b      	ldrb	r3, [r3, #0]
10001ac0:	019b      	lsls	r3, r3, #6
10001ac2:	68fa      	ldr	r2, [r7, #12]
10001ac4:	4313      	orrs	r3, r2
10001ac6:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001ac8:	687b      	ldr	r3, [r7, #4]
10001aca:	68fa      	ldr	r2, [r7, #12]
10001acc:	605a      	str	r2, [r3, #4]
}
10001ace:	46bd      	mov	sp, r7
10001ad0:	b004      	add	sp, #16
10001ad2:	bd80      	pop	{r7, pc}

10001ad4 <XMC_CCU4_SLICE_DirectionConfig>:

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
10001ad4:	b580      	push	{r7, lr}
10001ad6:	b084      	sub	sp, #16
10001ad8:	af00      	add	r7, sp, #0
10001ada:	6078      	str	r0, [r7, #4]
10001adc:	1c0a      	adds	r2, r1, #0
10001ade:	1cfb      	adds	r3, r7, #3
10001ae0:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the direction function */
  cmc = slice->CMC;
10001ae2:	687b      	ldr	r3, [r7, #4]
10001ae4:	685b      	ldr	r3, [r3, #4]
10001ae6:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
10001ae8:	68fb      	ldr	r3, [r7, #12]
10001aea:	4a07      	ldr	r2, [pc, #28]	; (10001b08 <XMC_CCU4_SLICE_DirectionConfig+0x34>)
10001aec:	4013      	ands	r3, r2
10001aee:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
10001af0:	1cfb      	adds	r3, r7, #3
10001af2:	781b      	ldrb	r3, [r3, #0]
10001af4:	029b      	lsls	r3, r3, #10
10001af6:	68fa      	ldr	r2, [r7, #12]
10001af8:	4313      	orrs	r3, r2
10001afa:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001afc:	687b      	ldr	r3, [r7, #4]
10001afe:	68fa      	ldr	r2, [r7, #12]
10001b00:	605a      	str	r2, [r3, #4]
}
10001b02:	46bd      	mov	sp, r7
10001b04:	b004      	add	sp, #16
10001b06:	bd80      	pop	{r7, pc}
10001b08:	fffff3ff 	.word	0xfffff3ff

10001b0c <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
10001b0c:	b580      	push	{r7, lr}
10001b0e:	b084      	sub	sp, #16
10001b10:	af00      	add	r7, sp, #0
10001b12:	6078      	str	r0, [r7, #4]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  /* Bind the event with the override function */
  cmc = slice->CMC;
10001b14:	687b      	ldr	r3, [r7, #4]
10001b16:	685b      	ldr	r3, [r3, #4]
10001b18:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 &
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
10001b1a:	68fb      	ldr	r3, [r7, #12]
10001b1c:	4a06      	ldr	r2, [pc, #24]	; (10001b38 <XMC_CCU4_SLICE_StatusBitOverrideConfig+0x2c>)
10001b1e:	4013      	ands	r3, r2
10001b20:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
10001b22:	68fb      	ldr	r3, [r7, #12]
10001b24:	2280      	movs	r2, #128	; 0x80
10001b26:	0252      	lsls	r2, r2, #9
10001b28:	4313      	orrs	r3, r2
10001b2a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001b2c:	687b      	ldr	r3, [r7, #4]
10001b2e:	68fa      	ldr	r2, [r7, #12]
10001b30:	605a      	str	r2, [r3, #4]
}
10001b32:	46bd      	mov	sp, r7
10001b34:	b004      	add	sp, #16
10001b36:	bd80      	pop	{r7, pc}
10001b38:	fffeffff 	.word	0xfffeffff

10001b3c <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
10001b3c:	b580      	push	{r7, lr}
10001b3e:	b084      	sub	sp, #16
10001b40:	af00      	add	r7, sp, #0
10001b42:	6078      	str	r0, [r7, #4]
10001b44:	1c08      	adds	r0, r1, #0
10001b46:	1c11      	adds	r1, r2, #0
10001b48:	1cfb      	adds	r3, r7, #3
10001b4a:	1c02      	adds	r2, r0, #0
10001b4c:	701a      	strb	r2, [r3, #0]
10001b4e:	1cbb      	adds	r3, r7, #2
10001b50:	1c0a      	adds	r2, r1, #0
10001b52:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) || \
             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));

  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
10001b54:	687b      	ldr	r3, [r7, #4]
10001b56:	685b      	ldr	r3, [r3, #4]
10001b58:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
10001b5a:	68bb      	ldr	r3, [r7, #8]
10001b5c:	4a17      	ldr	r2, [pc, #92]	; (10001bbc <XMC_CCU4_SLICE_TrapConfig+0x80>)
10001b5e:	4013      	ands	r3, r2
10001b60:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
10001b62:	68bb      	ldr	r3, [r7, #8]
10001b64:	2280      	movs	r2, #128	; 0x80
10001b66:	0292      	lsls	r2, r2, #10
10001b68:	4313      	orrs	r3, r2
10001b6a:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
10001b6c:	687b      	ldr	r3, [r7, #4]
10001b6e:	68ba      	ldr	r2, [r7, #8]
10001b70:	605a      	str	r2, [r3, #4]

  /* Next, Configure synchronization option */
  tc = slice->TC;
10001b72:	687b      	ldr	r3, [r7, #4]
10001b74:	695b      	ldr	r3, [r3, #20]
10001b76:	60fb      	str	r3, [r7, #12]

  if (synch_with_pwm == (bool) true)
10001b78:	1cbb      	adds	r3, r7, #2
10001b7a:	781b      	ldrb	r3, [r3, #0]
10001b7c:	2b00      	cmp	r3, #0
10001b7e:	d005      	beq.n	10001b8c <XMC_CCU4_SLICE_TrapConfig+0x50>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
10001b80:	68fb      	ldr	r3, [r7, #12]
10001b82:	2280      	movs	r2, #128	; 0x80
10001b84:	0392      	lsls	r2, r2, #14
10001b86:	4313      	orrs	r3, r2
10001b88:	60fb      	str	r3, [r7, #12]
10001b8a:	e003      	b.n	10001b94 <XMC_CCU4_SLICE_TrapConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
10001b8c:	68fb      	ldr	r3, [r7, #12]
10001b8e:	4a0c      	ldr	r2, [pc, #48]	; (10001bc0 <XMC_CCU4_SLICE_TrapConfig+0x84>)
10001b90:	4013      	ands	r3, r2
10001b92:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
10001b94:	1cfb      	adds	r3, r7, #3
10001b96:	781b      	ldrb	r3, [r3, #0]
10001b98:	2b01      	cmp	r3, #1
10001b9a:	d105      	bne.n	10001ba8 <XMC_CCU4_SLICE_TrapConfig+0x6c>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
10001b9c:	68fb      	ldr	r3, [r7, #12]
10001b9e:	2280      	movs	r2, #128	; 0x80
10001ba0:	03d2      	lsls	r2, r2, #15
10001ba2:	4313      	orrs	r3, r2
10001ba4:	60fb      	str	r3, [r7, #12]
10001ba6:	e003      	b.n	10001bb0 <XMC_CCU4_SLICE_TrapConfig+0x74>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
10001ba8:	68fb      	ldr	r3, [r7, #12]
10001baa:	4a06      	ldr	r2, [pc, #24]	; (10001bc4 <XMC_CCU4_SLICE_TrapConfig+0x88>)
10001bac:	4013      	ands	r3, r2
10001bae:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
10001bb0:	687b      	ldr	r3, [r7, #4]
10001bb2:	68fa      	ldr	r2, [r7, #12]
10001bb4:	615a      	str	r2, [r3, #20]
}
10001bb6:	46bd      	mov	sp, r7
10001bb8:	b004      	add	sp, #16
10001bba:	bd80      	pop	{r7, pc}
10001bbc:	fffdffff 	.word	0xfffdffff
10001bc0:	ffdfffff 	.word	0xffdfffff
10001bc4:	ffbfffff 	.word	0xffbfffff

10001bc8 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
10001bc8:	b580      	push	{r7, lr}
10001bca:	b086      	sub	sp, #24
10001bcc:	af00      	add	r7, sp, #0
10001bce:	60f8      	str	r0, [r7, #12]
10001bd0:	60b9      	str	r1, [r7, #8]
10001bd2:	607a      	str	r2, [r7, #4]
             ((ev2_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) || \
              (ev2_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period",
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(ev2_config->duration));
#if defined(CCU4V3) /* Defined for XMC1400 devices only */
  ins = slice->INS2;
10001bd4:	68fb      	ldr	r3, [r7, #12]
10001bd6:	681b      	ldr	r3, [r3, #0]
10001bd8:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS2_EV1EM_Pos);
10001bda:	697b      	ldr	r3, [r7, #20]
10001bdc:	2230      	movs	r2, #48	; 0x30
10001bde:	4393      	bics	r3, r2
10001be0:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS2_EV1EM_Pos;
10001be2:	68bb      	ldr	r3, [r7, #8]
10001be4:	785b      	ldrb	r3, [r3, #1]
10001be6:	011b      	lsls	r3, r3, #4
10001be8:	697a      	ldr	r2, [r7, #20]
10001bea:	4313      	orrs	r3, r2
10001bec:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS2_EV2EM_Pos);
10001bee:	697b      	ldr	r3, [r7, #20]
10001bf0:	4a29      	ldr	r2, [pc, #164]	; (10001c98 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd0>)
10001bf2:	4013      	ands	r3, r2
10001bf4:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS2_EV2EM_Pos;
10001bf6:	687b      	ldr	r3, [r7, #4]
10001bf8:	785b      	ldrb	r3, [r3, #1]
10001bfa:	021b      	lsls	r3, r3, #8
10001bfc:	697a      	ldr	r2, [r7, #20]
10001bfe:	4313      	orrs	r3, r2
10001c00:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS2_EV1LM_Pos);
10001c02:	697b      	ldr	r3, [r7, #20]
10001c04:	2240      	movs	r2, #64	; 0x40
10001c06:	4393      	bics	r3, r2
10001c08:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS2_EV1LM_Pos;
10001c0a:	68bb      	ldr	r3, [r7, #8]
10001c0c:	789b      	ldrb	r3, [r3, #2]
10001c0e:	019b      	lsls	r3, r3, #6
10001c10:	697a      	ldr	r2, [r7, #20]
10001c12:	4313      	orrs	r3, r2
10001c14:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS2_EV2LM_Pos);
10001c16:	697b      	ldr	r3, [r7, #20]
10001c18:	4a20      	ldr	r2, [pc, #128]	; (10001c9c <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd4>)
10001c1a:	4013      	ands	r3, r2
10001c1c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS2_EV2LM_Pos;
10001c1e:	687b      	ldr	r3, [r7, #4]
10001c20:	789b      	ldrb	r3, [r3, #2]
10001c22:	029b      	lsls	r3, r3, #10
10001c24:	697a      	ldr	r2, [r7, #20]
10001c26:	4313      	orrs	r3, r2
10001c28:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS2_LPF1M_Pos);
10001c2a:	697b      	ldr	r3, [r7, #20]
10001c2c:	4a1c      	ldr	r2, [pc, #112]	; (10001ca0 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd8>)
10001c2e:	4013      	ands	r3, r2
10001c30:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS2_LPF1M_Pos;
10001c32:	68bb      	ldr	r3, [r7, #8]
10001c34:	78db      	ldrb	r3, [r3, #3]
10001c36:	051b      	lsls	r3, r3, #20
10001c38:	697a      	ldr	r2, [r7, #20]
10001c3a:	4313      	orrs	r3, r2
10001c3c:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS2_LPF2M_Pos);
10001c3e:	697b      	ldr	r3, [r7, #20]
10001c40:	4a18      	ldr	r2, [pc, #96]	; (10001ca4 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xdc>)
10001c42:	4013      	ands	r3, r2
10001c44:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS2_LPF2M_Pos;
10001c46:	687b      	ldr	r3, [r7, #4]
10001c48:	78db      	ldrb	r3, [r3, #3]
10001c4a:	061b      	lsls	r3, r3, #24
10001c4c:	697a      	ldr	r2, [r7, #20]
10001c4e:	4313      	orrs	r3, r2
10001c50:	617b      	str	r3, [r7, #20]

  slice->INS2 = ins;
10001c52:	68fb      	ldr	r3, [r7, #12]
10001c54:	697a      	ldr	r2, [r7, #20]
10001c56:	601a      	str	r2, [r3, #0]

  ins = slice->INS1;
10001c58:	68fb      	ldr	r3, [r7, #12]
10001c5a:	22d8      	movs	r2, #216	; 0xd8
10001c5c:	589b      	ldr	r3, [r3, r2]
10001c5e:	617b      	str	r3, [r7, #20]

  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV1IS_Pos);
10001c60:	697b      	ldr	r3, [r7, #20]
10001c62:	4a11      	ldr	r2, [pc, #68]	; (10001ca8 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xe0>)
10001c64:	4013      	ands	r3, r2
10001c66:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS1_EV1IS_Pos;
10001c68:	68bb      	ldr	r3, [r7, #8]
10001c6a:	781b      	ldrb	r3, [r3, #0]
10001c6c:	021b      	lsls	r3, r3, #8
10001c6e:	697a      	ldr	r2, [r7, #20]
10001c70:	4313      	orrs	r3, r2
10001c72:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
10001c74:	697b      	ldr	r3, [r7, #20]
10001c76:	4a0d      	ldr	r2, [pc, #52]	; (10001cac <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xe4>)
10001c78:	4013      	ands	r3, r2
10001c7a:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
10001c7c:	687b      	ldr	r3, [r7, #4]
10001c7e:	781b      	ldrb	r3, [r3, #0]
10001c80:	041b      	lsls	r3, r3, #16
10001c82:	697a      	ldr	r2, [r7, #20]
10001c84:	4313      	orrs	r3, r2
10001c86:	617b      	str	r3, [r7, #20]

  slice->INS1 = ins;
10001c88:	68fb      	ldr	r3, [r7, #12]
10001c8a:	21d8      	movs	r1, #216	; 0xd8
10001c8c:	697a      	ldr	r2, [r7, #20]
10001c8e:	505a      	str	r2, [r3, r1]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;

  slice->INS = ins;
#endif
}
10001c90:	46bd      	mov	sp, r7
10001c92:	b006      	add	sp, #24
10001c94:	bd80      	pop	{r7, pc}
10001c96:	46c0      	nop			; (mov r8, r8)
10001c98:	fffffcff 	.word	0xfffffcff
10001c9c:	fffffbff 	.word	0xfffffbff
10001ca0:	ffcfffff 	.word	0xffcfffff
10001ca4:	fcffffff 	.word	0xfcffffff
10001ca8:	ffffc0ff 	.word	0xffffc0ff
10001cac:	ffc0ffff 	.word	0xffc0ffff

10001cb0 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
10001cb0:	b580      	push	{r7, lr}
10001cb2:	b088      	sub	sp, #32
10001cb4:	af00      	add	r7, sp, #0
10001cb6:	60f8      	str	r0, [r7, #12]
10001cb8:	607a      	str	r2, [r7, #4]
10001cba:	230b      	movs	r3, #11
10001cbc:	18fb      	adds	r3, r7, r3
10001cbe:	1c0a      	adds	r2, r1, #0
10001cc0:	701a      	strb	r2, [r3, #0]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) || \
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
10001cc2:	231f      	movs	r3, #31
10001cc4:	18fb      	adds	r3, r7, r3
10001cc6:	220b      	movs	r2, #11
10001cc8:	18ba      	adds	r2, r7, r2
10001cca:	7812      	ldrb	r2, [r2, #0]
10001ccc:	3a01      	subs	r2, #1
10001cce:	701a      	strb	r2, [r3, #0]

#if defined(CCU4V3) /* Defined for XMC1400 devices only */
  ins = slice->INS2;
10001cd0:	68fb      	ldr	r3, [r7, #12]
10001cd2:	681b      	ldr	r3, [r3, #0]
10001cd4:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS2_EV0EM_Pos) + (uint8_t)(offset << 2U);
10001cd6:	2317      	movs	r3, #23
10001cd8:	18fb      	adds	r3, r7, r3
10001cda:	221f      	movs	r2, #31
10001cdc:	18ba      	adds	r2, r7, r2
10001cde:	7812      	ldrb	r2, [r2, #0]
10001ce0:	0092      	lsls	r2, r2, #2
10001ce2:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
10001ce4:	2317      	movs	r3, #23
10001ce6:	18fb      	adds	r3, r7, r3
10001ce8:	781b      	ldrb	r3, [r3, #0]
10001cea:	2203      	movs	r2, #3
10001cec:	409a      	lsls	r2, r3
10001cee:	1c13      	adds	r3, r2, #0
10001cf0:	43da      	mvns	r2, r3
10001cf2:	69bb      	ldr	r3, [r7, #24]
10001cf4:	4013      	ands	r3, r2
10001cf6:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
10001cf8:	687b      	ldr	r3, [r7, #4]
10001cfa:	785b      	ldrb	r3, [r3, #1]
10001cfc:	1c1a      	adds	r2, r3, #0
10001cfe:	2317      	movs	r3, #23
10001d00:	18fb      	adds	r3, r7, r3
10001d02:	781b      	ldrb	r3, [r3, #0]
10001d04:	409a      	lsls	r2, r3
10001d06:	1c13      	adds	r3, r2, #0
10001d08:	69ba      	ldr	r2, [r7, #24]
10001d0a:	4313      	orrs	r3, r2
10001d0c:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS2_EV0LM_Pos) + (uint8_t)(offset << 2U);
10001d0e:	231f      	movs	r3, #31
10001d10:	18fb      	adds	r3, r7, r3
10001d12:	781b      	ldrb	r3, [r3, #0]
10001d14:	009b      	lsls	r3, r3, #2
10001d16:	b2da      	uxtb	r2, r3
10001d18:	2317      	movs	r3, #23
10001d1a:	18fb      	adds	r3, r7, r3
10001d1c:	3202      	adds	r2, #2
10001d1e:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
10001d20:	2317      	movs	r3, #23
10001d22:	18fb      	adds	r3, r7, r3
10001d24:	781b      	ldrb	r3, [r3, #0]
10001d26:	2201      	movs	r2, #1
10001d28:	409a      	lsls	r2, r3
10001d2a:	1c13      	adds	r3, r2, #0
10001d2c:	43da      	mvns	r2, r3
10001d2e:	69bb      	ldr	r3, [r7, #24]
10001d30:	4013      	ands	r3, r2
10001d32:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
10001d34:	687b      	ldr	r3, [r7, #4]
10001d36:	789b      	ldrb	r3, [r3, #2]
10001d38:	1c1a      	adds	r2, r3, #0
10001d3a:	2317      	movs	r3, #23
10001d3c:	18fb      	adds	r3, r7, r3
10001d3e:	781b      	ldrb	r3, [r3, #0]
10001d40:	409a      	lsls	r2, r3
10001d42:	1c13      	adds	r3, r2, #0
10001d44:	69ba      	ldr	r2, [r7, #24]
10001d46:	4313      	orrs	r3, r2
10001d48:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS2_LPF0M_Pos) + (uint8_t)(offset << 2U);
10001d4a:	231f      	movs	r3, #31
10001d4c:	18fb      	adds	r3, r7, r3
10001d4e:	781b      	ldrb	r3, [r3, #0]
10001d50:	009b      	lsls	r3, r3, #2
10001d52:	b2da      	uxtb	r2, r3
10001d54:	2317      	movs	r3, #23
10001d56:	18fb      	adds	r3, r7, r3
10001d58:	3210      	adds	r2, #16
10001d5a:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
10001d5c:	2317      	movs	r3, #23
10001d5e:	18fb      	adds	r3, r7, r3
10001d60:	781b      	ldrb	r3, [r3, #0]
10001d62:	2203      	movs	r2, #3
10001d64:	409a      	lsls	r2, r3
10001d66:	1c13      	adds	r3, r2, #0
10001d68:	43da      	mvns	r2, r3
10001d6a:	69bb      	ldr	r3, [r7, #24]
10001d6c:	4013      	ands	r3, r2
10001d6e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
10001d70:	687b      	ldr	r3, [r7, #4]
10001d72:	78db      	ldrb	r3, [r3, #3]
10001d74:	1c1a      	adds	r2, r3, #0
10001d76:	2317      	movs	r3, #23
10001d78:	18fb      	adds	r3, r7, r3
10001d7a:	781b      	ldrb	r3, [r3, #0]
10001d7c:	409a      	lsls	r2, r3
10001d7e:	1c13      	adds	r3, r2, #0
10001d80:	69ba      	ldr	r2, [r7, #24]
10001d82:	4313      	orrs	r3, r2
10001d84:	61bb      	str	r3, [r7, #24]

  slice->INS2 = ins;
10001d86:	68fb      	ldr	r3, [r7, #12]
10001d88:	69ba      	ldr	r2, [r7, #24]
10001d8a:	601a      	str	r2, [r3, #0]

  ins = slice->INS1;
10001d8c:	68fb      	ldr	r3, [r7, #12]
10001d8e:	22d8      	movs	r2, #216	; 0xd8
10001d90:	589b      	ldr	r3, [r3, r2]
10001d92:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS1_EV0IS_Pos) + (uint8_t)(offset << 3U);
10001d94:	2317      	movs	r3, #23
10001d96:	18fb      	adds	r3, r7, r3
10001d98:	221f      	movs	r2, #31
10001d9a:	18ba      	adds	r2, r7, r2
10001d9c:	7812      	ldrb	r2, [r2, #0]
10001d9e:	00d2      	lsls	r2, r2, #3
10001da0:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
10001da2:	2317      	movs	r3, #23
10001da4:	18fb      	adds	r3, r7, r3
10001da6:	781b      	ldrb	r3, [r3, #0]
10001da8:	223f      	movs	r2, #63	; 0x3f
10001daa:	409a      	lsls	r2, r3
10001dac:	1c13      	adds	r3, r2, #0
10001dae:	43da      	mvns	r2, r3
10001db0:	69bb      	ldr	r3, [r7, #24]
10001db2:	4013      	ands	r3, r2
10001db4:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
10001db6:	687b      	ldr	r3, [r7, #4]
10001db8:	781b      	ldrb	r3, [r3, #0]
10001dba:	1c1a      	adds	r2, r3, #0
10001dbc:	2317      	movs	r3, #23
10001dbe:	18fb      	adds	r3, r7, r3
10001dc0:	781b      	ldrb	r3, [r3, #0]
10001dc2:	409a      	lsls	r2, r3
10001dc4:	1c13      	adds	r3, r2, #0
10001dc6:	69ba      	ldr	r2, [r7, #24]
10001dc8:	4313      	orrs	r3, r2
10001dca:	61bb      	str	r3, [r7, #24]

  slice->INS1 = ins;
10001dcc:	68fb      	ldr	r3, [r7, #12]
10001dce:	21d8      	movs	r1, #216	; 0xd8
10001dd0:	69ba      	ldr	r2, [r7, #24]
10001dd2:	505a      	str	r2, [r3, r1]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS = ins;
#endif
}
10001dd4:	46bd      	mov	sp, r7
10001dd6:	b008      	add	sp, #32
10001dd8:	bd80      	pop	{r7, pc}
10001dda:	46c0      	nop			; (mov r8, r8)

10001ddc <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
10001ddc:	b580      	push	{r7, lr}
10001dde:	b084      	sub	sp, #16
10001de0:	af00      	add	r7, sp, #0
10001de2:	6078      	str	r0, [r7, #4]
10001de4:	1c0a      	adds	r2, r1, #0
10001de6:	1cfb      	adds	r3, r7, #3
10001de8:	701a      	strb	r2, [r3, #0]
  uint32_t fpc;

  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
10001dea:	687b      	ldr	r3, [r7, #4]
10001dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001dee:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
10001df0:	68fb      	ldr	r3, [r7, #12]
10001df2:	4a09      	ldr	r2, [pc, #36]	; (10001e18 <XMC_CCU4_SLICE_SetPrescaler+0x3c>)
10001df4:	4013      	ands	r3, r2
10001df6:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
10001df8:	1cfb      	adds	r3, r7, #3
10001dfa:	781b      	ldrb	r3, [r3, #0]
10001dfc:	021b      	lsls	r3, r3, #8
10001dfe:	68fa      	ldr	r2, [r7, #12]
10001e00:	4313      	orrs	r3, r2
10001e02:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
10001e04:	687b      	ldr	r3, [r7, #4]
10001e06:	68fa      	ldr	r2, [r7, #12]
10001e08:	629a      	str	r2, [r3, #40]	; 0x28
  /*
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
10001e0a:	1cfb      	adds	r3, r7, #3
10001e0c:	781a      	ldrb	r2, [r3, #0]
10001e0e:	687b      	ldr	r3, [r7, #4]
10001e10:	625a      	str	r2, [r3, #36]	; 0x24
}
10001e12:	46bd      	mov	sp, r7
10001e14:	b004      	add	sp, #16
10001e16:	bd80      	pop	{r7, pc}
10001e18:	fffff0ff 	.word	0xfffff0ff

10001e1c <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10001e1c:	b580      	push	{r7, lr}
10001e1e:	b086      	sub	sp, #24
10001e20:	af00      	add	r7, sp, #0
10001e22:	6078      	str	r0, [r7, #4]
10001e24:	1c08      	adds	r0, r1, #0
10001e26:	1c11      	adds	r1, r2, #0
10001e28:	1cfb      	adds	r3, r7, #3
10001e2a:	1c02      	adds	r2, r0, #0
10001e2c:	701a      	strb	r2, [r3, #0]
10001e2e:	1cbb      	adds	r3, r7, #2
10001e30:	1c0a      	adds	r2, r1, #0
10001e32:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
10001e34:	1cfb      	adds	r3, r7, #3
10001e36:	781b      	ldrb	r3, [r3, #0]
10001e38:	2b0b      	cmp	r3, #11
10001e3a:	d820      	bhi.n	10001e7e <XMC_CCU4_SLICE_SetInterruptNode+0x62>
10001e3c:	009a      	lsls	r2, r3, #2
10001e3e:	4b20      	ldr	r3, [pc, #128]	; (10001ec0 <XMC_CCU4_SLICE_SetInterruptNode+0xa4>)
10001e40:	18d3      	adds	r3, r2, r3
10001e42:	681b      	ldr	r3, [r3, #0]
10001e44:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
10001e46:	2303      	movs	r3, #3
10001e48:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
10001e4a:	2300      	movs	r3, #0
10001e4c:	617b      	str	r3, [r7, #20]
      break;
10001e4e:	e01b      	b.n	10001e88 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
10001e50:	230c      	movs	r3, #12
10001e52:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
10001e54:	2302      	movs	r3, #2
10001e56:	617b      	str	r3, [r7, #20]
      break;
10001e58:	e016      	b.n	10001e88 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
10001e5a:	23c0      	movs	r3, #192	; 0xc0
10001e5c:	009b      	lsls	r3, r3, #2
10001e5e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
10001e60:	2308      	movs	r3, #8
10001e62:	617b      	str	r3, [r7, #20]
      break;
10001e64:	e010      	b.n	10001e88 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
10001e66:	23c0      	movs	r3, #192	; 0xc0
10001e68:	011b      	lsls	r3, r3, #4
10001e6a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
10001e6c:	230a      	movs	r3, #10
10001e6e:	617b      	str	r3, [r7, #20]
      break;
10001e70:	e00a      	b.n	10001e88 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
10001e72:	23c0      	movs	r3, #192	; 0xc0
10001e74:	019b      	lsls	r3, r3, #6
10001e76:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
10001e78:	230c      	movs	r3, #12
10001e7a:	617b      	str	r3, [r7, #20]
      break;
10001e7c:	e004      	b.n	10001e88 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>
	  
	default:
	  mask = 0;
10001e7e:	2300      	movs	r3, #0
10001e80:	613b      	str	r3, [r7, #16]
	  pos = 0;
10001e82:	2300      	movs	r3, #0
10001e84:	617b      	str	r3, [r7, #20]
	  break;
10001e86:	46c0      	nop			; (mov r8, r8)
  }

  if (mask != 0)
10001e88:	693b      	ldr	r3, [r7, #16]
10001e8a:	2b00      	cmp	r3, #0
10001e8c:	d014      	beq.n	10001eb8 <XMC_CCU4_SLICE_SetInterruptNode+0x9c>
  {
    srs = slice->SRS;
10001e8e:	687b      	ldr	r3, [r7, #4]
10001e90:	22a8      	movs	r2, #168	; 0xa8
10001e92:	589b      	ldr	r3, [r3, r2]
10001e94:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
10001e96:	693b      	ldr	r3, [r7, #16]
10001e98:	43da      	mvns	r2, r3
10001e9a:	68fb      	ldr	r3, [r7, #12]
10001e9c:	4013      	ands	r3, r2
10001e9e:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
10001ea0:	1cbb      	adds	r3, r7, #2
10001ea2:	781a      	ldrb	r2, [r3, #0]
10001ea4:	697b      	ldr	r3, [r7, #20]
10001ea6:	409a      	lsls	r2, r3
10001ea8:	1c13      	adds	r3, r2, #0
10001eaa:	68fa      	ldr	r2, [r7, #12]
10001eac:	4313      	orrs	r3, r2
10001eae:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
10001eb0:	687b      	ldr	r3, [r7, #4]
10001eb2:	21a8      	movs	r1, #168	; 0xa8
10001eb4:	68fa      	ldr	r2, [r7, #12]
10001eb6:	505a      	str	r2, [r3, r1]
  }
}
10001eb8:	46bd      	mov	sp, r7
10001eba:	b006      	add	sp, #24
10001ebc:	bd80      	pop	{r7, pc}
10001ebe:	46c0      	nop			; (mov r8, r8)
10001ec0:	100058e8 	.word	0x100058e8

10001ec4 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
10001ec4:	b580      	push	{r7, lr}
10001ec6:	b082      	sub	sp, #8
10001ec8:	af00      	add	r7, sp, #0
10001eca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
10001ecc:	687b      	ldr	r3, [r7, #4]
10001ece:	2280      	movs	r2, #128	; 0x80
10001ed0:	0052      	lsls	r2, r2, #1
10001ed2:	60da      	str	r2, [r3, #12]
}
10001ed4:	46bd      	mov	sp, r7
10001ed6:	b002      	add	sp, #8
10001ed8:	bd80      	pop	{r7, pc}
10001eda:	46c0      	nop			; (mov r8, r8)

10001edc <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
10001edc:	b580      	push	{r7, lr}
10001ede:	b082      	sub	sp, #8
10001ee0:	af00      	add	r7, sp, #0
10001ee2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
10001ee4:	687b      	ldr	r3, [r7, #4]
10001ee6:	2201      	movs	r2, #1
10001ee8:	611a      	str	r2, [r3, #16]
}
10001eea:	46bd      	mov	sp, r7
10001eec:	b002      	add	sp, #8
10001eee:	bd80      	pop	{r7, pc}

10001ef0 <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
10001ef0:	b580      	push	{r7, lr}
10001ef2:	b082      	sub	sp, #8
10001ef4:	af00      	add	r7, sp, #0
10001ef6:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
10001ef8:	687a      	ldr	r2, [r7, #4]
10001efa:	23a0      	movs	r3, #160	; 0xa0
10001efc:	05db      	lsls	r3, r3, #23
10001efe:	429a      	cmp	r2, r3
10001f00:	d103      	bne.n	10001f0a <XMC_CCU8_lUngateClock+0x1a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
10001f02:	2002      	movs	r0, #2
10001f04:	f7ff fae6 	bl	100014d4 <XMC_SCU_CLOCK_UngatePeripheralClock>
10001f08:	e008      	b.n	10001f1c <XMC_CCU8_lUngateClock+0x2c>
  }
#if defined(CCU81)
  else if (module == CCU81)
10001f0a:	687b      	ldr	r3, [r7, #4]
10001f0c:	4a05      	ldr	r2, [pc, #20]	; (10001f24 <XMC_CCU8_lUngateClock+0x34>)
10001f0e:	4293      	cmp	r3, r2
10001f10:	d104      	bne.n	10001f1c <XMC_CCU8_lUngateClock+0x2c>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
10001f12:	2380      	movs	r3, #128	; 0x80
10001f14:	025b      	lsls	r3, r3, #9
10001f16:	1c18      	adds	r0, r3, #0
10001f18:	f7ff fadc 	bl	100014d4 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
10001f1c:	46bd      	mov	sp, r7
10001f1e:	b002      	add	sp, #8
10001f20:	bd80      	pop	{r7, pc}
10001f22:	46c0      	nop			; (mov r8, r8)
10001f24:	50004000 	.word	0x50004000

10001f28 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
10001f28:	b580      	push	{r7, lr}
10001f2a:	b082      	sub	sp, #8
10001f2c:	af00      	add	r7, sp, #0
10001f2e:	6078      	str	r0, [r7, #4]
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
10001f30:	687b      	ldr	r3, [r7, #4]
10001f32:	1c18      	adds	r0, r3, #0
10001f34:	f7ff ffdc 	bl	10001ef0 <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
#endif
}
10001f38:	46bd      	mov	sp, r7
10001f3a:	b002      	add	sp, #8
10001f3c:	bd80      	pop	{r7, pc}
10001f3e:	46c0      	nop			; (mov r8, r8)

10001f40 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
10001f40:	b580      	push	{r7, lr}
10001f42:	b084      	sub	sp, #16
10001f44:	af00      	add	r7, sp, #0
10001f46:	6078      	str	r0, [r7, #4]
10001f48:	1c0a      	adds	r2, r1, #0
10001f4a:	1cfb      	adds	r3, r7, #3
10001f4c:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
10001f4e:	687b      	ldr	r3, [r7, #4]
10001f50:	1c18      	adds	r0, r3, #0
10001f52:	f7ff ffe9 	bl	10001f28 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
10001f56:	687b      	ldr	r3, [r7, #4]
10001f58:	1c18      	adds	r0, r3, #0
10001f5a:	f7ff ffb3 	bl	10001ec4 <XMC_CCU8_StartPrescaler>

  gctrl = module->GCTRL;
10001f5e:	687b      	ldr	r3, [r7, #4]
10001f60:	681b      	ldr	r3, [r3, #0]
10001f62:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
10001f64:	68fb      	ldr	r3, [r7, #12]
10001f66:	4a07      	ldr	r2, [pc, #28]	; (10001f84 <XMC_CCU8_Init+0x44>)
10001f68:	4013      	ands	r3, r2
10001f6a:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
10001f6c:	1cfb      	adds	r3, r7, #3
10001f6e:	781b      	ldrb	r3, [r3, #0]
10001f70:	039b      	lsls	r3, r3, #14
10001f72:	68fa      	ldr	r2, [r7, #12]
10001f74:	4313      	orrs	r3, r2
10001f76:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
10001f78:	687b      	ldr	r3, [r7, #4]
10001f7a:	68fa      	ldr	r2, [r7, #12]
10001f7c:	601a      	str	r2, [r3, #0]
}
10001f7e:	46bd      	mov	sp, r7
10001f80:	b004      	add	sp, #16
10001f82:	bd80      	pop	{r7, pc}
10001f84:	ffff3fff 	.word	0xffff3fff

10001f88 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
10001f88:	b580      	push	{r7, lr}
10001f8a:	b082      	sub	sp, #8
10001f8c:	af00      	add	r7, sp, #0
10001f8e:	6078      	str	r0, [r7, #4]
10001f90:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
10001f92:	687b      	ldr	r3, [r7, #4]
10001f94:	1c18      	adds	r0, r3, #0
10001f96:	f7ff ffa1 	bl	10001edc <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
10001f9a:	683b      	ldr	r3, [r7, #0]
10001f9c:	681a      	ldr	r2, [r3, #0]
10001f9e:	687b      	ldr	r3, [r7, #4]
10001fa0:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
10001fa2:	683b      	ldr	r3, [r7, #0]
10001fa4:	7b5b      	ldrb	r3, [r3, #13]
10001fa6:	06db      	lsls	r3, r3, #27
10001fa8:	0fdb      	lsrs	r3, r3, #31
10001faa:	b2db      	uxtb	r3, r3
10001fac:	051a      	lsls	r2, r3, #20
10001fae:	687b      	ldr	r3, [r7, #4]
10001fb0:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
10001fb2:	683b      	ldr	r3, [r7, #0]
10001fb4:	7b1b      	ldrb	r3, [r3, #12]
10001fb6:	071b      	lsls	r3, r3, #28
10001fb8:	0f1b      	lsrs	r3, r3, #28
10001fba:	b2db      	uxtb	r3, r3
10001fbc:	1c1a      	adds	r2, r3, #0
10001fbe:	687b      	ldr	r3, [r7, #4]
10001fc0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
10001fc2:	683b      	ldr	r3, [r7, #0]
10001fc4:	7b1b      	ldrb	r3, [r3, #12]
10001fc6:	061b      	lsls	r3, r3, #24
10001fc8:	0f1b      	lsrs	r3, r3, #28
10001fca:	b2db      	uxtb	r3, r3
10001fcc:	1c1a      	adds	r2, r3, #0
10001fce:	687b      	ldr	r3, [r7, #4]
10001fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
10001fd2:	683b      	ldr	r3, [r7, #0]
10001fd4:	7b5b      	ldrb	r3, [r3, #13]
10001fd6:	071b      	lsls	r3, r3, #28
10001fd8:	0f1b      	lsrs	r3, r3, #28
10001fda:	b2db      	uxtb	r3, r3
10001fdc:	1c1a      	adds	r2, r3, #0
10001fde:	687b      	ldr	r3, [r7, #4]
10001fe0:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
10001fe2:	683b      	ldr	r3, [r7, #0]
10001fe4:	685a      	ldr	r2, [r3, #4]
10001fe6:	687b      	ldr	r3, [r7, #4]
10001fe8:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
10001fea:	683b      	ldr	r3, [r7, #0]
10001fec:	689a      	ldr	r2, [r3, #8]
10001fee:	687b      	ldr	r3, [r7, #4]
10001ff0:	649a      	str	r2, [r3, #72]	; 0x48
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
#endif
}
10001ff2:	46bd      	mov	sp, r7
10001ff4:	b002      	add	sp, #8
10001ff6:	bd80      	pop	{r7, pc}

10001ff8 <XMC_CCU8_SetMultiChannelShadowTransferMode>:
  slice->CHC = chc;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. */
void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t slice_mode_msk)
{
10001ff8:	b580      	push	{r7, lr}
10001ffa:	b084      	sub	sp, #16
10001ffc:	af00      	add	r7, sp, #0
10001ffe:	6078      	str	r0, [r7, #4]
10002000:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidModule(module));

  gctrl = module->GCTRL;
10002002:	687b      	ldr	r3, [r7, #4]
10002004:	681b      	ldr	r3, [r3, #0]
10002006:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
10002008:	683b      	ldr	r3, [r7, #0]
1000200a:	0c1b      	lsrs	r3, r3, #16
1000200c:	43da      	mvns	r2, r3
1000200e:	68fb      	ldr	r3, [r7, #12]
10002010:	4013      	ands	r3, r2
10002012:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
10002014:	683b      	ldr	r3, [r7, #0]
10002016:	041b      	lsls	r3, r3, #16
10002018:	0c1b      	lsrs	r3, r3, #16
1000201a:	68fa      	ldr	r2, [r7, #12]
1000201c:	4313      	orrs	r3, r2
1000201e:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
10002020:	687b      	ldr	r3, [r7, #4]
10002022:	68fa      	ldr	r2, [r7, #12]
10002024:	601a      	str	r2, [r3, #0]
}
10002026:	46bd      	mov	sp, r7
10002028:	b004      	add	sp, #16
1000202a:	bd80      	pop	{r7, pc}

1000202c <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
1000202c:	b580      	push	{r7, lr}
1000202e:	b084      	sub	sp, #16
10002030:	af00      	add	r7, sp, #0
10002032:	6078      	str	r0, [r7, #4]
10002034:	1c08      	adds	r0, r1, #0
10002036:	1c11      	adds	r1, r2, #0
10002038:	1cfb      	adds	r3, r7, #3
1000203a:	1c02      	adds	r2, r0, #0
1000203c:	701a      	strb	r2, [r3, #0]
1000203e:	1cbb      	adds	r3, r7, #2
10002040:	1c0a      	adds	r2, r1, #0
10002042:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode",
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) || \
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
10002044:	687b      	ldr	r3, [r7, #4]
10002046:	685b      	ldr	r3, [r3, #4]
10002048:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
1000204a:	68bb      	ldr	r3, [r7, #8]
1000204c:	2203      	movs	r2, #3
1000204e:	4393      	bics	r3, r2
10002050:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
10002052:	1cfb      	adds	r3, r7, #3
10002054:	781b      	ldrb	r3, [r3, #0]
10002056:	68ba      	ldr	r2, [r7, #8]
10002058:	4313      	orrs	r3, r2
1000205a:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
1000205c:	687b      	ldr	r3, [r7, #4]
1000205e:	68ba      	ldr	r2, [r7, #8]
10002060:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
10002062:	687b      	ldr	r3, [r7, #4]
10002064:	695b      	ldr	r3, [r3, #20]
10002066:	60fb      	str	r3, [r7, #12]

  if (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
10002068:	1cbb      	adds	r3, r7, #2
1000206a:	781b      	ldrb	r3, [r3, #0]
1000206c:	2b01      	cmp	r3, #1
1000206e:	d105      	bne.n	1000207c <XMC_CCU8_SLICE_StartConfig+0x50>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
10002070:	68fb      	ldr	r3, [r7, #12]
10002072:	2280      	movs	r2, #128	; 0x80
10002074:	00d2      	lsls	r2, r2, #3
10002076:	4313      	orrs	r3, r2
10002078:	60fb      	str	r3, [r7, #12]
1000207a:	e003      	b.n	10002084 <XMC_CCU8_SLICE_StartConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
1000207c:	68fb      	ldr	r3, [r7, #12]
1000207e:	4a04      	ldr	r2, [pc, #16]	; (10002090 <XMC_CCU8_SLICE_StartConfig+0x64>)
10002080:	4013      	ands	r3, r2
10002082:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
10002084:	687b      	ldr	r3, [r7, #4]
10002086:	68fa      	ldr	r2, [r7, #12]
10002088:	615a      	str	r2, [r3, #20]
}
1000208a:	46bd      	mov	sp, r7
1000208c:	b004      	add	sp, #16
1000208e:	bd80      	pop	{r7, pc}
10002090:	fffffbff 	.word	0xfffffbff

10002094 <XMC_CCU8_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_EVENT_t event,
                               const XMC_CCU8_SLICE_END_MODE_t end_mode)
{
10002094:	b580      	push	{r7, lr}
10002096:	b084      	sub	sp, #16
10002098:	af00      	add	r7, sp, #0
1000209a:	6078      	str	r0, [r7, #4]
1000209c:	1c08      	adds	r0, r1, #0
1000209e:	1c11      	adds	r1, r2, #0
100020a0:	1cfb      	adds	r3, r7, #3
100020a2:	1c02      	adds	r2, r0, #0
100020a4:	701a      	strb	r2, [r3, #0]
100020a6:	1cbb      	adds	r3, r7, #2
100020a8:	1c0a      	adds	r2, r1, #0
100020aa:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode));

  cmc = slice->CMC;
100020ac:	687b      	ldr	r3, [r7, #4]
100020ae:	685b      	ldr	r3, [r3, #4]
100020b0:	60fb      	str	r3, [r7, #12]
  /* First, Bind the event with the stop function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
100020b2:	68fb      	ldr	r3, [r7, #12]
100020b4:	220c      	movs	r2, #12
100020b6:	4393      	bics	r3, r2
100020b8:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
100020ba:	1cfb      	adds	r3, r7, #3
100020bc:	781b      	ldrb	r3, [r3, #0]
100020be:	009b      	lsls	r3, r3, #2
100020c0:	68fa      	ldr	r2, [r7, #12]
100020c2:	4313      	orrs	r3, r2
100020c4:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100020c6:	687b      	ldr	r3, [r7, #4]
100020c8:	68fa      	ldr	r2, [r7, #12]
100020ca:	605a      	str	r2, [r3, #4]

  /* Configure the stop mode */
  tc = slice->TC;
100020cc:	687b      	ldr	r3, [r7, #4]
100020ce:	695b      	ldr	r3, [r3, #20]
100020d0:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
100020d2:	68bb      	ldr	r3, [r7, #8]
100020d4:	4a07      	ldr	r2, [pc, #28]	; (100020f4 <XMC_CCU8_SLICE_StopConfig+0x60>)
100020d6:	4013      	ands	r3, r2
100020d8:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
100020da:	1cbb      	adds	r3, r7, #2
100020dc:	781b      	ldrb	r3, [r3, #0]
100020de:	021b      	lsls	r3, r3, #8
100020e0:	68ba      	ldr	r2, [r7, #8]
100020e2:	4313      	orrs	r3, r2
100020e4:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
100020e6:	687b      	ldr	r3, [r7, #4]
100020e8:	68ba      	ldr	r2, [r7, #8]
100020ea:	615a      	str	r2, [r3, #20]
}
100020ec:	46bd      	mov	sp, r7
100020ee:	b004      	add	sp, #16
100020f0:	bd80      	pop	{r7, pc}
100020f2:	46c0      	nop			; (mov r8, r8)
100020f4:	fffffcff 	.word	0xfffffcff

100020f8 <XMC_CCU8_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice*/
void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
100020f8:	b580      	push	{r7, lr}
100020fa:	b084      	sub	sp, #16
100020fc:	af00      	add	r7, sp, #0
100020fe:	6078      	str	r0, [r7, #4]
10002100:	1c0a      	adds	r2, r1, #0
10002102:	1cfb      	adds	r3, r7, #3
10002104:	701a      	strb	r2, [r3, #0]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
10002106:	687b      	ldr	r3, [r7, #4]
10002108:	685b      	ldr	r3, [r3, #4]
1000210a:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
1000210c:	68fb      	ldr	r3, [r7, #12]
1000210e:	4a07      	ldr	r2, [pc, #28]	; (1000212c <XMC_CCU8_SLICE_LoadConfig+0x34>)
10002110:	4013      	ands	r3, r2
10002112:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
10002114:	1cfb      	adds	r3, r7, #3
10002116:	781b      	ldrb	r3, [r3, #0]
10002118:	031b      	lsls	r3, r3, #12
1000211a:	68fa      	ldr	r2, [r7, #12]
1000211c:	4313      	orrs	r3, r2
1000211e:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10002120:	687b      	ldr	r3, [r7, #4]
10002122:	68fa      	ldr	r2, [r7, #12]
10002124:	605a      	str	r2, [r3, #4]
}
10002126:	46bd      	mov	sp, r7
10002128:	b004      	add	sp, #16
1000212a:	bd80      	pop	{r7, pc}
1000212c:	ffffcfff 	.word	0xffffcfff

10002130 <XMC_CCU8_SLICE_LoadSelector>:

/* API to configure, which compare register value has to be loaded during external load event */
void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNEL_t ch_num)
{
10002130:	b580      	push	{r7, lr}
10002132:	b084      	sub	sp, #16
10002134:	af00      	add	r7, sp, #0
10002136:	6078      	str	r0, [r7, #4]
10002138:	1c0a      	adds	r2, r1, #0
1000213a:	1cfb      	adds	r3, r7, #3
1000213c:	701a      	strb	r2, [r3, #0]
  uint32_t tc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch_num));

  tc = slice->TC;
1000213e:	687b      	ldr	r3, [r7, #4]
10002140:	695b      	ldr	r3, [r3, #20]
10002142:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
10002144:	68fb      	ldr	r3, [r7, #12]
10002146:	2280      	movs	r2, #128	; 0x80
10002148:	4393      	bics	r3, r2
1000214a:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
1000214c:	1cfb      	adds	r3, r7, #3
1000214e:	781b      	ldrb	r3, [r3, #0]
10002150:	01db      	lsls	r3, r3, #7
10002152:	68fa      	ldr	r2, [r7, #12]
10002154:	4313      	orrs	r3, r2
10002156:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
10002158:	687b      	ldr	r3, [r7, #4]
1000215a:	68fa      	ldr	r2, [r7, #12]
1000215c:	615a      	str	r2, [r3, #20]
}
1000215e:	46bd      	mov	sp, r7
10002160:	b004      	add	sp, #16
10002162:	bd80      	pop	{r7, pc}

10002164 <XMC_CCU8_SLICE_ModulationConfig>:
void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_EVENT_t event,
                                     const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
                                     const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
                                     const bool synch_with_pwm)
{
10002164:	b590      	push	{r4, r7, lr}
10002166:	b085      	sub	sp, #20
10002168:	af00      	add	r7, sp, #0
1000216a:	6078      	str	r0, [r7, #4]
1000216c:	1c0c      	adds	r4, r1, #0
1000216e:	1c10      	adds	r0, r2, #0
10002170:	1c19      	adds	r1, r3, #0
10002172:	1cfb      	adds	r3, r7, #3
10002174:	1c22      	adds	r2, r4, #0
10002176:	701a      	strb	r2, [r3, #0]
10002178:	1cbb      	adds	r3, r7, #2
1000217a:	1c02      	adds	r2, r0, #0
1000217c:	701a      	strb	r2, [r3, #0]
1000217e:	1c7b      	adds	r3, r7, #1
10002180:	1c0a      	adds	r2, r1, #0
10002182:	701a      	strb	r2, [r3, #0]
             XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
  XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) || \
              (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));

  cmc = slice->CMC;
10002184:	687b      	ldr	r3, [r7, #4]
10002186:	685b      	ldr	r3, [r3, #4]
10002188:	60bb      	str	r3, [r7, #8]

  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
1000218a:	68bb      	ldr	r3, [r7, #8]
1000218c:	4a1d      	ldr	r2, [pc, #116]	; (10002204 <XMC_CCU8_SLICE_ModulationConfig+0xa0>)
1000218e:	4013      	ands	r3, r2
10002190:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
10002192:	1cfb      	adds	r3, r7, #3
10002194:	781b      	ldrb	r3, [r3, #0]
10002196:	049b      	lsls	r3, r3, #18
10002198:	68ba      	ldr	r2, [r7, #8]
1000219a:	4313      	orrs	r3, r2
1000219c:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
1000219e:	687b      	ldr	r3, [r7, #4]
100021a0:	68ba      	ldr	r2, [r7, #8]
100021a2:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
100021a4:	687b      	ldr	r3, [r7, #4]
100021a6:	695b      	ldr	r3, [r3, #20]
100021a8:	60fb      	str	r3, [r7, #12]

  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
100021aa:	1cbb      	adds	r3, r7, #2
100021ac:	781b      	ldrb	r3, [r3, #0]
100021ae:	2b01      	cmp	r3, #1
100021b0:	d105      	bne.n	100021be <XMC_CCU8_SLICE_ModulationConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
100021b2:	68fb      	ldr	r3, [r7, #12]
100021b4:	2280      	movs	r2, #128	; 0x80
100021b6:	0452      	lsls	r2, r2, #17
100021b8:	4313      	orrs	r3, r2
100021ba:	60fb      	str	r3, [r7, #12]
100021bc:	e003      	b.n	100021c6 <XMC_CCU8_SLICE_ModulationConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
100021be:	68fb      	ldr	r3, [r7, #12]
100021c0:	4a11      	ldr	r2, [pc, #68]	; (10002208 <XMC_CCU8_SLICE_ModulationConfig+0xa4>)
100021c2:	4013      	ands	r3, r2
100021c4:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == true)
100021c6:	2320      	movs	r3, #32
100021c8:	18fb      	adds	r3, r7, r3
100021ca:	781b      	ldrb	r3, [r3, #0]
100021cc:	2b00      	cmp	r3, #0
100021ce:	d005      	beq.n	100021dc <XMC_CCU8_SLICE_ModulationConfig+0x78>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
100021d0:	68fb      	ldr	r3, [r7, #12]
100021d2:	2280      	movs	r2, #128	; 0x80
100021d4:	0412      	lsls	r2, r2, #16
100021d6:	4313      	orrs	r3, r2
100021d8:	60fb      	str	r3, [r7, #12]
100021da:	e003      	b.n	100021e4 <XMC_CCU8_SLICE_ModulationConfig+0x80>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
100021dc:	68fb      	ldr	r3, [r7, #12]
100021de:	4a0b      	ldr	r2, [pc, #44]	; (1000220c <XMC_CCU8_SLICE_ModulationConfig+0xa8>)
100021e0:	4013      	ands	r3, r2
100021e2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure on which channel external modulation to be applied */
  tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
100021e4:	68fb      	ldr	r3, [r7, #12]
100021e6:	4a0a      	ldr	r2, [pc, #40]	; (10002210 <XMC_CCU8_SLICE_ModulationConfig+0xac>)
100021e8:	4013      	ands	r3, r2
100021ea:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
100021ec:	1c7b      	adds	r3, r7, #1
100021ee:	781b      	ldrb	r3, [r3, #0]
100021f0:	06db      	lsls	r3, r3, #27
100021f2:	68fa      	ldr	r2, [r7, #12]
100021f4:	4313      	orrs	r3, r2
100021f6:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
100021f8:	687b      	ldr	r3, [r7, #4]
100021fa:	68fa      	ldr	r2, [r7, #12]
100021fc:	615a      	str	r2, [r3, #20]
}
100021fe:	46bd      	mov	sp, r7
10002200:	b005      	add	sp, #20
10002202:	bd90      	pop	{r4, r7, pc}
10002204:	fff3ffff 	.word	0xfff3ffff
10002208:	feffffff 	.word	0xfeffffff
1000220c:	ff7fffff 	.word	0xff7fffff
10002210:	e7ffffff 	.word	0xe7ffffff

10002214 <XMC_CCU8_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
10002214:	b580      	push	{r7, lr}
10002216:	b084      	sub	sp, #16
10002218:	af00      	add	r7, sp, #0
1000221a:	6078      	str	r0, [r7, #4]
1000221c:	1c0a      	adds	r2, r1, #0
1000221e:	1cfb      	adds	r3, r7, #3
10002220:	701a      	strb	r2, [r3, #0]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
10002222:	687b      	ldr	r3, [r7, #4]
10002224:	685b      	ldr	r3, [r3, #4]
10002226:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the count function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
10002228:	68fb      	ldr	r3, [r7, #12]
1000222a:	4a07      	ldr	r2, [pc, #28]	; (10002248 <XMC_CCU8_SLICE_CountConfig+0x34>)
1000222c:	4013      	ands	r3, r2
1000222e:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
10002230:	1cfb      	adds	r3, r7, #3
10002232:	781b      	ldrb	r3, [r3, #0]
10002234:	039b      	lsls	r3, r3, #14
10002236:	68fa      	ldr	r2, [r7, #12]
10002238:	4313      	orrs	r3, r2
1000223a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
1000223c:	687b      	ldr	r3, [r7, #4]
1000223e:	68fa      	ldr	r2, [r7, #12]
10002240:	605a      	str	r2, [r3, #4]
}
10002242:	46bd      	mov	sp, r7
10002244:	b004      	add	sp, #16
10002246:	bd80      	pop	{r7, pc}
10002248:	ffff3fff 	.word	0xffff3fff

1000224c <XMC_CCU8_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
1000224c:	b580      	push	{r7, lr}
1000224e:	b084      	sub	sp, #16
10002250:	af00      	add	r7, sp, #0
10002252:	6078      	str	r0, [r7, #4]
10002254:	1c0a      	adds	r2, r1, #0
10002256:	1cfb      	adds	r3, r7, #3
10002258:	701a      	strb	r2, [r3, #0]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
1000225a:	687b      	ldr	r3, [r7, #4]
1000225c:	685b      	ldr	r3, [r3, #4]
1000225e:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the gate function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
10002260:	68fb      	ldr	r3, [r7, #12]
10002262:	4a07      	ldr	r2, [pc, #28]	; (10002280 <XMC_CCU8_SLICE_GateConfig+0x34>)
10002264:	4013      	ands	r3, r2
10002266:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
10002268:	1cfb      	adds	r3, r7, #3
1000226a:	781b      	ldrb	r3, [r3, #0]
1000226c:	021b      	lsls	r3, r3, #8
1000226e:	68fa      	ldr	r2, [r7, #12]
10002270:	4313      	orrs	r3, r2
10002272:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10002274:	687b      	ldr	r3, [r7, #4]
10002276:	68fa      	ldr	r2, [r7, #12]
10002278:	605a      	str	r2, [r3, #4]
}
1000227a:	46bd      	mov	sp, r7
1000227c:	b004      	add	sp, #16
1000227e:	bd80      	pop	{r7, pc}
10002280:	fffffcff 	.word	0xfffffcff

10002284 <XMC_CCU8_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
10002284:	b580      	push	{r7, lr}
10002286:	b084      	sub	sp, #16
10002288:	af00      	add	r7, sp, #0
1000228a:	6078      	str	r0, [r7, #4]
1000228c:	1c0a      	adds	r2, r1, #0
1000228e:	1cfb      	adds	r3, r7, #3
10002290:	701a      	strb	r2, [r3, #0]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
10002292:	687b      	ldr	r3, [r7, #4]
10002294:	685b      	ldr	r3, [r3, #4]
10002296:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the direction function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
10002298:	68fb      	ldr	r3, [r7, #12]
1000229a:	4a07      	ldr	r2, [pc, #28]	; (100022b8 <XMC_CCU8_SLICE_DirectionConfig+0x34>)
1000229c:	4013      	ands	r3, r2
1000229e:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
100022a0:	1cfb      	adds	r3, r7, #3
100022a2:	781b      	ldrb	r3, [r3, #0]
100022a4:	029b      	lsls	r3, r3, #10
100022a6:	68fa      	ldr	r2, [r7, #12]
100022a8:	4313      	orrs	r3, r2
100022aa:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100022ac:	687b      	ldr	r3, [r7, #4]
100022ae:	68fa      	ldr	r2, [r7, #12]
100022b0:	605a      	str	r2, [r3, #4]
}
100022b2:	46bd      	mov	sp, r7
100022b4:	b004      	add	sp, #16
100022b6:	bd80      	pop	{r7, pc}
100022b8:	fffff3ff 	.word	0xfffff3ff

100022bc <XMC_CCU8_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice)
{
100022bc:	b580      	push	{r7, lr}
100022be:	b084      	sub	sp, #16
100022c0:	af00      	add	r7, sp, #0
100022c2:	6078      	str	r0, [r7, #4]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  cmc = slice->CMC;
100022c4:	687b      	ldr	r3, [r7, #4]
100022c6:	685b      	ldr	r3, [r3, #4]
100022c8:	60fb      	str	r3, [r7, #12]

  /* Map status bit trigger override to Event 1 &
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
100022ca:	68fb      	ldr	r3, [r7, #12]
100022cc:	4a06      	ldr	r2, [pc, #24]	; (100022e8 <XMC_CCU8_SLICE_StatusBitOverrideConfig+0x2c>)
100022ce:	4013      	ands	r3, r2
100022d0:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
100022d2:	68fb      	ldr	r3, [r7, #12]
100022d4:	2280      	movs	r2, #128	; 0x80
100022d6:	0252      	lsls	r2, r2, #9
100022d8:	4313      	orrs	r3, r2
100022da:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100022dc:	687b      	ldr	r3, [r7, #4]
100022de:	68fa      	ldr	r2, [r7, #12]
100022e0:	605a      	str	r2, [r3, #4]
}
100022e2:	46bd      	mov	sp, r7
100022e4:	b004      	add	sp, #16
100022e6:	bd80      	pop	{r7, pc}
100022e8:	fffeffff 	.word	0xfffeffff

100022ec <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
100022ec:	b580      	push	{r7, lr}
100022ee:	b084      	sub	sp, #16
100022f0:	af00      	add	r7, sp, #0
100022f2:	6078      	str	r0, [r7, #4]
100022f4:	1c08      	adds	r0, r1, #0
100022f6:	1c11      	adds	r1, r2, #0
100022f8:	1cfb      	adds	r3, r7, #3
100022fa:	1c02      	adds	r2, r0, #0
100022fc:	701a      	strb	r2, [r3, #0]
100022fe:	1cbb      	adds	r3, r7, #2
10002300:	1c0a      	adds	r2, r1, #0
10002302:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) || \
             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
10002304:	687b      	ldr	r3, [r7, #4]
10002306:	685b      	ldr	r3, [r3, #4]
10002308:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
1000230a:	68bb      	ldr	r3, [r7, #8]
1000230c:	4a17      	ldr	r2, [pc, #92]	; (1000236c <XMC_CCU8_SLICE_TrapConfig+0x80>)
1000230e:	4013      	ands	r3, r2
10002310:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
10002312:	68bb      	ldr	r3, [r7, #8]
10002314:	2280      	movs	r2, #128	; 0x80
10002316:	0292      	lsls	r2, r2, #10
10002318:	4313      	orrs	r3, r2
1000231a:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
1000231c:	687b      	ldr	r3, [r7, #4]
1000231e:	68ba      	ldr	r2, [r7, #8]
10002320:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
10002322:	687b      	ldr	r3, [r7, #4]
10002324:	695b      	ldr	r3, [r3, #20]
10002326:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if (synch_with_pwm == true)
10002328:	1cbb      	adds	r3, r7, #2
1000232a:	781b      	ldrb	r3, [r3, #0]
1000232c:	2b00      	cmp	r3, #0
1000232e:	d005      	beq.n	1000233c <XMC_CCU8_SLICE_TrapConfig+0x50>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
10002330:	68fb      	ldr	r3, [r7, #12]
10002332:	2280      	movs	r2, #128	; 0x80
10002334:	0392      	lsls	r2, r2, #14
10002336:	4313      	orrs	r3, r2
10002338:	60fb      	str	r3, [r7, #12]
1000233a:	e003      	b.n	10002344 <XMC_CCU8_SLICE_TrapConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
1000233c:	68fb      	ldr	r3, [r7, #12]
1000233e:	4a0c      	ldr	r2, [pc, #48]	; (10002370 <XMC_CCU8_SLICE_TrapConfig+0x84>)
10002340:	4013      	ands	r3, r2
10002342:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
10002344:	1cfb      	adds	r3, r7, #3
10002346:	781b      	ldrb	r3, [r3, #0]
10002348:	2b01      	cmp	r3, #1
1000234a:	d105      	bne.n	10002358 <XMC_CCU8_SLICE_TrapConfig+0x6c>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
1000234c:	68fb      	ldr	r3, [r7, #12]
1000234e:	2280      	movs	r2, #128	; 0x80
10002350:	03d2      	lsls	r2, r2, #15
10002352:	4313      	orrs	r3, r2
10002354:	60fb      	str	r3, [r7, #12]
10002356:	e003      	b.n	10002360 <XMC_CCU8_SLICE_TrapConfig+0x74>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
10002358:	68fb      	ldr	r3, [r7, #12]
1000235a:	4a06      	ldr	r2, [pc, #24]	; (10002374 <XMC_CCU8_SLICE_TrapConfig+0x88>)
1000235c:	4013      	ands	r3, r2
1000235e:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
10002360:	687b      	ldr	r3, [r7, #4]
10002362:	68fa      	ldr	r2, [r7, #12]
10002364:	615a      	str	r2, [r3, #20]
}
10002366:	46bd      	mov	sp, r7
10002368:	b004      	add	sp, #16
1000236a:	bd80      	pop	{r7, pc}
1000236c:	fffdffff 	.word	0xfffdffff
10002370:	ffdfffff 	.word	0xffdfffff
10002374:	ffbfffff 	.word	0xffbfffff

10002378 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_config,
    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_config)
{
10002378:	b580      	push	{r7, lr}
1000237a:	b086      	sub	sp, #24
1000237c:	af00      	add	r7, sp, #0
1000237e:	60f8      	str	r0, [r7, #12]
10002380:	60b9      	str	r1, [r7, #8]
10002382:	607a      	str	r2, [r7, #4]
              (ev2_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(ev2_config->duration));

#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  ins = slice->INS2;
10002384:	68fb      	ldr	r3, [r7, #12]
10002386:	681b      	ldr	r3, [r3, #0]
10002388:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS2_EV1EM_Pos);
1000238a:	697b      	ldr	r3, [r7, #20]
1000238c:	2230      	movs	r2, #48	; 0x30
1000238e:	4393      	bics	r3, r2
10002390:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS2_EV1EM_Pos;
10002392:	68bb      	ldr	r3, [r7, #8]
10002394:	785b      	ldrb	r3, [r3, #1]
10002396:	011b      	lsls	r3, r3, #4
10002398:	697a      	ldr	r2, [r7, #20]
1000239a:	4313      	orrs	r3, r2
1000239c:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS2_EV2EM_Pos);
1000239e:	697b      	ldr	r3, [r7, #20]
100023a0:	4a29      	ldr	r2, [pc, #164]	; (10002448 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xd0>)
100023a2:	4013      	ands	r3, r2
100023a4:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS2_EV2EM_Pos;
100023a6:	687b      	ldr	r3, [r7, #4]
100023a8:	785b      	ldrb	r3, [r3, #1]
100023aa:	021b      	lsls	r3, r3, #8
100023ac:	697a      	ldr	r2, [r7, #20]
100023ae:	4313      	orrs	r3, r2
100023b0:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS2_EV1LM_Pos);
100023b2:	697b      	ldr	r3, [r7, #20]
100023b4:	2240      	movs	r2, #64	; 0x40
100023b6:	4393      	bics	r3, r2
100023b8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS2_EV1LM_Pos;
100023ba:	68bb      	ldr	r3, [r7, #8]
100023bc:	789b      	ldrb	r3, [r3, #2]
100023be:	019b      	lsls	r3, r3, #6
100023c0:	697a      	ldr	r2, [r7, #20]
100023c2:	4313      	orrs	r3, r2
100023c4:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS2_EV2LM_Pos);
100023c6:	697b      	ldr	r3, [r7, #20]
100023c8:	4a20      	ldr	r2, [pc, #128]	; (1000244c <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xd4>)
100023ca:	4013      	ands	r3, r2
100023cc:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS2_EV2LM_Pos;
100023ce:	687b      	ldr	r3, [r7, #4]
100023d0:	789b      	ldrb	r3, [r3, #2]
100023d2:	029b      	lsls	r3, r3, #10
100023d4:	697a      	ldr	r2, [r7, #20]
100023d6:	4313      	orrs	r3, r2
100023d8:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS2_LPF1M_Pos);
100023da:	697b      	ldr	r3, [r7, #20]
100023dc:	4a1c      	ldr	r2, [pc, #112]	; (10002450 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xd8>)
100023de:	4013      	ands	r3, r2
100023e0:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS2_LPF1M_Pos;
100023e2:	68bb      	ldr	r3, [r7, #8]
100023e4:	78db      	ldrb	r3, [r3, #3]
100023e6:	051b      	lsls	r3, r3, #20
100023e8:	697a      	ldr	r2, [r7, #20]
100023ea:	4313      	orrs	r3, r2
100023ec:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS2_LPF2M_Pos);
100023ee:	697b      	ldr	r3, [r7, #20]
100023f0:	4a18      	ldr	r2, [pc, #96]	; (10002454 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xdc>)
100023f2:	4013      	ands	r3, r2
100023f4:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS2_LPF2M_Pos;
100023f6:	687b      	ldr	r3, [r7, #4]
100023f8:	78db      	ldrb	r3, [r3, #3]
100023fa:	061b      	lsls	r3, r3, #24
100023fc:	697a      	ldr	r2, [r7, #20]
100023fe:	4313      	orrs	r3, r2
10002400:	617b      	str	r3, [r7, #20]

  slice->INS2 = ins;
10002402:	68fb      	ldr	r3, [r7, #12]
10002404:	697a      	ldr	r2, [r7, #20]
10002406:	601a      	str	r2, [r3, #0]

  ins = slice->INS1;
10002408:	68fb      	ldr	r3, [r7, #12]
1000240a:	22d8      	movs	r2, #216	; 0xd8
1000240c:	589b      	ldr	r3, [r3, r2]
1000240e:	617b      	str	r3, [r7, #20]
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV1IS_Pos);
10002410:	697b      	ldr	r3, [r7, #20]
10002412:	4a11      	ldr	r2, [pc, #68]	; (10002458 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xe0>)
10002414:	4013      	ands	r3, r2
10002416:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS1_EV1IS_Pos;
10002418:	68bb      	ldr	r3, [r7, #8]
1000241a:	781b      	ldrb	r3, [r3, #0]
1000241c:	021b      	lsls	r3, r3, #8
1000241e:	697a      	ldr	r2, [r7, #20]
10002420:	4313      	orrs	r3, r2
10002422:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
10002424:	697b      	ldr	r3, [r7, #20]
10002426:	4a0d      	ldr	r2, [pc, #52]	; (1000245c <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xe4>)
10002428:	4013      	ands	r3, r2
1000242a:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;
1000242c:	687b      	ldr	r3, [r7, #4]
1000242e:	781b      	ldrb	r3, [r3, #0]
10002430:	041b      	lsls	r3, r3, #16
10002432:	697a      	ldr	r2, [r7, #20]
10002434:	4313      	orrs	r3, r2
10002436:	617b      	str	r3, [r7, #20]

  slice->INS1 = ins;
10002438:	68fb      	ldr	r3, [r7, #12]
1000243a:	21d8      	movs	r1, #216	; 0xd8
1000243c:	697a      	ldr	r2, [r7, #20]
1000243e:	505a      	str	r2, [r3, r1]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;

  slice->INS = ins;
#endif
}
10002440:	46bd      	mov	sp, r7
10002442:	b006      	add	sp, #24
10002444:	bd80      	pop	{r7, pc}
10002446:	46c0      	nop			; (mov r8, r8)
10002448:	fffffcff 	.word	0xfffffcff
1000244c:	fffffbff 	.word	0xfffffbff
10002450:	ffcfffff 	.word	0xffcfffff
10002454:	fcffffff 	.word	0xfcffffff
10002458:	ffffc0ff 	.word	0xffffc0ff
1000245c:	ffc0ffff 	.word	0xffc0ffff

10002460 <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
10002460:	b580      	push	{r7, lr}
10002462:	b088      	sub	sp, #32
10002464:	af00      	add	r7, sp, #0
10002466:	60f8      	str	r0, [r7, #12]
10002468:	607a      	str	r2, [r7, #4]
1000246a:	230b      	movs	r3, #11
1000246c:	18fb      	adds	r3, r7, r3
1000246e:	1c0a      	adds	r2, r1, #0
10002470:	701a      	strb	r2, [r3, #0]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
10002472:	231f      	movs	r3, #31
10002474:	18fb      	adds	r3, r7, r3
10002476:	220b      	movs	r2, #11
10002478:	18ba      	adds	r2, r7, r2
1000247a:	7812      	ldrb	r2, [r2, #0]
1000247c:	3a01      	subs	r2, #1
1000247e:	701a      	strb	r2, [r3, #0]

#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  ins = slice->INS2;
10002480:	68fb      	ldr	r3, [r7, #12]
10002482:	681b      	ldr	r3, [r3, #0]
10002484:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS2_EV0EM_Pos) + (uint8_t)(offset << 2U);
10002486:	2317      	movs	r3, #23
10002488:	18fb      	adds	r3, r7, r3
1000248a:	221f      	movs	r2, #31
1000248c:	18ba      	adds	r2, r7, r2
1000248e:	7812      	ldrb	r2, [r2, #0]
10002490:	0092      	lsls	r2, r2, #2
10002492:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
10002494:	2317      	movs	r3, #23
10002496:	18fb      	adds	r3, r7, r3
10002498:	781b      	ldrb	r3, [r3, #0]
1000249a:	2203      	movs	r2, #3
1000249c:	409a      	lsls	r2, r3
1000249e:	1c13      	adds	r3, r2, #0
100024a0:	43da      	mvns	r2, r3
100024a2:	69bb      	ldr	r3, [r7, #24]
100024a4:	4013      	ands	r3, r2
100024a6:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
100024a8:	687b      	ldr	r3, [r7, #4]
100024aa:	785b      	ldrb	r3, [r3, #1]
100024ac:	1c1a      	adds	r2, r3, #0
100024ae:	2317      	movs	r3, #23
100024b0:	18fb      	adds	r3, r7, r3
100024b2:	781b      	ldrb	r3, [r3, #0]
100024b4:	409a      	lsls	r2, r3
100024b6:	1c13      	adds	r3, r2, #0
100024b8:	69ba      	ldr	r2, [r7, #24]
100024ba:	4313      	orrs	r3, r2
100024bc:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS2_EV0LM_Pos) + (uint8_t)(offset << 2U);
100024be:	231f      	movs	r3, #31
100024c0:	18fb      	adds	r3, r7, r3
100024c2:	781b      	ldrb	r3, [r3, #0]
100024c4:	009b      	lsls	r3, r3, #2
100024c6:	b2da      	uxtb	r2, r3
100024c8:	2317      	movs	r3, #23
100024ca:	18fb      	adds	r3, r7, r3
100024cc:	3202      	adds	r2, #2
100024ce:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
100024d0:	2317      	movs	r3, #23
100024d2:	18fb      	adds	r3, r7, r3
100024d4:	781b      	ldrb	r3, [r3, #0]
100024d6:	2201      	movs	r2, #1
100024d8:	409a      	lsls	r2, r3
100024da:	1c13      	adds	r3, r2, #0
100024dc:	43da      	mvns	r2, r3
100024de:	69bb      	ldr	r3, [r7, #24]
100024e0:	4013      	ands	r3, r2
100024e2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
100024e4:	687b      	ldr	r3, [r7, #4]
100024e6:	789b      	ldrb	r3, [r3, #2]
100024e8:	1c1a      	adds	r2, r3, #0
100024ea:	2317      	movs	r3, #23
100024ec:	18fb      	adds	r3, r7, r3
100024ee:	781b      	ldrb	r3, [r3, #0]
100024f0:	409a      	lsls	r2, r3
100024f2:	1c13      	adds	r3, r2, #0
100024f4:	69ba      	ldr	r2, [r7, #24]
100024f6:	4313      	orrs	r3, r2
100024f8:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS2_LPF0M_Pos) + (uint8_t)(offset << 2U);
100024fa:	231f      	movs	r3, #31
100024fc:	18fb      	adds	r3, r7, r3
100024fe:	781b      	ldrb	r3, [r3, #0]
10002500:	009b      	lsls	r3, r3, #2
10002502:	b2da      	uxtb	r2, r3
10002504:	2317      	movs	r3, #23
10002506:	18fb      	adds	r3, r7, r3
10002508:	3210      	adds	r2, #16
1000250a:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
1000250c:	2317      	movs	r3, #23
1000250e:	18fb      	adds	r3, r7, r3
10002510:	781b      	ldrb	r3, [r3, #0]
10002512:	2203      	movs	r2, #3
10002514:	409a      	lsls	r2, r3
10002516:	1c13      	adds	r3, r2, #0
10002518:	43da      	mvns	r2, r3
1000251a:	69bb      	ldr	r3, [r7, #24]
1000251c:	4013      	ands	r3, r2
1000251e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
10002520:	687b      	ldr	r3, [r7, #4]
10002522:	78db      	ldrb	r3, [r3, #3]
10002524:	1c1a      	adds	r2, r3, #0
10002526:	2317      	movs	r3, #23
10002528:	18fb      	adds	r3, r7, r3
1000252a:	781b      	ldrb	r3, [r3, #0]
1000252c:	409a      	lsls	r2, r3
1000252e:	1c13      	adds	r3, r2, #0
10002530:	69ba      	ldr	r2, [r7, #24]
10002532:	4313      	orrs	r3, r2
10002534:	61bb      	str	r3, [r7, #24]

  slice->INS2 = ins;
10002536:	68fb      	ldr	r3, [r7, #12]
10002538:	69ba      	ldr	r2, [r7, #24]
1000253a:	601a      	str	r2, [r3, #0]

  ins = slice->INS1;
1000253c:	68fb      	ldr	r3, [r7, #12]
1000253e:	22d8      	movs	r2, #216	; 0xd8
10002540:	589b      	ldr	r3, [r3, r2]
10002542:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS1_EV0IS_Pos) + (uint8_t)(offset << 3U);
10002544:	2317      	movs	r3, #23
10002546:	18fb      	adds	r3, r7, r3
10002548:	221f      	movs	r2, #31
1000254a:	18ba      	adds	r2, r7, r2
1000254c:	7812      	ldrb	r2, [r2, #0]
1000254e:	00d2      	lsls	r2, r2, #3
10002550:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
10002552:	2317      	movs	r3, #23
10002554:	18fb      	adds	r3, r7, r3
10002556:	781b      	ldrb	r3, [r3, #0]
10002558:	223f      	movs	r2, #63	; 0x3f
1000255a:	409a      	lsls	r2, r3
1000255c:	1c13      	adds	r3, r2, #0
1000255e:	43da      	mvns	r2, r3
10002560:	69bb      	ldr	r3, [r7, #24]
10002562:	4013      	ands	r3, r2
10002564:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
10002566:	687b      	ldr	r3, [r7, #4]
10002568:	781b      	ldrb	r3, [r3, #0]
1000256a:	1c1a      	adds	r2, r3, #0
1000256c:	2317      	movs	r3, #23
1000256e:	18fb      	adds	r3, r7, r3
10002570:	781b      	ldrb	r3, [r3, #0]
10002572:	409a      	lsls	r2, r3
10002574:	1c13      	adds	r3, r2, #0
10002576:	69ba      	ldr	r2, [r7, #24]
10002578:	4313      	orrs	r3, r2
1000257a:	61bb      	str	r3, [r7, #24]

  slice->INS1 = ins;
1000257c:	68fb      	ldr	r3, [r7, #12]
1000257e:	21d8      	movs	r1, #216	; 0xd8
10002580:	69ba      	ldr	r2, [r7, #24]
10002582:	505a      	str	r2, [r3, r1]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS = ins;
#endif
}
10002584:	46bd      	mov	sp, r7
10002586:	b008      	add	sp, #32
10002588:	bd80      	pop	{r7, pc}
1000258a:	46c0      	nop			; (mov r8, r8)

1000258c <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
1000258c:	b580      	push	{r7, lr}
1000258e:	b082      	sub	sp, #8
10002590:	af00      	add	r7, sp, #0
10002592:	6078      	str	r0, [r7, #4]
10002594:	1c0a      	adds	r2, r1, #0
10002596:	1cbb      	adds	r3, r7, #2
10002598:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
1000259a:	1cbb      	adds	r3, r7, #2
1000259c:	881a      	ldrh	r2, [r3, #0]
1000259e:	687b      	ldr	r3, [r7, #4]
100025a0:	635a      	str	r2, [r3, #52]	; 0x34
}
100025a2:	46bd      	mov	sp, r7
100025a4:	b002      	add	sp, #8
100025a6:	bd80      	pop	{r7, pc}

100025a8 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
    const uint16_t compare_val)
{
100025a8:	b580      	push	{r7, lr}
100025aa:	b082      	sub	sp, #8
100025ac:	af00      	add	r7, sp, #0
100025ae:	6078      	str	r0, [r7, #4]
100025b0:	1c08      	adds	r0, r1, #0
100025b2:	1c11      	adds	r1, r2, #0
100025b4:	1cfb      	adds	r3, r7, #3
100025b6:	1c02      	adds	r2, r0, #0
100025b8:	701a      	strb	r2, [r3, #0]
100025ba:	1c3b      	adds	r3, r7, #0
100025bc:	1c0a      	adds	r2, r1, #0
100025be:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
100025c0:	1cfb      	adds	r3, r7, #3
100025c2:	781b      	ldrb	r3, [r3, #0]
100025c4:	2b00      	cmp	r3, #0
100025c6:	d104      	bne.n	100025d2 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x2a>
  {
    slice->CR1S = (uint32_t) compare_val;
100025c8:	1c3b      	adds	r3, r7, #0
100025ca:	881a      	ldrh	r2, [r3, #0]
100025cc:	687b      	ldr	r3, [r7, #4]
100025ce:	63da      	str	r2, [r3, #60]	; 0x3c
100025d0:	e003      	b.n	100025da <XMC_CCU8_SLICE_SetTimerCompareMatch+0x32>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
100025d2:	1c3b      	adds	r3, r7, #0
100025d4:	881a      	ldrh	r2, [r3, #0]
100025d6:	687b      	ldr	r3, [r7, #4]
100025d8:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
100025da:	46bd      	mov	sp, r7
100025dc:	b002      	add	sp, #8
100025de:	bd80      	pop	{r7, pc}

100025e0 <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
100025e0:	b580      	push	{r7, lr}
100025e2:	b086      	sub	sp, #24
100025e4:	af00      	add	r7, sp, #0
100025e6:	6078      	str	r0, [r7, #4]
100025e8:	1c08      	adds	r0, r1, #0
100025ea:	1c11      	adds	r1, r2, #0
100025ec:	1cfb      	adds	r3, r7, #3
100025ee:	1c02      	adds	r2, r0, #0
100025f0:	701a      	strb	r2, [r3, #0]
100025f2:	1cbb      	adds	r3, r7, #2
100025f4:	1c0a      	adds	r2, r1, #0
100025f6:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  switch (event)
100025f8:	1cfb      	adds	r3, r7, #3
100025fa:	781b      	ldrb	r3, [r3, #0]
100025fc:	2b0b      	cmp	r3, #11
100025fe:	d825      	bhi.n	1000264c <XMC_CCU8_SLICE_SetInterruptNode+0x6c>
10002600:	009a      	lsls	r2, r3, #2
10002602:	4b22      	ldr	r3, [pc, #136]	; (1000268c <XMC_CCU8_SLICE_SetInterruptNode+0xac>)
10002604:	18d3      	adds	r3, r2, r3
10002606:	681b      	ldr	r3, [r3, #0]
10002608:	469f      	mov	pc, r3
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
1000260a:	2303      	movs	r3, #3
1000260c:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
1000260e:	2300      	movs	r3, #0
10002610:	613b      	str	r3, [r7, #16]
      break;
10002612:	e020      	b.n	10002656 <XMC_CCU8_SLICE_SetInterruptNode+0x76>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
10002614:	230c      	movs	r3, #12
10002616:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
10002618:	2302      	movs	r3, #2
1000261a:	613b      	str	r3, [r7, #16]
      break;
1000261c:	e01b      	b.n	10002656 <XMC_CCU8_SLICE_SetInterruptNode+0x76>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
1000261e:	2330      	movs	r3, #48	; 0x30
10002620:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
10002622:	2304      	movs	r3, #4
10002624:	613b      	str	r3, [r7, #16]
      break;
10002626:	e016      	b.n	10002656 <XMC_CCU8_SLICE_SetInterruptNode+0x76>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
10002628:	23c0      	movs	r3, #192	; 0xc0
1000262a:	009b      	lsls	r3, r3, #2
1000262c:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
1000262e:	2308      	movs	r3, #8
10002630:	613b      	str	r3, [r7, #16]
      break;
10002632:	e010      	b.n	10002656 <XMC_CCU8_SLICE_SetInterruptNode+0x76>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
10002634:	23c0      	movs	r3, #192	; 0xc0
10002636:	011b      	lsls	r3, r3, #4
10002638:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
1000263a:	230a      	movs	r3, #10
1000263c:	613b      	str	r3, [r7, #16]
      break;
1000263e:	e00a      	b.n	10002656 <XMC_CCU8_SLICE_SetInterruptNode+0x76>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU8_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
10002640:	23c0      	movs	r3, #192	; 0xc0
10002642:	019b      	lsls	r3, r3, #6
10002644:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
10002646:	230c      	movs	r3, #12
10002648:	613b      	str	r3, [r7, #16]
      break;
1000264a:	e004      	b.n	10002656 <XMC_CCU8_SLICE_SetInterruptNode+0x76>
	  
	default:
	  mask = 0;
1000264c:	2300      	movs	r3, #0
1000264e:	617b      	str	r3, [r7, #20]
	  pos = 0;
10002650:	2300      	movs	r3, #0
10002652:	613b      	str	r3, [r7, #16]
	  break;
10002654:	46c0      	nop			; (mov r8, r8)
  }

  if (mask != 0)
10002656:	697b      	ldr	r3, [r7, #20]
10002658:	2b00      	cmp	r3, #0
1000265a:	d014      	beq.n	10002686 <XMC_CCU8_SLICE_SetInterruptNode+0xa6>
  {
    srs = slice->SRS;
1000265c:	687b      	ldr	r3, [r7, #4]
1000265e:	22a8      	movs	r2, #168	; 0xa8
10002660:	589b      	ldr	r3, [r3, r2]
10002662:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
10002664:	697b      	ldr	r3, [r7, #20]
10002666:	43da      	mvns	r2, r3
10002668:	68fb      	ldr	r3, [r7, #12]
1000266a:	4013      	ands	r3, r2
1000266c:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
1000266e:	1cbb      	adds	r3, r7, #2
10002670:	781a      	ldrb	r2, [r3, #0]
10002672:	693b      	ldr	r3, [r7, #16]
10002674:	409a      	lsls	r2, r3
10002676:	1c13      	adds	r3, r2, #0
10002678:	68fa      	ldr	r2, [r7, #12]
1000267a:	4313      	orrs	r3, r2
1000267c:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
1000267e:	687b      	ldr	r3, [r7, #4]
10002680:	21a8      	movs	r1, #168	; 0xa8
10002682:	68fa      	ldr	r2, [r7, #12]
10002684:	505a      	str	r2, [r3, r1]
  }
}
10002686:	46bd      	mov	sp, r7
10002688:	b006      	add	sp, #24
1000268a:	bd80      	pop	{r7, pc}
1000268c:	10005918 	.word	0x10005918

10002690 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
10002690:	b580      	push	{r7, lr}
10002692:	b082      	sub	sp, #8
10002694:	af00      	add	r7, sp, #0
10002696:	6078      	str	r0, [r7, #4]
10002698:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
1000269a:	683b      	ldr	r3, [r7, #0]
1000269c:	685a      	ldr	r2, [r3, #4]
1000269e:	687b      	ldr	r3, [r7, #4]
100026a0:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
100026a2:	683b      	ldr	r3, [r7, #0]
100026a4:	689a      	ldr	r2, [r3, #8]
100026a6:	687b      	ldr	r3, [r7, #4]
100026a8:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
100026aa:	683b      	ldr	r3, [r7, #0]
100026ac:	681a      	ldr	r2, [r3, #0]
100026ae:	687b      	ldr	r3, [r7, #4]
100026b0:	64da      	str	r2, [r3, #76]	; 0x4c
}
100026b2:	46bd      	mov	sp, r7
100026b4:	b002      	add	sp, #8
100026b6:	bd80      	pop	{r7, pc}

100026b8 <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
100026b8:	b580      	push	{r7, lr}
100026ba:	b088      	sub	sp, #32
100026bc:	af00      	add	r7, sp, #0
100026be:	6078      	str	r0, [r7, #4]
100026c0:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100026c2:	f3ef 8310 	mrs	r3, PRIMASK
100026c6:	617b      	str	r3, [r7, #20]
  return(result);
100026c8:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
100026ca:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100026cc:	b672      	cpsid	i
  __disable_irq ();
  return status;
100026ce:	693b      	ldr	r3, [r7, #16]
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
100026d0:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
100026d2:	4b0c      	ldr	r3, [pc, #48]	; (10002704 <__aeabi_uidiv+0x4c>)
100026d4:	2204      	movs	r2, #4
100026d6:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
100026d8:	4b0a      	ldr	r3, [pc, #40]	; (10002704 <__aeabi_uidiv+0x4c>)
100026da:	687a      	ldr	r2, [r7, #4]
100026dc:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
100026de:	4b09      	ldr	r3, [pc, #36]	; (10002704 <__aeabi_uidiv+0x4c>)
100026e0:	683a      	ldr	r2, [r7, #0]
100026e2:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
100026e4:	4b07      	ldr	r3, [pc, #28]	; (10002704 <__aeabi_uidiv+0x4c>)
100026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100026e8:	61bb      	str	r3, [r7, #24]
100026ea:	69fb      	ldr	r3, [r7, #28]
100026ec:	60fb      	str	r3, [r7, #12]
100026ee:	68fb      	ldr	r3, [r7, #12]
100026f0:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100026f2:	68bb      	ldr	r3, [r7, #8]
100026f4:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
100026f8:	69bb      	ldr	r3, [r7, #24]
}
100026fa:	1c18      	adds	r0, r3, #0
100026fc:	46bd      	mov	sp, r7
100026fe:	b008      	add	sp, #32
10002700:	bd80      	pop	{r7, pc}
10002702:	46c0      	nop			; (mov r8, r8)
10002704:	40030000 	.word	0x40030000

10002708 <XMC_POSIF_Stop>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_Start(),XMC_POSIF_IsRunning() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_Stop(XMC_POSIF_t *const peripheral)
{
10002708:	b580      	push	{r7, lr}
1000270a:	b082      	sub	sp, #8
1000270c:	af00      	add	r7, sp, #0
1000270e:	6078      	str	r0, [r7, #4]
  peripheral->PRUNC = (uint32_t)(POSIF_PRUNC_CRB_Msk | POSIF_PRUNC_CSM_Msk);
10002710:	687b      	ldr	r3, [r7, #4]
10002712:	2203      	movs	r2, #3
10002714:	60da      	str	r2, [r3, #12]
}
10002716:	46bd      	mov	sp, r7
10002718:	b002      	add	sp, #8
1000271a:	bd80      	pop	{r7, pc}

1000271c <XMC_POSIF_Enable>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to enable the POSIF module */
void XMC_POSIF_Enable(XMC_POSIF_t *const peripheral)
{
1000271c:	b580      	push	{r7, lr}
1000271e:	b082      	sub	sp, #8
10002720:	af00      	add	r7, sp, #0
10002722:	6078      	str	r0, [r7, #4]
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif

  if (peripheral == POSIF0)
10002724:	687b      	ldr	r3, [r7, #4]
10002726:	4a09      	ldr	r2, [pc, #36]	; (1000274c <XMC_POSIF_Enable+0x30>)
10002728:	4293      	cmp	r3, r2
1000272a:	d103      	bne.n	10002734 <XMC_POSIF_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_POSIF0);
1000272c:	2080      	movs	r0, #128	; 0x80
1000272e:	f7fe fed1 	bl	100014d4 <XMC_SCU_CLOCK_UngatePeripheralClock>
10002732:	e008      	b.n	10002746 <XMC_POSIF_Enable+0x2a>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_POSIF0);
#endif
  }
#if defined(POSIF1)
  else if (peripheral == POSIF1)
10002734:	687b      	ldr	r3, [r7, #4]
10002736:	4a06      	ldr	r2, [pc, #24]	; (10002750 <XMC_POSIF_Enable+0x34>)
10002738:	4293      	cmp	r3, r2
1000273a:	d104      	bne.n	10002746 <XMC_POSIF_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_POSIF1);
1000273c:	2380      	movs	r3, #128	; 0x80
1000273e:	035b      	lsls	r3, r3, #13
10002740:	1c18      	adds	r0, r3, #0
10002742:	f7fe fec7 	bl	100014d4 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_POSIF_Disable:Invalid module pointer", 0);
  }
}
10002746:	46bd      	mov	sp, r7
10002748:	b002      	add	sp, #8
1000274a:	bd80      	pop	{r7, pc}
1000274c:	50010000 	.word	0x50010000
10002750:	50014000 	.word	0x50014000

10002754 <XMC_POSIF_Init>:
  }
}

/* API to initialize POSIF global resources */
void XMC_POSIF_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_CONFIG_t *const config)
{
10002754:	b580      	push	{r7, lr}
10002756:	b082      	sub	sp, #8
10002758:	af00      	add	r7, sp, #0
1000275a:	6078      	str	r0, [r7, #4]
1000275c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_POSIF_Init:Invalid module pointer", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_Init:NULL Pointer", (config != (XMC_POSIF_CONFIG_t *)NULL) );

  /* Enable the POSIF module */
  XMC_POSIF_Enable(peripheral);
1000275e:	687b      	ldr	r3, [r7, #4]
10002760:	1c18      	adds	r0, r3, #0
10002762:	f7ff ffdb 	bl	1000271c <XMC_POSIF_Enable>

  /* Stop POSIF */
  XMC_POSIF_Stop(peripheral);
10002766:	687b      	ldr	r3, [r7, #4]
10002768:	1c18      	adds	r0, r3, #0
1000276a:	f7ff ffcd 	bl	10002708 <XMC_POSIF_Stop>

  /* Program the operational mode, input selectors and debounce filter */
  peripheral->PCONF = config->pconf;
1000276e:	683b      	ldr	r3, [r7, #0]
10002770:	681a      	ldr	r2, [r3, #0]
10002772:	687b      	ldr	r3, [r7, #4]
10002774:	601a      	str	r2, [r3, #0]
}
10002776:	46bd      	mov	sp, r7
10002778:	b002      	add	sp, #8
1000277a:	bd80      	pop	{r7, pc}

1000277c <XMC_POSIF_HSC_Init>:

/* API to initialize hall sensor interface */
XMC_POSIF_STATUS_t XMC_POSIF_HSC_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_HSC_CONFIG_t *const config)
{
1000277c:	b580      	push	{r7, lr}
1000277e:	b084      	sub	sp, #16
10002780:	af00      	add	r7, sp, #0
10002782:	6078      	str	r0, [r7, #4]
10002784:	6039      	str	r1, [r7, #0]
  XMC_POSIF_STATUS_t retval;

  XMC_ASSERT("XMC_POSIF_HSC_Init:Invalid module pointer\n", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_HSC_Init:NULL Pointer\n", (config != (XMC_POSIF_HSC_CONFIG_t *)NULL) );

  if (XMC_POSIF_MODE_HALL_SENSOR == (XMC_POSIF_MODE_t)((peripheral->PCONF) & (uint32_t)POSIF_PCONF_FSEL_Msk) )
10002786:	687b      	ldr	r3, [r7, #4]
10002788:	681b      	ldr	r3, [r3, #0]
1000278a:	b2db      	uxtb	r3, r3
1000278c:	1c1a      	adds	r2, r3, #0
1000278e:	2303      	movs	r3, #3
10002790:	4013      	ands	r3, r2
10002792:	d10b      	bne.n	100027ac <XMC_POSIF_HSC_Init+0x30>
  {
    peripheral->PCONF |= config->hall_config;
10002794:	687b      	ldr	r3, [r7, #4]
10002796:	681a      	ldr	r2, [r3, #0]
10002798:	683b      	ldr	r3, [r7, #0]
1000279a:	681b      	ldr	r3, [r3, #0]
1000279c:	431a      	orrs	r2, r3
1000279e:	687b      	ldr	r3, [r7, #4]
100027a0:	601a      	str	r2, [r3, #0]
    retval = XMC_POSIF_STATUS_OK;
100027a2:	230f      	movs	r3, #15
100027a4:	18fb      	adds	r3, r7, r3
100027a6:	2200      	movs	r2, #0
100027a8:	701a      	strb	r2, [r3, #0]
100027aa:	e003      	b.n	100027b4 <XMC_POSIF_HSC_Init+0x38>
  }
  else
  {
    retval = XMC_POSIF_STATUS_ERROR;
100027ac:	230f      	movs	r3, #15
100027ae:	18fb      	adds	r3, r7, r3
100027b0:	2201      	movs	r2, #1
100027b2:	701a      	strb	r2, [r3, #0]
  }
  return retval;
100027b4:	230f      	movs	r3, #15
100027b6:	18fb      	adds	r3, r7, r3
100027b8:	781b      	ldrb	r3, [r3, #0]
}
100027ba:	1c18      	adds	r0, r3, #0
100027bc:	46bd      	mov	sp, r7
100027be:	b004      	add	sp, #16
100027c0:	bd80      	pop	{r7, pc}
100027c2:	46c0      	nop			; (mov r8, r8)

100027c4 <XMC_POSIF_SetInterruptNode>:
  peripheral->PCONF = ((peripheral->PCONF & ~(uint32_t)XMC_POSIF_PCONF_INSEL_Msk) | reg);
}

/* API to select an interrupt node */
void XMC_POSIF_SetInterruptNode(XMC_POSIF_t *const peripheral, const XMC_POSIF_IRQ_EVENT_t event, const XMC_POSIF_SR_ID_t sr)
{
100027c4:	b580      	push	{r7, lr}
100027c6:	b084      	sub	sp, #16
100027c8:	af00      	add	r7, sp, #0
100027ca:	6078      	str	r0, [r7, #4]
100027cc:	1c08      	adds	r0, r1, #0
100027ce:	1c11      	adds	r1, r2, #0
100027d0:	1cfb      	adds	r3, r7, #3
100027d2:	1c02      	adds	r2, r0, #0
100027d4:	701a      	strb	r2, [r3, #0]
100027d6:	1cbb      	adds	r3, r7, #2
100027d8:	1c0a      	adds	r2, r1, #0
100027da:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_POSIF_SetInterruptNode:Invalid module pointer", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_SetInterruptNode:Wrong IRQ event", (event <= XMC_POSIF_IRQ_EVENT_PCLK) );
  XMC_ASSERT("XMC_POSIF_SetInterruptNode:Wrong SR ID", (sr <= XMC_POSIF_SR_ID_1) );

  reg = peripheral->PFLGE;
100027dc:	687b      	ldr	r3, [r7, #4]
100027de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100027e0:	60fb      	str	r3, [r7, #12]
  reg &= ~((uint32_t)1 << ((uint32_t)event + (uint32_t)POSIF_PFLGE_CHESEL_Pos));
100027e2:	1cfb      	adds	r3, r7, #3
100027e4:	781b      	ldrb	r3, [r3, #0]
100027e6:	3310      	adds	r3, #16
100027e8:	1c1a      	adds	r2, r3, #0
100027ea:	2301      	movs	r3, #1
100027ec:	4093      	lsls	r3, r2
100027ee:	43da      	mvns	r2, r3
100027f0:	68fb      	ldr	r3, [r7, #12]
100027f2:	4013      	ands	r3, r2
100027f4:	60fb      	str	r3, [r7, #12]
  reg |= (uint32_t)sr << ((uint32_t)event + (uint32_t)POSIF_PFLGE_CHESEL_Pos);
100027f6:	1cbb      	adds	r3, r7, #2
100027f8:	781b      	ldrb	r3, [r3, #0]
100027fa:	1cfa      	adds	r2, r7, #3
100027fc:	7812      	ldrb	r2, [r2, #0]
100027fe:	3210      	adds	r2, #16
10002800:	4093      	lsls	r3, r2
10002802:	68fa      	ldr	r2, [r7, #12]
10002804:	4313      	orrs	r3, r2
10002806:	60fb      	str	r3, [r7, #12]
  peripheral->PFLGE = reg;
10002808:	687b      	ldr	r3, [r7, #4]
1000280a:	68fa      	ldr	r2, [r7, #12]
1000280c:	675a      	str	r2, [r3, #116]	; 0x74
}
1000280e:	46bd      	mov	sp, r7
10002810:	b004      	add	sp, #16
10002812:	bd80      	pop	{r7, pc}

10002814 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
    const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
10002814:	b580      	push	{r7, lr}
10002816:	b084      	sub	sp, #16
10002818:	af00      	add	r7, sp, #0
1000281a:	6078      	str	r0, [r7, #4]
1000281c:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
1000281e:	1c3b      	adds	r3, r7, #0
10002820:	781b      	ldrb	r3, [r3, #0]
10002822:	075b      	lsls	r3, r3, #29
10002824:	0f5b      	lsrs	r3, r3, #29
10002826:	b2db      	uxtb	r3, r3
10002828:	1c1a      	adds	r2, r3, #0
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
1000282a:	1cbb      	adds	r3, r7, #2
1000282c:	881b      	ldrh	r3, [r3, #0]
1000282e:	059b      	lsls	r3, r3, #22
10002830:	0d9b      	lsrs	r3, r3, #22
10002832:	b29b      	uxth	r3, r3
10002834:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
10002836:	4313      	orrs	r3, r2
10002838:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
1000283a:	687a      	ldr	r2, [r7, #4]
1000283c:	23f8      	movs	r3, #248	; 0xf8
1000283e:	005b      	lsls	r3, r3, #1
10002840:	68f9      	ldr	r1, [r7, #12]
10002842:	50d1      	str	r1, [r2, r3]
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
10002844:	1cfb      	adds	r3, r7, #3
10002846:	781b      	ldrb	r3, [r3, #0]
10002848:	06db      	lsls	r3, r3, #27
1000284a:	0fdb      	lsrs	r3, r3, #31
1000284c:	b2db      	uxtb	r3, r3
1000284e:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
10002850:	1cfb      	adds	r3, r7, #3
10002852:	781b      	ldrb	r3, [r3, #0]
10002854:	071b      	lsls	r3, r3, #28
10002856:	0f9b      	lsrs	r3, r3, #30
10002858:	b2db      	uxtb	r3, r3
1000285a:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
1000285c:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
1000285e:	1cfb      	adds	r3, r7, #3
10002860:	781b      	ldrb	r3, [r3, #0]
10002862:	069b      	lsls	r3, r3, #26
10002864:	0fdb      	lsrs	r3, r3, #31
10002866:	b2db      	uxtb	r3, r3
10002868:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
1000286a:	4313      	orrs	r3, r2
1000286c:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
1000286e:	1cfb      	adds	r3, r7, #3
10002870:	781b      	ldrb	r3, [r3, #0]
10002872:	065b      	lsls	r3, r3, #25
10002874:	0fdb      	lsrs	r3, r3, #31
10002876:	b2db      	uxtb	r3, r3
10002878:	079b      	lsls	r3, r3, #30
1000287a:	68fa      	ldr	r2, [r7, #12]
1000287c:	4313      	orrs	r3, r2
1000287e:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
10002880:	687a      	ldr	r2, [r7, #4]
10002882:	23f8      	movs	r3, #248	; 0xf8
10002884:	005b      	lsls	r3, r3, #1
10002886:	58d2      	ldr	r2, [r2, r3]
10002888:	68fb      	ldr	r3, [r7, #12]
1000288a:	4313      	orrs	r3, r2
1000288c:	2280      	movs	r2, #128	; 0x80
1000288e:	0612      	lsls	r2, r2, #24
10002890:	431a      	orrs	r2, r3
10002892:	1c11      	adds	r1, r2, #0
10002894:	687a      	ldr	r2, [r7, #4]
10002896:	23f8      	movs	r3, #248	; 0xf8
10002898:	005b      	lsls	r3, r3, #1
1000289a:	50d1      	str	r1, [r2, r3]
}
1000289c:	46bd      	mov	sp, r7
1000289e:	b004      	add	sp, #16
100028a0:	bd80      	pop	{r7, pc}
100028a2:	46c0      	nop			; (mov r8, r8)

100028a4 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
100028a4:	b580      	push	{r7, lr}
100028a6:	b082      	sub	sp, #8
100028a8:	af00      	add	r7, sp, #0
100028aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
100028ac:	687b      	ldr	r3, [r7, #4]
100028ae:	2284      	movs	r2, #132	; 0x84
100028b0:	589b      	ldr	r3, [r3, r2]
100028b2:	2280      	movs	r2, #128	; 0x80
100028b4:	04d2      	lsls	r2, r2, #19
100028b6:	431a      	orrs	r2, r3
100028b8:	687b      	ldr	r3, [r7, #4]
100028ba:	2184      	movs	r1, #132	; 0x84
100028bc:	505a      	str	r2, [r3, r1]
}
100028be:	46bd      	mov	sp, r7
100028c0:	b002      	add	sp, #8
100028c2:	bd80      	pop	{r7, pc}

100028c4 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
100028c4:	b580      	push	{r7, lr}
100028c6:	b082      	sub	sp, #8
100028c8:	af00      	add	r7, sp, #0
100028ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
100028cc:	687b      	ldr	r3, [r7, #4]
100028ce:	2284      	movs	r2, #132	; 0x84
100028d0:	589b      	ldr	r3, [r3, r2]
100028d2:	4a04      	ldr	r2, [pc, #16]	; (100028e4 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot+0x20>)
100028d4:	401a      	ands	r2, r3
100028d6:	687b      	ldr	r3, [r7, #4]
100028d8:	2184      	movs	r1, #132	; 0x84
100028da:	505a      	str	r2, [r3, r1]
}
100028dc:	46bd      	mov	sp, r7
100028de:	b002      	add	sp, #8
100028e0:	bd80      	pop	{r7, pc}
100028e2:	46c0      	nop			; (mov r8, r8)
100028e4:	fbffffff 	.word	0xfbffffff

100028e8 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
100028e8:	b580      	push	{r7, lr}
100028ea:	af00      	add	r7, sp, #0
   * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additonal bit to enable ADC
   * function
   */

#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
100028ec:	4b03      	ldr	r3, [pc, #12]	; (100028fc <XMC_VADC_GLOBAL_EnableModule+0x14>)
100028ee:	22ff      	movs	r2, #255	; 0xff
100028f0:	601a      	str	r2, [r3, #0]
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
100028f2:	2001      	movs	r0, #1
100028f4:	f7fe fdee 	bl	100014d4 <XMC_SCU_CLOCK_UngatePeripheralClock>

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
#endif
}
100028f8:	46bd      	mov	sp, r7
100028fa:	bd80      	pop	{r7, pc}
100028fc:	40010500 	.word	0x40010500

10002900 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
10002900:	b580      	push	{r7, lr}
10002902:	b082      	sub	sp, #8
10002904:	af00      	add	r7, sp, #0
10002906:	6078      	str	r0, [r7, #4]
10002908:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

#if (UC_SERIES == XMC14)
  XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
1000290a:	2000      	movs	r0, #0
1000290c:	f7fe fdc8 	bl	100014a0 <XMC_SCU_CLOCK_SetAdcClockSrc>
#endif

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
10002910:	f7ff ffea 	bl	100028e8 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
10002914:	683b      	ldr	r3, [r7, #0]
10002916:	695a      	ldr	r2, [r3, #20]
10002918:	687b      	ldr	r3, [r7, #4]
1000291a:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
1000291c:	683b      	ldr	r3, [r7, #0]
1000291e:	685b      	ldr	r3, [r3, #4]
10002920:	2280      	movs	r2, #128	; 0x80
10002922:	0212      	lsls	r2, r2, #8
10002924:	431a      	orrs	r2, r3
10002926:	687b      	ldr	r3, [r7, #4]
10002928:	2180      	movs	r1, #128	; 0x80
1000292a:	505a      	str	r2, [r3, r1]
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
1000292c:	683b      	ldr	r3, [r7, #0]
1000292e:	689a      	ldr	r2, [r3, #8]
10002930:	687b      	ldr	r3, [r7, #4]
10002932:	21a0      	movs	r1, #160	; 0xa0
10002934:	505a      	str	r2, [r3, r1]

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
10002936:	683b      	ldr	r3, [r7, #0]
10002938:	68da      	ldr	r2, [r3, #12]
1000293a:	687b      	ldr	r3, [r7, #4]
1000293c:	21a4      	movs	r1, #164	; 0xa4
1000293e:	505a      	str	r2, [r3, r1]


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
10002940:	683b      	ldr	r3, [r7, #0]
10002942:	6919      	ldr	r1, [r3, #16]
10002944:	687a      	ldr	r2, [r7, #4]
10002946:	23a0      	movs	r3, #160	; 0xa0
10002948:	009b      	lsls	r3, r3, #2
1000294a:	50d1      	str	r1, [r2, r3]

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
1000294c:	683b      	ldr	r3, [r7, #0]
1000294e:	681a      	ldr	r2, [r3, #0]
10002950:	687b      	ldr	r3, [r7, #4]
10002952:	21b8      	movs	r1, #184	; 0xb8
10002954:	505a      	str	r2, [r3, r1]

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
10002956:	46bd      	mov	sp, r7
10002958:	b002      	add	sp, #8
1000295a:	bd80      	pop	{r7, pc}

1000295c <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
1000295c:	b580      	push	{r7, lr}
1000295e:	b084      	sub	sp, #16
10002960:	af00      	add	r7, sp, #0
10002962:	60f8      	str	r0, [r7, #12]
10002964:	60b9      	str	r1, [r7, #8]
10002966:	603b      	str	r3, [r7, #0]
10002968:	1dfb      	adds	r3, r7, #7
1000296a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
1000296c:	1dfb      	adds	r3, r7, #7
1000296e:	781b      	ldrb	r3, [r3, #0]
10002970:	2b00      	cmp	r3, #0
10002972:	d109      	bne.n	10002988 <XMC_VADC_GLOBAL_InputClassInit+0x2c>
  {
#endif
    XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
10002974:	68bb      	ldr	r3, [r7, #8]
10002976:	4a0a      	ldr	r2, [pc, #40]	; (100029a0 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
10002978:	4013      	ands	r3, r2
1000297a:	1c19      	adds	r1, r3, #0
1000297c:	68fb      	ldr	r3, [r7, #12]
1000297e:	683a      	ldr	r2, [r7, #0]
10002980:	3228      	adds	r2, #40	; 0x28
10002982:	0092      	lsls	r2, r2, #2
10002984:	50d1      	str	r1, [r2, r3]
10002986:	e008      	b.n	1000299a <XMC_VADC_GLOBAL_InputClassInit+0x3e>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
10002988:	68bb      	ldr	r3, [r7, #8]
1000298a:	4a06      	ldr	r2, [pc, #24]	; (100029a4 <XMC_VADC_GLOBAL_InputClassInit+0x48>)
1000298c:	4013      	ands	r3, r2
1000298e:	1c19      	adds	r1, r3, #0
10002990:	68fb      	ldr	r3, [r7, #12]
10002992:	683a      	ldr	r2, [r7, #0]
10002994:	3228      	adds	r2, #40	; 0x28
10002996:	0092      	lsls	r2, r2, #2
10002998:	50d1      	str	r1, [r2, r3]
  }
#endif
}
1000299a:	46bd      	mov	sp, r7
1000299c:	b004      	add	sp, #16
1000299e:	bd80      	pop	{r7, pc}
100029a0:	0000071f 	.word	0x0000071f
100029a4:	071f0000 	.word	0x071f0000

100029a8 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
100029a8:	b580      	push	{r7, lr}
100029aa:	b084      	sub	sp, #16
100029ac:	af00      	add	r7, sp, #0
100029ae:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
100029b0:	687b      	ldr	r3, [r7, #4]
100029b2:	2280      	movs	r2, #128	; 0x80
100029b4:	589b      	ldr	r3, [r3, r2]
100029b6:	2280      	movs	r2, #128	; 0x80
100029b8:	0612      	lsls	r2, r2, #24
100029ba:	431a      	orrs	r2, r3
100029bc:	687b      	ldr	r3, [r7, #4]
100029be:	2180      	movs	r1, #128	; 0x80
100029c0:	505a      	str	r2, [r3, r1]

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
100029c2:	230f      	movs	r3, #15
100029c4:	18fb      	adds	r3, r7, r3
100029c6:	2200      	movs	r2, #0
100029c8:	701a      	strb	r2, [r3, #0]
100029ca:	e026      	b.n	10002a1a <XMC_VADC_GLOBAL_StartupCalibration+0x72>
  {
    group_ptr = g_xmc_vadc_group_array[i];
100029cc:	230f      	movs	r3, #15
100029ce:	18fb      	adds	r3, r7, r3
100029d0:	781a      	ldrb	r2, [r3, #0]
100029d2:	4b16      	ldr	r3, [pc, #88]	; (10002a2c <XMC_VADC_GLOBAL_StartupCalibration+0x84>)
100029d4:	0092      	lsls	r2, r2, #2
100029d6:	58d3      	ldr	r3, [r2, r3]
100029d8:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
100029da:	68bb      	ldr	r3, [r7, #8]
100029dc:	2280      	movs	r2, #128	; 0x80
100029de:	589a      	ldr	r2, [r3, r2]
100029e0:	23c0      	movs	r3, #192	; 0xc0
100029e2:	029b      	lsls	r3, r3, #10
100029e4:	4013      	ands	r3, r2
100029e6:	d011      	beq.n	10002a0c <XMC_VADC_GLOBAL_StartupCalibration+0x64>
    {
      /* This group is active. Loop until it finishes calibration */
#if UC_FAMILY == XMC1
      // wait until calibration is started
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
100029e8:	e000      	b.n	100029ec <XMC_VADC_GLOBAL_StartupCalibration+0x44>
      {
        __NOP();
100029ea:	46c0      	nop			; (mov r8, r8)
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
    {
      /* This group is active. Loop until it finishes calibration */
#if UC_FAMILY == XMC1
      // wait until calibration is started
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
100029ec:	68bb      	ldr	r3, [r7, #8]
100029ee:	2280      	movs	r2, #128	; 0x80
100029f0:	589a      	ldr	r2, [r3, r2]
100029f2:	2380      	movs	r3, #128	; 0x80
100029f4:	059b      	lsls	r3, r3, #22
100029f6:	4013      	ands	r3, r2
100029f8:	d0f7      	beq.n	100029ea <XMC_VADC_GLOBAL_StartupCalibration+0x42>
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
100029fa:	e000      	b.n	100029fe <XMC_VADC_GLOBAL_StartupCalibration+0x56>
      {
        __NOP();
100029fc:	46c0      	nop			; (mov r8, r8)
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
100029fe:	68bb      	ldr	r3, [r7, #8]
10002a00:	2280      	movs	r2, #128	; 0x80
10002a02:	589a      	ldr	r2, [r3, r2]
10002a04:	2380      	movs	r3, #128	; 0x80
10002a06:	055b      	lsls	r3, r3, #21
10002a08:	4013      	ands	r3, r2
10002a0a:	d1f7      	bne.n	100029fc <XMC_VADC_GLOBAL_StartupCalibration+0x54>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10002a0c:	230f      	movs	r3, #15
10002a0e:	18fb      	adds	r3, r7, r3
10002a10:	781a      	ldrb	r2, [r3, #0]
10002a12:	230f      	movs	r3, #15
10002a14:	18fb      	adds	r3, r7, r3
10002a16:	3201      	adds	r2, #1
10002a18:	701a      	strb	r2, [r3, #0]
10002a1a:	230f      	movs	r3, #15
10002a1c:	18fb      	adds	r3, r7, r3
10002a1e:	781b      	ldrb	r3, [r3, #0]
10002a20:	2b01      	cmp	r3, #1
10002a22:	d9d3      	bls.n	100029cc <XMC_VADC_GLOBAL_StartupCalibration+0x24>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
10002a24:	46bd      	mov	sp, r7
10002a26:	b004      	add	sp, #16
10002a28:	bd80      	pop	{r7, pc}
10002a2a:	46c0      	nop			; (mov r8, r8)
10002a2c:	10005948 	.word	0x10005948

10002a30 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
10002a30:	b580      	push	{r7, lr}
10002a32:	b084      	sub	sp, #16
10002a34:	af00      	add	r7, sp, #0
10002a36:	6078      	str	r0, [r7, #4]
10002a38:	1c0a      	adds	r2, r1, #0
10002a3a:	1cfb      	adds	r3, r7, #3
10002a3c:	701a      	strb	r2, [r3, #0]
  uint32_t node;

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
10002a3e:	1cfb      	adds	r3, r7, #3
10002a40:	781b      	ldrb	r3, [r3, #0]
10002a42:	2b03      	cmp	r3, #3
10002a44:	d904      	bls.n	10002a50 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x20>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
10002a46:	1cfb      	adds	r3, r7, #3
10002a48:	781b      	ldrb	r3, [r3, #0]
10002a4a:	3b04      	subs	r3, #4
10002a4c:	60fb      	str	r3, [r7, #12]
10002a4e:	e002      	b.n	10002a56 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x26>
  }
  else
  {
    node = (uint32_t)sr;
10002a50:	1cfb      	adds	r3, r7, #3
10002a52:	781b      	ldrb	r3, [r3, #0]
10002a54:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
10002a56:	687a      	ldr	r2, [r7, #4]
10002a58:	23a0      	movs	r3, #160	; 0xa0
10002a5a:	005b      	lsls	r3, r3, #1
10002a5c:	58d3      	ldr	r3, [r2, r3]
10002a5e:	220f      	movs	r2, #15
10002a60:	4393      	bics	r3, r2
10002a62:	1c19      	adds	r1, r3, #0
10002a64:	687a      	ldr	r2, [r7, #4]
10002a66:	23a0      	movs	r3, #160	; 0xa0
10002a68:	005b      	lsls	r3, r3, #1
10002a6a:	50d1      	str	r1, [r2, r3]
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
10002a6c:	687a      	ldr	r2, [r7, #4]
10002a6e:	23a0      	movs	r3, #160	; 0xa0
10002a70:	005b      	lsls	r3, r3, #1
10002a72:	58d2      	ldr	r2, [r2, r3]
10002a74:	68fb      	ldr	r3, [r7, #12]
10002a76:	431a      	orrs	r2, r3
10002a78:	1c11      	adds	r1, r2, #0
10002a7a:	687a      	ldr	r2, [r7, #4]
10002a7c:	23a0      	movs	r3, #160	; 0xa0
10002a7e:	005b      	lsls	r3, r3, #1
10002a80:	50d1      	str	r1, [r2, r3]
}
10002a82:	46bd      	mov	sp, r7
10002a84:	b004      	add	sp, #16
10002a86:	bd80      	pop	{r7, pc}

10002a88 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
10002a88:	b580      	push	{r7, lr}
10002a8a:	b082      	sub	sp, #8
10002a8c:	af00      	add	r7, sp, #0
10002a8e:	6078      	str	r0, [r7, #4]
10002a90:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
10002a92:	687a      	ldr	r2, [r7, #4]
10002a94:	683b      	ldr	r3, [r7, #0]
10002a96:	685b      	ldr	r3, [r3, #4]
10002a98:	1c10      	adds	r0, r2, #0
10002a9a:	1c19      	adds	r1, r3, #0
10002a9c:	2200      	movs	r2, #0
10002a9e:	2300      	movs	r3, #0
10002aa0:	f000 f830 	bl	10002b04 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
10002aa4:	687a      	ldr	r2, [r7, #4]
10002aa6:	683b      	ldr	r3, [r7, #0]
10002aa8:	685b      	ldr	r3, [r3, #4]
10002aaa:	1c10      	adds	r0, r2, #0
10002aac:	1c19      	adds	r1, r3, #0
10002aae:	2201      	movs	r2, #1
10002ab0:	2300      	movs	r3, #0
10002ab2:	f000 f827 	bl	10002b04 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
10002ab6:	687a      	ldr	r2, [r7, #4]
10002ab8:	683b      	ldr	r3, [r7, #0]
10002aba:	689b      	ldr	r3, [r3, #8]
10002abc:	1c10      	adds	r0, r2, #0
10002abe:	1c19      	adds	r1, r3, #0
10002ac0:	2200      	movs	r2, #0
10002ac2:	2301      	movs	r3, #1
10002ac4:	f000 f81e 	bl	10002b04 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
10002ac8:	687a      	ldr	r2, [r7, #4]
10002aca:	683b      	ldr	r3, [r7, #0]
10002acc:	689b      	ldr	r3, [r3, #8]
10002ace:	1c10      	adds	r0, r2, #0
10002ad0:	1c19      	adds	r1, r3, #0
10002ad2:	2201      	movs	r2, #1
10002ad4:	2301      	movs	r3, #1
10002ad6:	f000 f815 	bl	10002b04 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
10002ada:	683b      	ldr	r3, [r7, #0]
10002adc:	691a      	ldr	r2, [r3, #16]
10002ade:	687b      	ldr	r3, [r7, #4]
10002ae0:	2180      	movs	r1, #128	; 0x80
10002ae2:	505a      	str	r2, [r3, r1]

  group_ptr->BOUND = config->g_bound;
10002ae4:	683b      	ldr	r3, [r7, #0]
10002ae6:	68da      	ldr	r2, [r3, #12]
10002ae8:	687b      	ldr	r3, [r7, #4]
10002aea:	21b8      	movs	r1, #184	; 0xb8
10002aec:	505a      	str	r2, [r3, r1]

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr, config->emux_config);
10002aee:	687a      	ldr	r2, [r7, #4]
10002af0:	683b      	ldr	r3, [r7, #0]
10002af2:	681b      	ldr	r3, [r3, #0]
10002af4:	1c10      	adds	r0, r2, #0
10002af6:	1c19      	adds	r1, r3, #0
10002af8:	f7ff fe8c 	bl	10002814 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
10002afc:	46bd      	mov	sp, r7
10002afe:	b002      	add	sp, #8
10002b00:	bd80      	pop	{r7, pc}
10002b02:	46c0      	nop			; (mov r8, r8)

10002b04 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                   const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
10002b04:	b580      	push	{r7, lr}
10002b06:	b08c      	sub	sp, #48	; 0x30
10002b08:	af00      	add	r7, sp, #0
10002b0a:	60f8      	str	r0, [r7, #12]
10002b0c:	60b9      	str	r1, [r7, #8]
10002b0e:	603b      	str	r3, [r7, #0]
10002b10:	1dfb      	adds	r3, r7, #7
10002b12:	701a      	strb	r2, [r3, #0]

  /*
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
10002b14:	1dfb      	adds	r3, r7, #7
10002b16:	781b      	ldrb	r3, [r3, #0]
10002b18:	2b00      	cmp	r3, #0
10002b1a:	d119      	bne.n	10002b50 <XMC_VADC_GROUP_InputClassInit+0x4c>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
10002b1c:	2308      	movs	r3, #8
10002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
10002b20:	23e0      	movs	r3, #224	; 0xe0
10002b22:	00db      	lsls	r3, r3, #3
10002b24:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
10002b26:	2300      	movs	r3, #0
10002b28:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
10002b2a:	231f      	movs	r3, #31
10002b2c:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
10002b2e:	2308      	movs	r3, #8
10002b30:	18fb      	adds	r3, r7, r3
10002b32:	781b      	ldrb	r3, [r3, #0]
10002b34:	06db      	lsls	r3, r3, #27
10002b36:	0edb      	lsrs	r3, r3, #27
10002b38:	b2db      	uxtb	r3, r3
10002b3a:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
10002b3c:	2309      	movs	r3, #9
10002b3e:	18fb      	adds	r3, r7, r3
10002b40:	781b      	ldrb	r3, [r3, #0]
10002b42:	075b      	lsls	r3, r3, #29
10002b44:	0f5b      	lsrs	r3, r3, #29
10002b46:	b2da      	uxtb	r2, r3
10002b48:	231b      	movs	r3, #27
10002b4a:	18fb      	adds	r3, r7, r3
10002b4c:	701a      	strb	r2, [r3, #0]
10002b4e:	e019      	b.n	10002b84 <XMC_VADC_GROUP_InputClassInit+0x80>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
10002b50:	2318      	movs	r3, #24
10002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
10002b54:	23e0      	movs	r3, #224	; 0xe0
10002b56:	04db      	lsls	r3, r3, #19
10002b58:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
10002b5a:	2310      	movs	r3, #16
10002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
10002b5e:	23f8      	movs	r3, #248	; 0xf8
10002b60:	035b      	lsls	r3, r3, #13
10002b62:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
10002b64:	230a      	movs	r3, #10
10002b66:	18fb      	adds	r3, r7, r3
10002b68:	781b      	ldrb	r3, [r3, #0]
10002b6a:	06db      	lsls	r3, r3, #27
10002b6c:	0edb      	lsrs	r3, r3, #27
10002b6e:	b2db      	uxtb	r3, r3
10002b70:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
10002b72:	230b      	movs	r3, #11
10002b74:	18fb      	adds	r3, r7, r3
10002b76:	781b      	ldrb	r3, [r3, #0]
10002b78:	075b      	lsls	r3, r3, #29
10002b7a:	0f5b      	lsrs	r3, r3, #29
10002b7c:	b2da      	uxtb	r2, r3
10002b7e:	231b      	movs	r3, #27
10002b80:	18fb      	adds	r3, r7, r3
10002b82:	701a      	strb	r2, [r3, #0]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
10002b84:	68fb      	ldr	r3, [r7, #12]
10002b86:	683a      	ldr	r2, [r7, #0]
10002b88:	3228      	adds	r2, #40	; 0x28
10002b8a:	0092      	lsls	r2, r2, #2
10002b8c:	58d3      	ldr	r3, [r2, r3]
10002b8e:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
10002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002b92:	43da      	mvns	r2, r3
10002b94:	697b      	ldr	r3, [r7, #20]
10002b96:	4013      	ands	r3, r2
10002b98:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
10002b9a:	231b      	movs	r3, #27
10002b9c:	18fb      	adds	r3, r7, r3
10002b9e:	781a      	ldrb	r2, [r3, #0]
10002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002ba2:	409a      	lsls	r2, r3
10002ba4:	1c13      	adds	r3, r2, #0
10002ba6:	697a      	ldr	r2, [r7, #20]
10002ba8:	4313      	orrs	r3, r2
10002baa:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
10002bac:	6a3b      	ldr	r3, [r7, #32]
10002bae:	43da      	mvns	r2, r3
10002bb0:	697b      	ldr	r3, [r7, #20]
10002bb2:	4013      	ands	r3, r2
10002bb4:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
10002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002bb8:	69fa      	ldr	r2, [r7, #28]
10002bba:	409a      	lsls	r2, r3
10002bbc:	1c13      	adds	r3, r2, #0
10002bbe:	697a      	ldr	r2, [r7, #20]
10002bc0:	4313      	orrs	r3, r2
10002bc2:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
10002bc4:	68fb      	ldr	r3, [r7, #12]
10002bc6:	683a      	ldr	r2, [r7, #0]
10002bc8:	3228      	adds	r2, #40	; 0x28
10002bca:	0092      	lsls	r2, r2, #2
10002bcc:	6979      	ldr	r1, [r7, #20]
10002bce:	50d1      	str	r1, [r2, r3]
}
10002bd0:	46bd      	mov	sp, r7
10002bd2:	b00c      	add	sp, #48	; 0x30
10002bd4:	bd80      	pop	{r7, pc}
10002bd6:	46c0      	nop			; (mov r8, r8)

10002bd8 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
10002bd8:	b580      	push	{r7, lr}
10002bda:	b084      	sub	sp, #16
10002bdc:	af00      	add	r7, sp, #0
10002bde:	6078      	str	r0, [r7, #4]
10002be0:	1c0a      	adds	r2, r1, #0
10002be2:	1cfb      	adds	r3, r7, #3
10002be4:	701a      	strb	r2, [r3, #0]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
10002be6:	687b      	ldr	r3, [r7, #4]
10002be8:	2280      	movs	r2, #128	; 0x80
10002bea:	589b      	ldr	r3, [r3, r2]
10002bec:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
10002bee:	68fb      	ldr	r3, [r7, #12]
10002bf0:	2203      	movs	r2, #3
10002bf2:	4393      	bics	r3, r2
10002bf4:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
10002bf6:	1cfb      	adds	r3, r7, #3
10002bf8:	781b      	ldrb	r3, [r3, #0]
10002bfa:	68fa      	ldr	r2, [r7, #12]
10002bfc:	4313      	orrs	r3, r2
10002bfe:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
10002c00:	687b      	ldr	r3, [r7, #4]
10002c02:	2180      	movs	r1, #128	; 0x80
10002c04:	68fa      	ldr	r2, [r7, #12]
10002c06:	505a      	str	r2, [r3, r1]
}
10002c08:	46bd      	mov	sp, r7
10002c0a:	b004      	add	sp, #16
10002c0c:	bd80      	pop	{r7, pc}
10002c0e:	46c0      	nop			; (mov r8, r8)

10002c10 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode>:
}

#if(XMC_VADC_SHS_FULL_SET_REG == 1U)
/* API to enable the accelerated mode of conversion */
void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP_INDEX_t group_num)
{
10002c10:	b580      	push	{r7, lr}
10002c12:	b082      	sub	sp, #8
10002c14:	af00      	add	r7, sp, #0
10002c16:	6078      	str	r0, [r7, #4]
10002c18:	1c0a      	adds	r2, r1, #0
10002c1a:	1cfb      	adds	r3, r7, #3
10002c1c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number", (group_num <= XMC_VADC_GROUP_INDEX_1))

  /* Set the converted to Accelerated mode from compatible mode*/
  if (group_num == XMC_VADC_GROUP_INDEX_0 )
10002c1e:	1cfb      	adds	r3, r7, #3
10002c20:	781b      	ldrb	r3, [r3, #0]
10002c22:	2b00      	cmp	r3, #0
10002c24:	d108      	bne.n	10002c38 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x28>
  {
    shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
10002c26:	687b      	ldr	r3, [r7, #4]
10002c28:	2280      	movs	r2, #128	; 0x80
10002c2a:	589b      	ldr	r3, [r3, r2]
10002c2c:	2201      	movs	r2, #1
10002c2e:	431a      	orrs	r2, r3
10002c30:	687b      	ldr	r3, [r7, #4]
10002c32:	2180      	movs	r1, #128	; 0x80
10002c34:	505a      	str	r2, [r3, r1]
10002c36:	e00b      	b.n	10002c50 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x40>
  }
  else if (group_num == XMC_VADC_GROUP_INDEX_1 )
10002c38:	1cfb      	adds	r3, r7, #3
10002c3a:	781b      	ldrb	r3, [r3, #0]
10002c3c:	2b01      	cmp	r3, #1
10002c3e:	d107      	bne.n	10002c50 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x40>
  {
    shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
10002c40:	687b      	ldr	r3, [r7, #4]
10002c42:	2284      	movs	r2, #132	; 0x84
10002c44:	589b      	ldr	r3, [r3, r2]
10002c46:	2201      	movs	r2, #1
10002c48:	431a      	orrs	r2, r3
10002c4a:	687b      	ldr	r3, [r7, #4]
10002c4c:	2184      	movs	r1, #132	; 0x84
10002c4e:	505a      	str	r2, [r3, r1]
  }
  else
  {
    /* for MISRA*/
  }
}
10002c50:	46bd      	mov	sp, r7
10002c52:	b002      	add	sp, #8
10002c54:	bd80      	pop	{r7, pc}
10002c56:	46c0      	nop			; (mov r8, r8)

10002c58 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
10002c58:	b580      	push	{r7, lr}
10002c5a:	b086      	sub	sp, #24
10002c5c:	af00      	add	r7, sp, #0
10002c5e:	6078      	str	r0, [r7, #4]
10002c60:	6039      	str	r1, [r7, #0]
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10002c62:	2317      	movs	r3, #23
10002c64:	18fb      	adds	r3, r7, r3
10002c66:	2200      	movs	r2, #0
10002c68:	701a      	strb	r2, [r3, #0]
10002c6a:	e00f      	b.n	10002c8c <XMC_VADC_GLOBAL_BackgroundInit+0x34>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
10002c6c:	2317      	movs	r3, #23
10002c6e:	18fb      	adds	r3, r7, r3
10002c70:	781a      	ldrb	r2, [r3, #0]
10002c72:	4b4a      	ldr	r3, [pc, #296]	; (10002d9c <XMC_VADC_GLOBAL_BackgroundInit+0x144>)
10002c74:	0092      	lsls	r2, r2, #2
10002c76:	58d3      	ldr	r3, [r2, r3]
10002c78:	1c18      	adds	r0, r3, #0
10002c7a:	f7ff fe23 	bl	100028c4 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10002c7e:	2317      	movs	r3, #23
10002c80:	18fb      	adds	r3, r7, r3
10002c82:	781a      	ldrb	r2, [r3, #0]
10002c84:	2317      	movs	r3, #23
10002c86:	18fb      	adds	r3, r7, r3
10002c88:	3201      	adds	r2, #1
10002c8a:	701a      	strb	r2, [r3, #0]
10002c8c:	2317      	movs	r3, #23
10002c8e:	18fb      	adds	r3, r7, r3
10002c90:	781b      	ldrb	r3, [r3, #0]
10002c92:	2b01      	cmp	r3, #1
10002c94:	d9ea      	bls.n	10002c6c <XMC_VADC_GLOBAL_BackgroundInit+0x14>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }

  conv_start_mask = (uint32_t) 0;
10002c96:	2300      	movs	r3, #0
10002c98:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
10002c9a:	683b      	ldr	r3, [r7, #0]
10002c9c:	781b      	ldrb	r3, [r3, #0]
10002c9e:	2203      	movs	r2, #3
10002ca0:	4013      	ands	r3, r2
10002ca2:	b2db      	uxtb	r3, r3
10002ca4:	2b00      	cmp	r3, #0
10002ca6:	d002      	beq.n	10002cae <XMC_VADC_GLOBAL_BackgroundInit+0x56>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
10002ca8:	2380      	movs	r3, #128	; 0x80
10002caa:	011b      	lsls	r3, r3, #4
10002cac:	613b      	str	r3, [r7, #16]
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10002cae:	2317      	movs	r3, #23
10002cb0:	18fb      	adds	r3, r7, r3
10002cb2:	2200      	movs	r2, #0
10002cb4:	701a      	strb	r2, [r3, #0]
10002cb6:	e029      	b.n	10002d0c <XMC_VADC_GLOBAL_BackgroundInit+0xb4>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
10002cb8:	2317      	movs	r3, #23
10002cba:	18fb      	adds	r3, r7, r3
10002cbc:	781a      	ldrb	r2, [r3, #0]
10002cbe:	4b37      	ldr	r3, [pc, #220]	; (10002d9c <XMC_VADC_GLOBAL_BackgroundInit+0x144>)
10002cc0:	0092      	lsls	r2, r2, #2
10002cc2:	58d3      	ldr	r3, [r2, r3]
10002cc4:	2284      	movs	r2, #132	; 0x84
10002cc6:	589b      	ldr	r3, [r3, r2]
10002cc8:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
10002cca:	68fb      	ldr	r3, [r7, #12]
10002ccc:	4a34      	ldr	r2, [pc, #208]	; (10002da0 <XMC_VADC_GLOBAL_BackgroundInit+0x148>)
10002cce:	4013      	ands	r3, r2
10002cd0:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
10002cd2:	683b      	ldr	r3, [r7, #0]
10002cd4:	781b      	ldrb	r3, [r3, #0]
10002cd6:	071b      	lsls	r3, r3, #28
10002cd8:	0f9b      	lsrs	r3, r3, #30
10002cda:	b2db      	uxtb	r3, r3
10002cdc:	021b      	lsls	r3, r3, #8
10002cde:	68fa      	ldr	r2, [r7, #12]
10002ce0:	4313      	orrs	r3, r2
10002ce2:	60fb      	str	r3, [r7, #12]

    /* Program the start mode */
    reg |= conv_start_mask;
10002ce4:	68fa      	ldr	r2, [r7, #12]
10002ce6:	693b      	ldr	r3, [r7, #16]
10002ce8:	4313      	orrs	r3, r2
10002cea:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
10002cec:	2317      	movs	r3, #23
10002cee:	18fb      	adds	r3, r7, r3
10002cf0:	781a      	ldrb	r2, [r3, #0]
10002cf2:	4b2a      	ldr	r3, [pc, #168]	; (10002d9c <XMC_VADC_GLOBAL_BackgroundInit+0x144>)
10002cf4:	0092      	lsls	r2, r2, #2
10002cf6:	58d3      	ldr	r3, [r2, r3]
10002cf8:	2184      	movs	r1, #132	; 0x84
10002cfa:	68fa      	ldr	r2, [r7, #12]
10002cfc:	505a      	str	r2, [r3, r1]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10002cfe:	2317      	movs	r3, #23
10002d00:	18fb      	adds	r3, r7, r3
10002d02:	781a      	ldrb	r2, [r3, #0]
10002d04:	2317      	movs	r3, #23
10002d06:	18fb      	adds	r3, r7, r3
10002d08:	3201      	adds	r2, #1
10002d0a:	701a      	strb	r2, [r3, #0]
10002d0c:	2317      	movs	r3, #23
10002d0e:	18fb      	adds	r3, r7, r3
10002d10:	781b      	ldrb	r3, [r3, #0]
10002d12:	2b01      	cmp	r3, #1
10002d14:	d9d0      	bls.n	10002cb8 <XMC_VADC_GLOBAL_BackgroundInit+0x60>

  }
#endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
10002d16:	683b      	ldr	r3, [r7, #0]
10002d18:	685b      	ldr	r3, [r3, #4]
10002d1a:	4a22      	ldr	r2, [pc, #136]	; (10002da4 <XMC_VADC_GLOBAL_BackgroundInit+0x14c>)
10002d1c:	431a      	orrs	r2, r3
10002d1e:	1c11      	adds	r1, r2, #0
10002d20:	687a      	ldr	r2, [r7, #4]
10002d22:	2380      	movs	r3, #128	; 0x80
10002d24:	009b      	lsls	r3, r3, #2
10002d26:	50d1      	str	r1, [r2, r3]

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
10002d28:	683b      	ldr	r3, [r7, #0]
10002d2a:	689b      	ldr	r3, [r3, #8]
10002d2c:	2201      	movs	r2, #1
10002d2e:	431a      	orrs	r2, r3
10002d30:	1c11      	adds	r1, r2, #0
10002d32:	687a      	ldr	r2, [r7, #4]
10002d34:	2381      	movs	r3, #129	; 0x81
10002d36:	009b      	lsls	r3, r3, #2
10002d38:	50d1      	str	r1, [r2, r3]

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
10002d3a:	683b      	ldr	r3, [r7, #0]
10002d3c:	781b      	ldrb	r3, [r3, #0]
10002d3e:	2203      	movs	r2, #3
10002d40:	4013      	ands	r3, r2
10002d42:	b2db      	uxtb	r3, r3
10002d44:	2b02      	cmp	r3, #2
10002d46:	d10b      	bne.n	10002d60 <XMC_VADC_GLOBAL_BackgroundInit+0x108>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
10002d48:	687a      	ldr	r2, [r7, #4]
10002d4a:	2381      	movs	r3, #129	; 0x81
10002d4c:	009b      	lsls	r3, r3, #2
10002d4e:	58d3      	ldr	r3, [r2, r3]
10002d50:	2280      	movs	r2, #128	; 0x80
10002d52:	0252      	lsls	r2, r2, #9
10002d54:	431a      	orrs	r2, r3
10002d56:	1c11      	adds	r1, r2, #0
10002d58:	687a      	ldr	r2, [r7, #4]
10002d5a:	2381      	movs	r3, #129	; 0x81
10002d5c:	009b      	lsls	r3, r3, #2
10002d5e:	50d1      	str	r1, [r2, r3]
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10002d60:	2317      	movs	r3, #23
10002d62:	18fb      	adds	r3, r7, r3
10002d64:	2200      	movs	r2, #0
10002d66:	701a      	strb	r2, [r3, #0]
10002d68:	e00f      	b.n	10002d8a <XMC_VADC_GLOBAL_BackgroundInit+0x132>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
10002d6a:	2317      	movs	r3, #23
10002d6c:	18fb      	adds	r3, r7, r3
10002d6e:	781a      	ldrb	r2, [r3, #0]
10002d70:	4b0a      	ldr	r3, [pc, #40]	; (10002d9c <XMC_VADC_GLOBAL_BackgroundInit+0x144>)
10002d72:	0092      	lsls	r2, r2, #2
10002d74:	58d3      	ldr	r3, [r2, r3]
10002d76:	1c18      	adds	r0, r3, #0
10002d78:	f7ff fd94 	bl	100028a4 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10002d7c:	2317      	movs	r3, #23
10002d7e:	18fb      	adds	r3, r7, r3
10002d80:	781a      	ldrb	r2, [r3, #0]
10002d82:	2317      	movs	r3, #23
10002d84:	18fb      	adds	r3, r7, r3
10002d86:	3201      	adds	r2, #1
10002d88:	701a      	strb	r2, [r3, #0]
10002d8a:	2317      	movs	r3, #23
10002d8c:	18fb      	adds	r3, r7, r3
10002d8e:	781b      	ldrb	r3, [r3, #0]
10002d90:	2b01      	cmp	r3, #1
10002d92:	d9ea      	bls.n	10002d6a <XMC_VADC_GLOBAL_BackgroundInit+0x112>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
#endif

}
10002d94:	46bd      	mov	sp, r7
10002d96:	b006      	add	sp, #24
10002d98:	bd80      	pop	{r7, pc}
10002d9a:	46c0      	nop			; (mov r8, r8)
10002d9c:	10005948 	.word	0x10005948
10002da0:	fffffcff 	.word	0xfffffcff
10002da4:	00808000 	.word	0x00808000

10002da8 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                const XMC_VADC_CHANNEL_CONFIG_t *config)
{
10002da8:	b580      	push	{r7, lr}
10002daa:	b088      	sub	sp, #32
10002dac:	af00      	add	r7, sp, #0
10002dae:	60f8      	str	r0, [r7, #12]
10002db0:	60b9      	str	r1, [r7, #8]
10002db2:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  prio  = (uint32_t)config->channel_priority;
10002db4:	687b      	ldr	r3, [r7, #4]
10002db6:	7b1b      	ldrb	r3, [r3, #12]
10002db8:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
10002dba:	68fb      	ldr	r3, [r7, #12]
10002dbc:	2288      	movs	r2, #136	; 0x88
10002dbe:	589b      	ldr	r3, [r3, r2]
10002dc0:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
10002dc2:	68bb      	ldr	r3, [r7, #8]
10002dc4:	2201      	movs	r2, #1
10002dc6:	409a      	lsls	r2, r3
10002dc8:	1c13      	adds	r3, r2, #0
10002dca:	43da      	mvns	r2, r3
10002dcc:	697b      	ldr	r3, [r7, #20]
10002dce:	4013      	ands	r3, r2
10002dd0:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
10002dd2:	68bb      	ldr	r3, [r7, #8]
10002dd4:	69ba      	ldr	r2, [r7, #24]
10002dd6:	409a      	lsls	r2, r3
10002dd8:	1c13      	adds	r3, r2, #0
10002dda:	697a      	ldr	r2, [r7, #20]
10002ddc:	4313      	orrs	r3, r2
10002dde:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
10002de0:	68fb      	ldr	r3, [r7, #12]
10002de2:	2188      	movs	r1, #136	; 0x88
10002de4:	697a      	ldr	r2, [r7, #20]
10002de6:	505a      	str	r2, [r3, r1]

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
10002de8:	687b      	ldr	r3, [r7, #4]
10002dea:	7b5b      	ldrb	r3, [r3, #13]
10002dec:	b25b      	sxtb	r3, r3
10002dee:	2b00      	cmp	r3, #0
10002df0:	db2a      	blt.n	10002e48 <XMC_VADC_GROUP_ChannelInit+0xa0>
  {
    mask = (uint32_t)0;
10002df2:	2300      	movs	r3, #0
10002df4:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
10002df6:	68bb      	ldr	r3, [r7, #8]
10002df8:	2b01      	cmp	r3, #1
10002dfa:	d10a      	bne.n	10002e12 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
10002dfc:	2308      	movs	r3, #8
10002dfe:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
10002e00:	68fb      	ldr	r3, [r7, #12]
10002e02:	22b0      	movs	r2, #176	; 0xb0
10002e04:	589b      	ldr	r3, [r3, r2]
10002e06:	4a1e      	ldr	r2, [pc, #120]	; (10002e80 <XMC_VADC_GROUP_ChannelInit+0xd8>)
10002e08:	401a      	ands	r2, r3
10002e0a:	68fb      	ldr	r3, [r7, #12]
10002e0c:	21b0      	movs	r1, #176	; 0xb0
10002e0e:	505a      	str	r2, [r3, r1]
10002e10:	e00d      	b.n	10002e2e <XMC_VADC_GROUP_ChannelInit+0x86>
    }
    else if ((uint32_t)0 == ch_num)
10002e12:	68bb      	ldr	r3, [r7, #8]
10002e14:	2b00      	cmp	r3, #0
10002e16:	d10a      	bne.n	10002e2e <XMC_VADC_GROUP_ChannelInit+0x86>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
10002e18:	2300      	movs	r3, #0
10002e1a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
10002e1c:	68fb      	ldr	r3, [r7, #12]
10002e1e:	22b0      	movs	r2, #176	; 0xb0
10002e20:	589b      	ldr	r3, [r3, r2]
10002e22:	221f      	movs	r2, #31
10002e24:	4393      	bics	r3, r2
10002e26:	1c1a      	adds	r2, r3, #0
10002e28:	68fb      	ldr	r3, [r7, #12]
10002e2a:	21b0      	movs	r1, #176	; 0xb0
10002e2c:	505a      	str	r2, [r3, r1]
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
10002e2e:	68fb      	ldr	r3, [r7, #12]
10002e30:	22b0      	movs	r2, #176	; 0xb0
10002e32:	589b      	ldr	r3, [r3, r2]
10002e34:	687a      	ldr	r2, [r7, #4]
10002e36:	7b52      	ldrb	r2, [r2, #13]
10002e38:	b251      	sxtb	r1, r2
10002e3a:	69fa      	ldr	r2, [r7, #28]
10002e3c:	4091      	lsls	r1, r2
10002e3e:	1c0a      	adds	r2, r1, #0
10002e40:	431a      	orrs	r2, r3
10002e42:	68fb      	ldr	r3, [r7, #12]
10002e44:	21b0      	movs	r1, #176	; 0xb0
10002e46:	505a      	str	r2, [r3, r1]
  }

  group_ptr->BFL |= config->bfl;
10002e48:	68fb      	ldr	r3, [r7, #12]
10002e4a:	22c8      	movs	r2, #200	; 0xc8
10002e4c:	589a      	ldr	r2, [r3, r2]
10002e4e:	687b      	ldr	r3, [r7, #4]
10002e50:	685b      	ldr	r3, [r3, #4]
10002e52:	431a      	orrs	r2, r3
10002e54:	68fb      	ldr	r3, [r7, #12]
10002e56:	21c8      	movs	r1, #200	; 0xc8
10002e58:	505a      	str	r2, [r3, r1]

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
10002e5a:	68fb      	ldr	r3, [r7, #12]
10002e5c:	22d0      	movs	r2, #208	; 0xd0
10002e5e:	589a      	ldr	r2, [r3, r2]
10002e60:	687b      	ldr	r3, [r7, #4]
10002e62:	689b      	ldr	r3, [r3, #8]
10002e64:	431a      	orrs	r2, r3
10002e66:	68fb      	ldr	r3, [r7, #12]
10002e68:	21d0      	movs	r1, #208	; 0xd0
10002e6a:	505a      	str	r2, [r3, r1]
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
10002e6c:	687b      	ldr	r3, [r7, #4]
10002e6e:	6819      	ldr	r1, [r3, #0]
10002e70:	68fb      	ldr	r3, [r7, #12]
10002e72:	68ba      	ldr	r2, [r7, #8]
10002e74:	3280      	adds	r2, #128	; 0x80
10002e76:	0092      	lsls	r2, r2, #2
10002e78:	50d1      	str	r1, [r2, r3]

}
10002e7a:	46bd      	mov	sp, r7
10002e7c:	b008      	add	sp, #32
10002e7e:	bd80      	pop	{r7, pc}
10002e80:	ffffe0ff 	.word	0xffffe0ff

10002e84 <_init>:
  }
}

/* Init */
void _init(void)
{}
10002e84:	b580      	push	{r7, lr}
10002e86:	af00      	add	r7, sp, #0
10002e88:	46bd      	mov	sp, r7
10002e8a:	bd80      	pop	{r7, pc}

10002e8c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
10002e8c:	b580      	push	{r7, lr}
10002e8e:	b082      	sub	sp, #8
10002e90:	af00      	add	r7, sp, #0
10002e92:	6078      	str	r0, [r7, #4]
10002e94:	1c0a      	adds	r2, r1, #0
10002e96:	1cfb      	adds	r3, r7, #3
10002e98:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
10002e9a:	1cfb      	adds	r3, r7, #3
10002e9c:	781b      	ldrb	r3, [r3, #0]
10002e9e:	2201      	movs	r2, #1
10002ea0:	409a      	lsls	r2, r3
10002ea2:	687b      	ldr	r3, [r7, #4]
10002ea4:	60da      	str	r2, [r3, #12]
}
10002ea6:	46bd      	mov	sp, r7
10002ea8:	b002      	add	sp, #8
10002eaa:	bd80      	pop	{r7, pc}

10002eac <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
10002eac:	b580      	push	{r7, lr}
10002eae:	b082      	sub	sp, #8
10002eb0:	af00      	add	r7, sp, #0
10002eb2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10002eb4:	687b      	ldr	r3, [r7, #4]
10002eb6:	2201      	movs	r2, #1
10002eb8:	60da      	str	r2, [r3, #12]
}
10002eba:	46bd      	mov	sp, r7
10002ebc:	b002      	add	sp, #8
10002ebe:	bd80      	pop	{r7, pc}

10002ec0 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
10002ec0:	b580      	push	{r7, lr}
10002ec2:	b082      	sub	sp, #8
10002ec4:	af00      	add	r7, sp, #0
10002ec6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
10002ec8:	687b      	ldr	r3, [r7, #4]
10002eca:	2202      	movs	r2, #2
10002ecc:	611a      	str	r2, [r3, #16]
}
10002ece:	46bd      	mov	sp, r7
10002ed0:	b002      	add	sp, #8
10002ed2:	bd80      	pop	{r7, pc}

10002ed4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
10002ed4:	b580      	push	{r7, lr}
10002ed6:	b082      	sub	sp, #8
10002ed8:	af00      	add	r7, sp, #0
10002eda:	6078      	str	r0, [r7, #4]
10002edc:	1c0a      	adds	r2, r1, #0
10002ede:	1cbb      	adds	r3, r7, #2
10002ee0:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10002ee2:	1cbb      	adds	r3, r7, #2
10002ee4:	881a      	ldrh	r2, [r3, #0]
10002ee6:	687b      	ldr	r3, [r7, #4]
10002ee8:	635a      	str	r2, [r3, #52]	; 0x34
}
10002eea:	46bd      	mov	sp, r7
10002eec:	b002      	add	sp, #8
10002eee:	bd80      	pop	{r7, pc}

10002ef0 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
10002ef0:	b580      	push	{r7, lr}
10002ef2:	b082      	sub	sp, #8
10002ef4:	af00      	add	r7, sp, #0
10002ef6:	6078      	str	r0, [r7, #4]
10002ef8:	1c0a      	adds	r2, r1, #0
10002efa:	1cbb      	adds	r3, r7, #2
10002efc:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
10002efe:	1cbb      	adds	r3, r7, #2
10002f00:	881a      	ldrh	r2, [r3, #0]
10002f02:	687b      	ldr	r3, [r7, #4]
10002f04:	63da      	str	r2, [r3, #60]	; 0x3c
}
10002f06:	46bd      	mov	sp, r7
10002f08:	b002      	add	sp, #8
10002f0a:	bd80      	pop	{r7, pc}

10002f0c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10002f0c:	b580      	push	{r7, lr}
10002f0e:	b082      	sub	sp, #8
10002f10:	af00      	add	r7, sp, #0
10002f12:	6078      	str	r0, [r7, #4]
10002f14:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
10002f16:	687b      	ldr	r3, [r7, #4]
10002f18:	683a      	ldr	r2, [r7, #0]
10002f1a:	611a      	str	r2, [r3, #16]
}
10002f1c:	46bd      	mov	sp, r7
10002f1e:	b002      	add	sp, #8
10002f20:	bd80      	pop	{r7, pc}
10002f22:	46c0      	nop			; (mov r8, r8)

10002f24 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
10002f24:	b580      	push	{r7, lr}
10002f26:	b082      	sub	sp, #8
10002f28:	af00      	add	r7, sp, #0
10002f2a:	6078      	str	r0, [r7, #4]
10002f2c:	1c0a      	adds	r2, r1, #0
10002f2e:	1cfb      	adds	r3, r7, #3
10002f30:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
10002f32:	687b      	ldr	r3, [r7, #4]
10002f34:	22a4      	movs	r2, #164	; 0xa4
10002f36:	589a      	ldr	r2, [r3, r2]
10002f38:	1cfb      	adds	r3, r7, #3
10002f3a:	781b      	ldrb	r3, [r3, #0]
10002f3c:	2101      	movs	r1, #1
10002f3e:	4099      	lsls	r1, r3
10002f40:	1c0b      	adds	r3, r1, #0
10002f42:	431a      	orrs	r2, r3
10002f44:	687b      	ldr	r3, [r7, #4]
10002f46:	21a4      	movs	r1, #164	; 0xa4
10002f48:	505a      	str	r2, [r3, r1]
}
10002f4a:	46bd      	mov	sp, r7
10002f4c:	b002      	add	sp, #8
10002f4e:	bd80      	pop	{r7, pc}

10002f50 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
10002f50:	b590      	push	{r4, r7, lr}
10002f52:	b085      	sub	sp, #20
10002f54:	af00      	add	r7, sp, #0
10002f56:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
10002f58:	230f      	movs	r3, #15
10002f5a:	18fb      	adds	r3, r7, r3
10002f5c:	2200      	movs	r2, #0
10002f5e:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
10002f60:	687b      	ldr	r3, [r7, #4]
10002f62:	2226      	movs	r2, #38	; 0x26
10002f64:	5c9b      	ldrb	r3, [r3, r2]
10002f66:	2201      	movs	r2, #1
10002f68:	4053      	eors	r3, r2
10002f6a:	b2db      	uxtb	r3, r3
10002f6c:	2b00      	cmp	r3, #0
10002f6e:	d00c      	beq.n	10002f8a <TIMER_Init+0x3a>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
10002f70:	687b      	ldr	r3, [r7, #4]
10002f72:	2221      	movs	r2, #33	; 0x21
10002f74:	5c9b      	ldrb	r3, [r3, r2]
10002f76:	2b00      	cmp	r3, #0
10002f78:	d107      	bne.n	10002f8a <TIMER_Init+0x3a>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
10002f7a:	230f      	movs	r3, #15
10002f7c:	18fc      	adds	r4, r7, r3
10002f7e:	687b      	ldr	r3, [r7, #4]
10002f80:	1c18      	adds	r0, r3, #0
10002f82:	f000 f809 	bl	10002f98 <TIMER_CCU4_lInit>
10002f86:	1c03      	adds	r3, r0, #0
10002f88:	7023      	strb	r3, [r4, #0]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
10002f8a:	230f      	movs	r3, #15
10002f8c:	18fb      	adds	r3, r7, r3
10002f8e:	781b      	ldrb	r3, [r3, #0]
}
10002f90:	1c18      	adds	r0, r3, #0
10002f92:	46bd      	mov	sp, r7
10002f94:	b005      	add	sp, #20
10002f96:	bd90      	pop	{r4, r7, pc}

10002f98 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
10002f98:	b590      	push	{r4, r7, lr}
10002f9a:	b085      	sub	sp, #20
10002f9c:	af00      	add	r7, sp, #0
10002f9e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
10002fa0:	687b      	ldr	r3, [r7, #4]
10002fa2:	691b      	ldr	r3, [r3, #16]
10002fa4:	220f      	movs	r2, #15
10002fa6:	18bc      	adds	r4, r7, r2
10002fa8:	1c18      	adds	r0, r3, #0
10002faa:	f001 fd7f 	bl	10004aac <GLOBAL_CCU4_Init>
10002fae:	1c03      	adds	r3, r0, #0
10002fb0:	7023      	strb	r3, [r4, #0]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
10002fb2:	687b      	ldr	r3, [r7, #4]
10002fb4:	691b      	ldr	r3, [r3, #16]
10002fb6:	689a      	ldr	r2, [r3, #8]
10002fb8:	687b      	ldr	r3, [r7, #4]
10002fba:	7e1b      	ldrb	r3, [r3, #24]
10002fbc:	1c10      	adds	r0, r2, #0
10002fbe:	1c19      	adds	r1, r3, #0
10002fc0:	f7ff ff64 	bl	10002e8c <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
10002fc4:	687b      	ldr	r3, [r7, #4]
10002fc6:	695a      	ldr	r2, [r3, #20]
10002fc8:	687b      	ldr	r3, [r7, #4]
10002fca:	69db      	ldr	r3, [r3, #28]
10002fcc:	1c10      	adds	r0, r2, #0
10002fce:	1c19      	adds	r1, r3, #0
10002fd0:	f7fe fc08 	bl	100017e4 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
10002fd4:	687b      	ldr	r3, [r7, #4]
10002fd6:	1c18      	adds	r0, r3, #0
10002fd8:	f000 f830 	bl	1000303c <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
10002fdc:	687b      	ldr	r3, [r7, #4]
10002fde:	2225      	movs	r2, #37	; 0x25
10002fe0:	5c9b      	ldrb	r3, [r3, r2]
10002fe2:	2b00      	cmp	r3, #0
10002fe4:	d00f      	beq.n	10003006 <TIMER_CCU4_lInit+0x6e>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
10002fe6:	687b      	ldr	r3, [r7, #4]
10002fe8:	6959      	ldr	r1, [r3, #20]
10002fea:	687b      	ldr	r3, [r7, #4]
10002fec:	2220      	movs	r2, #32
10002fee:	5c9b      	ldrb	r3, [r3, r2]
10002ff0:	1c08      	adds	r0, r1, #0
10002ff2:	2100      	movs	r1, #0
10002ff4:	1c1a      	adds	r2, r3, #0
10002ff6:	f7fe ff11 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002ffa:	687b      	ldr	r3, [r7, #4]
10002ffc:	695b      	ldr	r3, [r3, #20]
10002ffe:	1c18      	adds	r0, r3, #0
10003000:	2100      	movs	r1, #0
10003002:	f7ff ff8f 	bl	10002f24 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
10003006:	687b      	ldr	r3, [r7, #4]
10003008:	695b      	ldr	r3, [r3, #20]
1000300a:	1c18      	adds	r0, r3, #0
1000300c:	f7ff ff58 	bl	10002ec0 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
10003010:	687b      	ldr	r3, [r7, #4]
10003012:	2226      	movs	r2, #38	; 0x26
10003014:	2101      	movs	r1, #1
10003016:	5499      	strb	r1, [r3, r2]

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
10003018:	687b      	ldr	r3, [r7, #4]
1000301a:	2224      	movs	r2, #36	; 0x24
1000301c:	5c9b      	ldrb	r3, [r3, r2]
1000301e:	2b00      	cmp	r3, #0
10003020:	d004      	beq.n	1000302c <TIMER_CCU4_lInit+0x94>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
10003022:	687b      	ldr	r3, [r7, #4]
10003024:	695b      	ldr	r3, [r3, #20]
10003026:	1c18      	adds	r0, r3, #0
10003028:	f7ff ff40 	bl	10002eac <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
1000302c:	230f      	movs	r3, #15
1000302e:	18fb      	adds	r3, r7, r3
10003030:	781b      	ldrb	r3, [r3, #0]
}
10003032:	1c18      	adds	r0, r3, #0
10003034:	46bd      	mov	sp, r7
10003036:	b005      	add	sp, #20
10003038:	bd90      	pop	{r4, r7, pc}
1000303a:	46c0      	nop			; (mov r8, r8)

1000303c <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
1000303c:	b580      	push	{r7, lr}
1000303e:	b082      	sub	sp, #8
10003040:	af00      	add	r7, sp, #0
10003042:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
10003044:	687b      	ldr	r3, [r7, #4]
10003046:	695a      	ldr	r2, [r3, #20]
10003048:	687b      	ldr	r3, [r7, #4]
1000304a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
1000304c:	1c10      	adds	r0, r2, #0
1000304e:	1c19      	adds	r1, r3, #0
10003050:	f7ff ff40 	bl	10002ed4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
10003054:	687b      	ldr	r3, [r7, #4]
10003056:	695b      	ldr	r3, [r3, #20]
10003058:	1c18      	adds	r0, r3, #0
1000305a:	2100      	movs	r1, #0
1000305c:	f7ff ff48 	bl	10002ef0 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
10003060:	687b      	ldr	r3, [r7, #4]
10003062:	691b      	ldr	r3, [r3, #16]
10003064:	689a      	ldr	r2, [r3, #8]
10003066:	687b      	ldr	r3, [r7, #4]
10003068:	68db      	ldr	r3, [r3, #12]
1000306a:	1c10      	adds	r0, r2, #0
1000306c:	1c19      	adds	r1, r3, #0
1000306e:	f7ff ff4d 	bl	10002f0c <XMC_CCU4_EnableShadowTransfer>
}
10003072:	46bd      	mov	sp, r7
10003074:	b002      	add	sp, #8
10003076:	bd80      	pop	{r7, pc}

10003078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10003078:	b5b0      	push	{r4, r5, r7, lr}
1000307a:	b082      	sub	sp, #8
1000307c:	af00      	add	r7, sp, #0
1000307e:	1c02      	adds	r2, r0, #0
10003080:	6039      	str	r1, [r7, #0]
10003082:	1dfb      	adds	r3, r7, #7
10003084:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10003086:	1dfb      	adds	r3, r7, #7
10003088:	781b      	ldrb	r3, [r3, #0]
1000308a:	2b7f      	cmp	r3, #127	; 0x7f
1000308c:	d827      	bhi.n	100030de <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000308e:	4c2d      	ldr	r4, [pc, #180]	; (10003144 <__NVIC_SetPriority+0xcc>)
10003090:	1dfb      	adds	r3, r7, #7
10003092:	781b      	ldrb	r3, [r3, #0]
10003094:	b25b      	sxtb	r3, r3
10003096:	089b      	lsrs	r3, r3, #2
10003098:	492a      	ldr	r1, [pc, #168]	; (10003144 <__NVIC_SetPriority+0xcc>)
1000309a:	1dfa      	adds	r2, r7, #7
1000309c:	7812      	ldrb	r2, [r2, #0]
1000309e:	b252      	sxtb	r2, r2
100030a0:	0892      	lsrs	r2, r2, #2
100030a2:	32c0      	adds	r2, #192	; 0xc0
100030a4:	0092      	lsls	r2, r2, #2
100030a6:	5852      	ldr	r2, [r2, r1]
100030a8:	1df9      	adds	r1, r7, #7
100030aa:	7809      	ldrb	r1, [r1, #0]
100030ac:	1c08      	adds	r0, r1, #0
100030ae:	2103      	movs	r1, #3
100030b0:	4001      	ands	r1, r0
100030b2:	00c9      	lsls	r1, r1, #3
100030b4:	1c08      	adds	r0, r1, #0
100030b6:	21ff      	movs	r1, #255	; 0xff
100030b8:	4081      	lsls	r1, r0
100030ba:	43c9      	mvns	r1, r1
100030bc:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100030be:	683a      	ldr	r2, [r7, #0]
100030c0:	0192      	lsls	r2, r2, #6
100030c2:	20ff      	movs	r0, #255	; 0xff
100030c4:	4002      	ands	r2, r0
100030c6:	1df8      	adds	r0, r7, #7
100030c8:	7800      	ldrb	r0, [r0, #0]
100030ca:	1c05      	adds	r5, r0, #0
100030cc:	2003      	movs	r0, #3
100030ce:	4028      	ands	r0, r5
100030d0:	00c0      	lsls	r0, r0, #3
100030d2:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100030d4:	430a      	orrs	r2, r1
100030d6:	33c0      	adds	r3, #192	; 0xc0
100030d8:	009b      	lsls	r3, r3, #2
100030da:	511a      	str	r2, [r3, r4]
100030dc:	e02e      	b.n	1000313c <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100030de:	4c1a      	ldr	r4, [pc, #104]	; (10003148 <__NVIC_SetPriority+0xd0>)
100030e0:	1dfb      	adds	r3, r7, #7
100030e2:	781b      	ldrb	r3, [r3, #0]
100030e4:	1c1a      	adds	r2, r3, #0
100030e6:	230f      	movs	r3, #15
100030e8:	4013      	ands	r3, r2
100030ea:	3b08      	subs	r3, #8
100030ec:	0899      	lsrs	r1, r3, #2
100030ee:	4a16      	ldr	r2, [pc, #88]	; (10003148 <__NVIC_SetPriority+0xd0>)
100030f0:	1dfb      	adds	r3, r7, #7
100030f2:	781b      	ldrb	r3, [r3, #0]
100030f4:	1c18      	adds	r0, r3, #0
100030f6:	230f      	movs	r3, #15
100030f8:	4003      	ands	r3, r0
100030fa:	3b08      	subs	r3, #8
100030fc:	089b      	lsrs	r3, r3, #2
100030fe:	3306      	adds	r3, #6
10003100:	009b      	lsls	r3, r3, #2
10003102:	18d3      	adds	r3, r2, r3
10003104:	685b      	ldr	r3, [r3, #4]
10003106:	1dfa      	adds	r2, r7, #7
10003108:	7812      	ldrb	r2, [r2, #0]
1000310a:	1c10      	adds	r0, r2, #0
1000310c:	2203      	movs	r2, #3
1000310e:	4002      	ands	r2, r0
10003110:	00d2      	lsls	r2, r2, #3
10003112:	1c10      	adds	r0, r2, #0
10003114:	22ff      	movs	r2, #255	; 0xff
10003116:	4082      	lsls	r2, r0
10003118:	43d2      	mvns	r2, r2
1000311a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000311c:	683b      	ldr	r3, [r7, #0]
1000311e:	019b      	lsls	r3, r3, #6
10003120:	20ff      	movs	r0, #255	; 0xff
10003122:	4003      	ands	r3, r0
10003124:	1df8      	adds	r0, r7, #7
10003126:	7800      	ldrb	r0, [r0, #0]
10003128:	1c05      	adds	r5, r0, #0
1000312a:	2003      	movs	r0, #3
1000312c:	4028      	ands	r0, r5
1000312e:	00c0      	lsls	r0, r0, #3
10003130:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003132:	431a      	orrs	r2, r3
10003134:	1d8b      	adds	r3, r1, #6
10003136:	009b      	lsls	r3, r3, #2
10003138:	18e3      	adds	r3, r4, r3
1000313a:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
1000313c:	46bd      	mov	sp, r7
1000313e:	b002      	add	sp, #8
10003140:	bdb0      	pop	{r4, r5, r7, pc}
10003142:	46c0      	nop			; (mov r8, r8)
10003144:	e000e100 	.word	0xe000e100
10003148:	e000ed00 	.word	0xe000ed00

1000314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
1000314c:	b580      	push	{r7, lr}
1000314e:	b082      	sub	sp, #8
10003150:	af00      	add	r7, sp, #0
10003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10003154:	687b      	ldr	r3, [r7, #4]
10003156:	3b01      	subs	r3, #1
10003158:	4a0c      	ldr	r2, [pc, #48]	; (1000318c <SysTick_Config+0x40>)
1000315a:	4293      	cmp	r3, r2
1000315c:	d901      	bls.n	10003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
1000315e:	2301      	movs	r3, #1
10003160:	e010      	b.n	10003184 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10003162:	4b0b      	ldr	r3, [pc, #44]	; (10003190 <SysTick_Config+0x44>)
10003164:	687a      	ldr	r2, [r7, #4]
10003166:	3a01      	subs	r2, #1
10003168:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
1000316a:	2301      	movs	r3, #1
1000316c:	425b      	negs	r3, r3
1000316e:	1c18      	adds	r0, r3, #0
10003170:	2103      	movs	r1, #3
10003172:	f7ff ff81 	bl	10003078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10003176:	4b06      	ldr	r3, [pc, #24]	; (10003190 <SysTick_Config+0x44>)
10003178:	2200      	movs	r2, #0
1000317a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1000317c:	4b04      	ldr	r3, [pc, #16]	; (10003190 <SysTick_Config+0x44>)
1000317e:	2207      	movs	r2, #7
10003180:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10003182:	2300      	movs	r3, #0
}
10003184:	1c18      	adds	r0, r3, #0
10003186:	46bd      	mov	sp, r7
10003188:	b002      	add	sp, #8
1000318a:	bd80      	pop	{r7, pc}
1000318c:	00ffffff 	.word	0x00ffffff
10003190:	e000e010 	.word	0xe000e010

10003194 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
10003194:	b590      	push	{r4, r7, lr}
10003196:	b087      	sub	sp, #28
10003198:	af00      	add	r7, sp, #0
1000319a:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
1000319c:	230f      	movs	r3, #15
1000319e:	18fb      	adds	r3, r7, r3
100031a0:	2200      	movs	r2, #0
100031a2:	701a      	strb	r2, [r3, #0]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
100031a4:	496b      	ldr	r1, [pc, #428]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
100031a6:	687a      	ldr	r2, [r7, #4]
100031a8:	1c13      	adds	r3, r2, #0
100031aa:	00db      	lsls	r3, r3, #3
100031ac:	189b      	adds	r3, r3, r2
100031ae:	009b      	lsls	r3, r3, #2
100031b0:	18cb      	adds	r3, r1, r3
100031b2:	3318      	adds	r3, #24
100031b4:	681b      	ldr	r3, [r3, #0]
100031b6:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
100031b8:	4b67      	ldr	r3, [pc, #412]	; (10003358 <SYSTIMER_lInsertTimerList+0x1c4>)
100031ba:	681b      	ldr	r3, [r3, #0]
100031bc:	2b00      	cmp	r3, #0
100031be:	d109      	bne.n	100031d4 <SYSTIMER_lInsertTimerList+0x40>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
100031c0:	687a      	ldr	r2, [r7, #4]
100031c2:	1c13      	adds	r3, r2, #0
100031c4:	00db      	lsls	r3, r3, #3
100031c6:	189b      	adds	r3, r3, r2
100031c8:	009b      	lsls	r3, r3, #2
100031ca:	4a62      	ldr	r2, [pc, #392]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
100031cc:	189a      	adds	r2, r3, r2
100031ce:	4b62      	ldr	r3, [pc, #392]	; (10003358 <SYSTIMER_lInsertTimerList+0x1c4>)
100031d0:	601a      	str	r2, [r3, #0]
100031d2:	e0bc      	b.n	1000334e <SYSTIMER_lInsertTimerList+0x1ba>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
100031d4:	4b60      	ldr	r3, [pc, #384]	; (10003358 <SYSTIMER_lInsertTimerList+0x1c4>)
100031d6:	681b      	ldr	r3, [r3, #0]
100031d8:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
100031da:	68bb      	ldr	r3, [r7, #8]
100031dc:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
100031de:	e0aa      	b.n	10003336 <SYSTIMER_lInsertTimerList+0x1a2>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
100031e0:	697b      	ldr	r3, [r7, #20]
100031e2:	699b      	ldr	r3, [r3, #24]
100031e4:	1c1a      	adds	r2, r3, #0
100031e6:	693b      	ldr	r3, [r7, #16]
100031e8:	1a9b      	subs	r3, r3, r2
100031ea:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
100031ec:	693b      	ldr	r3, [r7, #16]
100031ee:	2b00      	cmp	r3, #0
100031f0:	dc77      	bgt.n	100032e2 <SYSTIMER_lInsertTimerList+0x14e>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
100031f2:	697b      	ldr	r3, [r7, #20]
100031f4:	685b      	ldr	r3, [r3, #4]
100031f6:	2b00      	cmp	r3, #0
100031f8:	d025      	beq.n	10003246 <SYSTIMER_lInsertTimerList+0xb2>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
100031fa:	697b      	ldr	r3, [r7, #20]
100031fc:	685a      	ldr	r2, [r3, #4]
100031fe:	6879      	ldr	r1, [r7, #4]
10003200:	1c0b      	adds	r3, r1, #0
10003202:	00db      	lsls	r3, r3, #3
10003204:	185b      	adds	r3, r3, r1
10003206:	009b      	lsls	r3, r3, #2
10003208:	4952      	ldr	r1, [pc, #328]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
1000320a:	185b      	adds	r3, r3, r1
1000320c:	6013      	str	r3, [r2, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
1000320e:	697b      	ldr	r3, [r7, #20]
10003210:	6859      	ldr	r1, [r3, #4]
10003212:	4850      	ldr	r0, [pc, #320]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
10003214:	687a      	ldr	r2, [r7, #4]
10003216:	1c13      	adds	r3, r2, #0
10003218:	00db      	lsls	r3, r3, #3
1000321a:	189b      	adds	r3, r3, r2
1000321c:	009b      	lsls	r3, r3, #2
1000321e:	18c3      	adds	r3, r0, r3
10003220:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
10003222:	494c      	ldr	r1, [pc, #304]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
10003224:	687a      	ldr	r2, [r7, #4]
10003226:	1c13      	adds	r3, r2, #0
10003228:	00db      	lsls	r3, r3, #3
1000322a:	189b      	adds	r3, r3, r2
1000322c:	009b      	lsls	r3, r3, #2
1000322e:	697a      	ldr	r2, [r7, #20]
10003230:	505a      	str	r2, [r3, r1]
          object_ptr->prev = &g_timer_tbl[tbl_index];
10003232:	687a      	ldr	r2, [r7, #4]
10003234:	1c13      	adds	r3, r2, #0
10003236:	00db      	lsls	r3, r3, #3
10003238:	189b      	adds	r3, r3, r2
1000323a:	009b      	lsls	r3, r3, #2
1000323c:	4a45      	ldr	r2, [pc, #276]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
1000323e:	189a      	adds	r2, r3, r2
10003240:	697b      	ldr	r3, [r7, #20]
10003242:	605a      	str	r2, [r3, #4]
10003244:	e01b      	b.n	1000327e <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
10003246:	4b44      	ldr	r3, [pc, #272]	; (10003358 <SYSTIMER_lInsertTimerList+0x1c4>)
10003248:	6818      	ldr	r0, [r3, #0]
1000324a:	4942      	ldr	r1, [pc, #264]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
1000324c:	687a      	ldr	r2, [r7, #4]
1000324e:	1c13      	adds	r3, r2, #0
10003250:	00db      	lsls	r3, r3, #3
10003252:	189b      	adds	r3, r3, r2
10003254:	009b      	lsls	r3, r3, #2
10003256:	5058      	str	r0, [r3, r1]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
10003258:	4b3f      	ldr	r3, [pc, #252]	; (10003358 <SYSTIMER_lInsertTimerList+0x1c4>)
1000325a:	681a      	ldr	r2, [r3, #0]
1000325c:	6879      	ldr	r1, [r7, #4]
1000325e:	1c0b      	adds	r3, r1, #0
10003260:	00db      	lsls	r3, r3, #3
10003262:	185b      	adds	r3, r3, r1
10003264:	009b      	lsls	r3, r3, #2
10003266:	493b      	ldr	r1, [pc, #236]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
10003268:	185b      	adds	r3, r3, r1
1000326a:	6053      	str	r3, [r2, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
1000326c:	687a      	ldr	r2, [r7, #4]
1000326e:	1c13      	adds	r3, r2, #0
10003270:	00db      	lsls	r3, r3, #3
10003272:	189b      	adds	r3, r3, r2
10003274:	009b      	lsls	r3, r3, #2
10003276:	4a37      	ldr	r2, [pc, #220]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
10003278:	189a      	adds	r2, r3, r2
1000327a:	4b37      	ldr	r3, [pc, #220]	; (10003358 <SYSTIMER_lInsertTimerList+0x1c4>)
1000327c:	601a      	str	r2, [r3, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
1000327e:	4935      	ldr	r1, [pc, #212]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
10003280:	687a      	ldr	r2, [r7, #4]
10003282:	1c13      	adds	r3, r2, #0
10003284:	00db      	lsls	r3, r3, #3
10003286:	189b      	adds	r3, r3, r2
10003288:	009b      	lsls	r3, r3, #2
1000328a:	585b      	ldr	r3, [r3, r1]
1000328c:	699a      	ldr	r2, [r3, #24]
1000328e:	693b      	ldr	r3, [r7, #16]
10003290:	18d1      	adds	r1, r2, r3
10003292:	4830      	ldr	r0, [pc, #192]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
10003294:	687a      	ldr	r2, [r7, #4]
10003296:	1c13      	adds	r3, r2, #0
10003298:	00db      	lsls	r3, r3, #3
1000329a:	189b      	adds	r3, r3, r2
1000329c:	009b      	lsls	r3, r3, #2
1000329e:	18c3      	adds	r3, r0, r3
100032a0:	3318      	adds	r3, #24
100032a2:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
100032a4:	492b      	ldr	r1, [pc, #172]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
100032a6:	687a      	ldr	r2, [r7, #4]
100032a8:	1c13      	adds	r3, r2, #0
100032aa:	00db      	lsls	r3, r3, #3
100032ac:	189b      	adds	r3, r3, r2
100032ae:	009b      	lsls	r3, r3, #2
100032b0:	585a      	ldr	r2, [r3, r1]
100032b2:	4828      	ldr	r0, [pc, #160]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
100032b4:	6879      	ldr	r1, [r7, #4]
100032b6:	1c0b      	adds	r3, r1, #0
100032b8:	00db      	lsls	r3, r3, #3
100032ba:	185b      	adds	r3, r3, r1
100032bc:	009b      	lsls	r3, r3, #2
100032be:	581b      	ldr	r3, [r3, r0]
100032c0:	6998      	ldr	r0, [r3, #24]
100032c2:	4c24      	ldr	r4, [pc, #144]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
100032c4:	6879      	ldr	r1, [r7, #4]
100032c6:	1c0b      	adds	r3, r1, #0
100032c8:	00db      	lsls	r3, r3, #3
100032ca:	185b      	adds	r3, r3, r1
100032cc:	009b      	lsls	r3, r3, #2
100032ce:	18e3      	adds	r3, r4, r3
100032d0:	3318      	adds	r3, #24
100032d2:	681b      	ldr	r3, [r3, #0]
100032d4:	1ac3      	subs	r3, r0, r3
100032d6:	6193      	str	r3, [r2, #24]
        found_flag = true;
100032d8:	230f      	movs	r3, #15
100032da:	18fb      	adds	r3, r7, r3
100032dc:	2201      	movs	r2, #1
100032de:	701a      	strb	r2, [r3, #0]
100032e0:	e026      	b.n	10003330 <SYSTIMER_lInsertTimerList+0x19c>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
100032e2:	693b      	ldr	r3, [r7, #16]
100032e4:	2b00      	cmp	r3, #0
100032e6:	dd23      	ble.n	10003330 <SYSTIMER_lInsertTimerList+0x19c>
100032e8:	697b      	ldr	r3, [r7, #20]
100032ea:	681b      	ldr	r3, [r3, #0]
100032ec:	2b00      	cmp	r3, #0
100032ee:	d11f      	bne.n	10003330 <SYSTIMER_lInsertTimerList+0x19c>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
100032f0:	4918      	ldr	r1, [pc, #96]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
100032f2:	687a      	ldr	r2, [r7, #4]
100032f4:	1c13      	adds	r3, r2, #0
100032f6:	00db      	lsls	r3, r3, #3
100032f8:	189b      	adds	r3, r3, r2
100032fa:	009b      	lsls	r3, r3, #2
100032fc:	18cb      	adds	r3, r1, r3
100032fe:	697a      	ldr	r2, [r7, #20]
10003300:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
10003302:	687a      	ldr	r2, [r7, #4]
10003304:	1c13      	adds	r3, r2, #0
10003306:	00db      	lsls	r3, r3, #3
10003308:	189b      	adds	r3, r3, r2
1000330a:	009b      	lsls	r3, r3, #2
1000330c:	4a11      	ldr	r2, [pc, #68]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
1000330e:	189a      	adds	r2, r3, r2
10003310:	697b      	ldr	r3, [r7, #20]
10003312:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
10003314:	6939      	ldr	r1, [r7, #16]
10003316:	480f      	ldr	r0, [pc, #60]	; (10003354 <SYSTIMER_lInsertTimerList+0x1c0>)
10003318:	687a      	ldr	r2, [r7, #4]
1000331a:	1c13      	adds	r3, r2, #0
1000331c:	00db      	lsls	r3, r3, #3
1000331e:	189b      	adds	r3, r3, r2
10003320:	009b      	lsls	r3, r3, #2
10003322:	18c3      	adds	r3, r0, r3
10003324:	3318      	adds	r3, #24
10003326:	6019      	str	r1, [r3, #0]
          found_flag = true;
10003328:	230f      	movs	r3, #15
1000332a:	18fb      	adds	r3, r7, r3
1000332c:	2201      	movs	r2, #1
1000332e:	701a      	strb	r2, [r3, #0]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
10003330:	697b      	ldr	r3, [r7, #20]
10003332:	681b      	ldr	r3, [r3, #0]
10003334:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
10003336:	697b      	ldr	r3, [r7, #20]
10003338:	2b00      	cmp	r3, #0
1000333a:	d008      	beq.n	1000334e <SYSTIMER_lInsertTimerList+0x1ba>
1000333c:	230f      	movs	r3, #15
1000333e:	18fb      	adds	r3, r7, r3
10003340:	781b      	ldrb	r3, [r3, #0]
10003342:	2201      	movs	r2, #1
10003344:	4053      	eors	r3, r2
10003346:	b2db      	uxtb	r3, r3
10003348:	2b00      	cmp	r3, #0
1000334a:	d000      	beq.n	1000334e <SYSTIMER_lInsertTimerList+0x1ba>
1000334c:	e748      	b.n	100031e0 <SYSTIMER_lInsertTimerList+0x4c>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
1000334e:	46bd      	mov	sp, r7
10003350:	b007      	add	sp, #28
10003352:	bd90      	pop	{r4, r7, pc}
10003354:	200009d0 	.word	0x200009d0
10003358:	2000097c 	.word	0x2000097c

1000335c <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
1000335c:	b580      	push	{r7, lr}
1000335e:	b084      	sub	sp, #16
10003360:	af00      	add	r7, sp, #0
10003362:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
10003364:	687a      	ldr	r2, [r7, #4]
10003366:	1c13      	adds	r3, r2, #0
10003368:	00db      	lsls	r3, r3, #3
1000336a:	189b      	adds	r3, r3, r2
1000336c:	009b      	lsls	r3, r3, #2
1000336e:	4a28      	ldr	r2, [pc, #160]	; (10003410 <SYSTIMER_lRemoveTimerList+0xb4>)
10003370:	189b      	adds	r3, r3, r2
10003372:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
10003374:	68fb      	ldr	r3, [r7, #12]
10003376:	685b      	ldr	r3, [r3, #4]
10003378:	2b00      	cmp	r3, #0
1000337a:	d107      	bne.n	1000338c <SYSTIMER_lRemoveTimerList+0x30>
1000337c:	68fb      	ldr	r3, [r7, #12]
1000337e:	681b      	ldr	r3, [r3, #0]
10003380:	2b00      	cmp	r3, #0
10003382:	d103      	bne.n	1000338c <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
10003384:	4b23      	ldr	r3, [pc, #140]	; (10003414 <SYSTIMER_lRemoveTimerList+0xb8>)
10003386:	2200      	movs	r2, #0
10003388:	601a      	str	r2, [r3, #0]
1000338a:	e03d      	b.n	10003408 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
1000338c:	68fb      	ldr	r3, [r7, #12]
1000338e:	685b      	ldr	r3, [r3, #4]
10003390:	2b00      	cmp	r3, #0
10003392:	d114      	bne.n	100033be <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
10003394:	68fb      	ldr	r3, [r7, #12]
10003396:	681a      	ldr	r2, [r3, #0]
10003398:	4b1e      	ldr	r3, [pc, #120]	; (10003414 <SYSTIMER_lRemoveTimerList+0xb8>)
1000339a:	601a      	str	r2, [r3, #0]
    g_timer_list->prev = NULL;
1000339c:	4b1d      	ldr	r3, [pc, #116]	; (10003414 <SYSTIMER_lRemoveTimerList+0xb8>)
1000339e:	681b      	ldr	r3, [r3, #0]
100033a0:	2200      	movs	r2, #0
100033a2:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
100033a4:	4b1b      	ldr	r3, [pc, #108]	; (10003414 <SYSTIMER_lRemoveTimerList+0xb8>)
100033a6:	681b      	ldr	r3, [r3, #0]
100033a8:	4a1a      	ldr	r2, [pc, #104]	; (10003414 <SYSTIMER_lRemoveTimerList+0xb8>)
100033aa:	6812      	ldr	r2, [r2, #0]
100033ac:	6991      	ldr	r1, [r2, #24]
100033ae:	68fa      	ldr	r2, [r7, #12]
100033b0:	6992      	ldr	r2, [r2, #24]
100033b2:	188a      	adds	r2, r1, r2
100033b4:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
100033b6:	68fb      	ldr	r3, [r7, #12]
100033b8:	2200      	movs	r2, #0
100033ba:	601a      	str	r2, [r3, #0]
100033bc:	e024      	b.n	10003408 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
100033be:	68fb      	ldr	r3, [r7, #12]
100033c0:	681b      	ldr	r3, [r3, #0]
100033c2:	2b00      	cmp	r3, #0
100033c4:	d107      	bne.n	100033d6 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
100033c6:	68fb      	ldr	r3, [r7, #12]
100033c8:	685b      	ldr	r3, [r3, #4]
100033ca:	2200      	movs	r2, #0
100033cc:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
100033ce:	68fb      	ldr	r3, [r7, #12]
100033d0:	2200      	movs	r2, #0
100033d2:	605a      	str	r2, [r3, #4]
100033d4:	e018      	b.n	10003408 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
100033d6:	68fb      	ldr	r3, [r7, #12]
100033d8:	685b      	ldr	r3, [r3, #4]
100033da:	68fa      	ldr	r2, [r7, #12]
100033dc:	6812      	ldr	r2, [r2, #0]
100033de:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
100033e0:	68fb      	ldr	r3, [r7, #12]
100033e2:	681b      	ldr	r3, [r3, #0]
100033e4:	68fa      	ldr	r2, [r7, #12]
100033e6:	6852      	ldr	r2, [r2, #4]
100033e8:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
100033ea:	68fb      	ldr	r3, [r7, #12]
100033ec:	681b      	ldr	r3, [r3, #0]
100033ee:	68fa      	ldr	r2, [r7, #12]
100033f0:	6812      	ldr	r2, [r2, #0]
100033f2:	6991      	ldr	r1, [r2, #24]
100033f4:	68fa      	ldr	r2, [r7, #12]
100033f6:	6992      	ldr	r2, [r2, #24]
100033f8:	188a      	adds	r2, r1, r2
100033fa:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
100033fc:	68fb      	ldr	r3, [r7, #12]
100033fe:	2200      	movs	r2, #0
10003400:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
10003402:	68fb      	ldr	r3, [r7, #12]
10003404:	2200      	movs	r2, #0
10003406:	605a      	str	r2, [r3, #4]
  }
}
10003408:	46bd      	mov	sp, r7
1000340a:	b004      	add	sp, #16
1000340c:	bd80      	pop	{r7, pc}
1000340e:	46c0      	nop			; (mov r8, r8)
10003410:	200009d0 	.word	0x200009d0
10003414:	2000097c 	.word	0x2000097c

10003418 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
10003418:	b580      	push	{r7, lr}
1000341a:	b082      	sub	sp, #8
1000341c:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
1000341e:	4b2f      	ldr	r3, [pc, #188]	; (100034dc <SYSTIMER_lTimerHandler+0xc4>)
10003420:	681b      	ldr	r3, [r3, #0]
10003422:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
10003424:	e050      	b.n	100034c8 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
10003426:	687b      	ldr	r3, [r7, #4]
10003428:	2220      	movs	r2, #32
1000342a:	5c9b      	ldrb	r3, [r3, r2]
1000342c:	2b00      	cmp	r3, #0
1000342e:	d013      	beq.n	10003458 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
10003430:	687b      	ldr	r3, [r7, #4]
10003432:	695b      	ldr	r3, [r3, #20]
10003434:	1c18      	adds	r0, r3, #0
10003436:	f7ff ff91 	bl	1000335c <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
1000343a:	687b      	ldr	r3, [r7, #4]
1000343c:	2200      	movs	r2, #0
1000343e:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
10003440:	687b      	ldr	r3, [r7, #4]
10003442:	695b      	ldr	r3, [r3, #20]
10003444:	1c1a      	adds	r2, r3, #0
10003446:	2301      	movs	r3, #1
10003448:	4093      	lsls	r3, r2
1000344a:	43da      	mvns	r2, r3
1000344c:	4b24      	ldr	r3, [pc, #144]	; (100034e0 <SYSTIMER_lTimerHandler+0xc8>)
1000344e:	681b      	ldr	r3, [r3, #0]
10003450:	401a      	ands	r2, r3
10003452:	4b23      	ldr	r3, [pc, #140]	; (100034e0 <SYSTIMER_lTimerHandler+0xc8>)
10003454:	601a      	str	r2, [r3, #0]
10003456:	e034      	b.n	100034c2 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
10003458:	687b      	ldr	r3, [r7, #4]
1000345a:	7b1b      	ldrb	r3, [r3, #12]
1000345c:	2b00      	cmp	r3, #0
1000345e:	d112      	bne.n	10003486 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
10003460:	687b      	ldr	r3, [r7, #4]
10003462:	7b5b      	ldrb	r3, [r3, #13]
10003464:	2b01      	cmp	r3, #1
10003466:	d12c      	bne.n	100034c2 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
10003468:	687b      	ldr	r3, [r7, #4]
1000346a:	695b      	ldr	r3, [r3, #20]
1000346c:	1c18      	adds	r0, r3, #0
1000346e:	f7ff ff75 	bl	1000335c <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
10003472:	687b      	ldr	r3, [r7, #4]
10003474:	2202      	movs	r2, #2
10003476:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
10003478:	687b      	ldr	r3, [r7, #4]
1000347a:	689a      	ldr	r2, [r3, #8]
1000347c:	687b      	ldr	r3, [r7, #4]
1000347e:	691b      	ldr	r3, [r3, #16]
10003480:	1c18      	adds	r0, r3, #0
10003482:	4790      	blx	r2
10003484:	e01d      	b.n	100034c2 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
10003486:	687b      	ldr	r3, [r7, #4]
10003488:	7b1b      	ldrb	r3, [r3, #12]
1000348a:	2b01      	cmp	r3, #1
1000348c:	d118      	bne.n	100034c0 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
1000348e:	687b      	ldr	r3, [r7, #4]
10003490:	7b5b      	ldrb	r3, [r3, #13]
10003492:	2b01      	cmp	r3, #1
10003494:	d115      	bne.n	100034c2 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
10003496:	687b      	ldr	r3, [r7, #4]
10003498:	695b      	ldr	r3, [r3, #20]
1000349a:	1c18      	adds	r0, r3, #0
1000349c:	f7ff ff5e 	bl	1000335c <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
100034a0:	687b      	ldr	r3, [r7, #4]
100034a2:	69da      	ldr	r2, [r3, #28]
100034a4:	687b      	ldr	r3, [r7, #4]
100034a6:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
100034a8:	687b      	ldr	r3, [r7, #4]
100034aa:	695b      	ldr	r3, [r3, #20]
100034ac:	1c18      	adds	r0, r3, #0
100034ae:	f7ff fe71 	bl	10003194 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
100034b2:	687b      	ldr	r3, [r7, #4]
100034b4:	689a      	ldr	r2, [r3, #8]
100034b6:	687b      	ldr	r3, [r7, #4]
100034b8:	691b      	ldr	r3, [r3, #16]
100034ba:	1c18      	adds	r0, r3, #0
100034bc:	4790      	blx	r2
100034be:	e000      	b.n	100034c2 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
100034c0:	e009      	b.n	100034d6 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
100034c2:	4b06      	ldr	r3, [pc, #24]	; (100034dc <SYSTIMER_lTimerHandler+0xc4>)
100034c4:	681b      	ldr	r3, [r3, #0]
100034c6:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
100034c8:	687b      	ldr	r3, [r7, #4]
100034ca:	2b00      	cmp	r3, #0
100034cc:	d003      	beq.n	100034d6 <SYSTIMER_lTimerHandler+0xbe>
100034ce:	687b      	ldr	r3, [r7, #4]
100034d0:	699b      	ldr	r3, [r3, #24]
100034d2:	2b00      	cmp	r3, #0
100034d4:	d0a7      	beq.n	10003426 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
100034d6:	46bd      	mov	sp, r7
100034d8:	b002      	add	sp, #8
100034da:	bd80      	pop	{r7, pc}
100034dc:	2000097c 	.word	0x2000097c
100034e0:	20000980 	.word	0x20000980

100034e4 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
100034e4:	b580      	push	{r7, lr}
100034e6:	b082      	sub	sp, #8
100034e8:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
100034ea:	4b0e      	ldr	r3, [pc, #56]	; (10003524 <SysTick_Handler+0x40>)
100034ec:	681b      	ldr	r3, [r3, #0]
100034ee:	607b      	str	r3, [r7, #4]
  g_systick_count++;
100034f0:	4b0d      	ldr	r3, [pc, #52]	; (10003528 <SysTick_Handler+0x44>)
100034f2:	681b      	ldr	r3, [r3, #0]
100034f4:	1c5a      	adds	r2, r3, #1
100034f6:	4b0c      	ldr	r3, [pc, #48]	; (10003528 <SysTick_Handler+0x44>)
100034f8:	601a      	str	r2, [r3, #0]

  if (NULL != object_ptr)
100034fa:	687b      	ldr	r3, [r7, #4]
100034fc:	2b00      	cmp	r3, #0
100034fe:	d00e      	beq.n	1000351e <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
10003500:	687b      	ldr	r3, [r7, #4]
10003502:	699b      	ldr	r3, [r3, #24]
10003504:	2b01      	cmp	r3, #1
10003506:	d905      	bls.n	10003514 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
10003508:	687b      	ldr	r3, [r7, #4]
1000350a:	699b      	ldr	r3, [r3, #24]
1000350c:	1e5a      	subs	r2, r3, #1
1000350e:	687b      	ldr	r3, [r7, #4]
10003510:	619a      	str	r2, [r3, #24]
10003512:	e004      	b.n	1000351e <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
10003514:	687b      	ldr	r3, [r7, #4]
10003516:	2200      	movs	r2, #0
10003518:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
1000351a:	f7ff ff7d 	bl	10003418 <SYSTIMER_lTimerHandler>
    }
  }
}
1000351e:	46bd      	mov	sp, r7
10003520:	b002      	add	sp, #8
10003522:	bd80      	pop	{r7, pc}
10003524:	2000097c 	.word	0x2000097c
10003528:	20000984 	.word	0x20000984

1000352c <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
1000352c:	b580      	push	{r7, lr}
1000352e:	b084      	sub	sp, #16
10003530:	af00      	add	r7, sp, #0
10003532:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
10003534:	230f      	movs	r3, #15
10003536:	18fb      	adds	r3, r7, r3
10003538:	2200      	movs	r2, #0
1000353a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
1000353c:	687b      	ldr	r3, [r7, #4]
1000353e:	781b      	ldrb	r3, [r3, #0]
10003540:	2201      	movs	r2, #1
10003542:	4053      	eors	r3, r2
10003544:	b2db      	uxtb	r3, r3
10003546:	2b00      	cmp	r3, #0
10003548:	d020      	beq.n	1000358c <SYSTIMER_Init+0x60>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
1000354a:	4b14      	ldr	r3, [pc, #80]	; (1000359c <SYSTIMER_Init+0x70>)
1000354c:	2200      	movs	r2, #0
1000354e:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
10003550:	23f0      	movs	r3, #240	; 0xf0
10003552:	005b      	lsls	r3, r3, #1
10003554:	1c18      	adds	r0, r3, #0
10003556:	f7ff fdf9 	bl	1000314c <SysTick_Config>
1000355a:	1c02      	adds	r2, r0, #0
1000355c:	230f      	movs	r3, #15
1000355e:	18fb      	adds	r3, r7, r3
10003560:	701a      	strb	r2, [r3, #0]

    if (SYSTIMER_STATUS_FAILURE == status)
10003562:	230f      	movs	r3, #15
10003564:	18fb      	adds	r3, r7, r3
10003566:	781b      	ldrb	r3, [r3, #0]
10003568:	2b01      	cmp	r3, #1
1000356a:	d00f      	beq.n	1000358c <SYSTIMER_Init+0x60>
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
1000356c:	2301      	movs	r3, #1
1000356e:	425b      	negs	r3, r3
10003570:	1c18      	adds	r0, r3, #0
10003572:	2103      	movs	r1, #3
10003574:	f7ff fd80 	bl	10003078 <__NVIC_SetPriority>
#endif      
      g_timer_tracker = 0U;
10003578:	4b09      	ldr	r3, [pc, #36]	; (100035a0 <SYSTIMER_Init+0x74>)
1000357a:	2200      	movs	r2, #0
1000357c:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
1000357e:	687b      	ldr	r3, [r7, #4]
10003580:	2201      	movs	r2, #1
10003582:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
10003584:	230f      	movs	r3, #15
10003586:	18fb      	adds	r3, r7, r3
10003588:	2200      	movs	r2, #0
1000358a:	701a      	strb	r2, [r3, #0]
    }
  }

  return (status);
1000358c:	230f      	movs	r3, #15
1000358e:	18fb      	adds	r3, r7, r3
10003590:	781b      	ldrb	r3, [r3, #0]
}
10003592:	1c18      	adds	r0, r3, #0
10003594:	46bd      	mov	sp, r7
10003596:	b004      	add	sp, #16
10003598:	bd80      	pop	{r7, pc}
1000359a:	46c0      	nop			; (mov r8, r8)
1000359c:	2000097c 	.word	0x2000097c
100035a0:	20000980 	.word	0x20000980

100035a4 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
100035a4:	b580      	push	{r7, lr}
100035a6:	b082      	sub	sp, #8
100035a8:	af00      	add	r7, sp, #0
100035aa:	6078      	str	r0, [r7, #4]
100035ac:	1c0a      	adds	r2, r1, #0
100035ae:	1cfb      	adds	r3, r7, #3
100035b0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1 << slice_number);
100035b2:	1cfb      	adds	r3, r7, #3
100035b4:	781b      	ldrb	r3, [r3, #0]
100035b6:	2201      	movs	r2, #1
100035b8:	409a      	lsls	r2, r3
100035ba:	687b      	ldr	r3, [r7, #4]
100035bc:	60da      	str	r2, [r3, #12]
}
100035be:	46bd      	mov	sp, r7
100035c0:	b002      	add	sp, #8
100035c2:	bd80      	pop	{r7, pc}

100035c4 <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
100035c4:	b580      	push	{r7, lr}
100035c6:	b082      	sub	sp, #8
100035c8:	af00      	add	r7, sp, #0
100035ca:	6078      	str	r0, [r7, #4]
100035cc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
100035ce:	687b      	ldr	r3, [r7, #4]
100035d0:	695a      	ldr	r2, [r3, #20]
100035d2:	683b      	ldr	r3, [r7, #0]
100035d4:	045b      	lsls	r3, r3, #17
100035d6:	431a      	orrs	r2, r3
100035d8:	687b      	ldr	r3, [r7, #4]
100035da:	615a      	str	r2, [r3, #20]
}
100035dc:	46bd      	mov	sp, r7
100035de:	b002      	add	sp, #8
100035e0:	bd80      	pop	{r7, pc}
100035e2:	46c0      	nop			; (mov r8, r8)

100035e4 <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
100035e4:	b580      	push	{r7, lr}
100035e6:	b082      	sub	sp, #8
100035e8:	af00      	add	r7, sp, #0
100035ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
100035ec:	687b      	ldr	r3, [r7, #4]
100035ee:	2201      	movs	r2, #1
100035f0:	60da      	str	r2, [r3, #12]
}
100035f2:	46bd      	mov	sp, r7
100035f4:	b002      	add	sp, #8
100035f6:	bd80      	pop	{r7, pc}

100035f8 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
100035f8:	b580      	push	{r7, lr}
100035fa:	b082      	sub	sp, #8
100035fc:	af00      	add	r7, sp, #0
100035fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
10003600:	687b      	ldr	r3, [r7, #4]
10003602:	2201      	movs	r2, #1
10003604:	611a      	str	r2, [r3, #16]
}
10003606:	46bd      	mov	sp, r7
10003608:	b002      	add	sp, #8
1000360a:	bd80      	pop	{r7, pc}

1000360c <XMC_CCU8_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
{
1000360c:	b580      	push	{r7, lr}
1000360e:	b082      	sub	sp, #8
10003610:	af00      	add	r7, sp, #0
10003612:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
10003614:	687b      	ldr	r3, [r7, #4]
10003616:	2202      	movs	r2, #2
10003618:	611a      	str	r2, [r3, #16]
}
1000361a:	46bd      	mov	sp, r7
1000361c:	b002      	add	sp, #8
1000361e:	bd80      	pop	{r7, pc}

10003620 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10003620:	b580      	push	{r7, lr}
10003622:	b082      	sub	sp, #8
10003624:	af00      	add	r7, sp, #0
10003626:	6078      	str	r0, [r7, #4]
10003628:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
1000362a:	687b      	ldr	r3, [r7, #4]
1000362c:	683a      	ldr	r2, [r7, #0]
1000362e:	611a      	str	r2, [r3, #16]
}
10003630:	46bd      	mov	sp, r7
10003632:	b002      	add	sp, #8
10003634:	bd80      	pop	{r7, pc}
10003636:	46c0      	nop			; (mov r8, r8)

10003638 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR>
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
10003638:	b580      	push	{r7, lr}
1000363a:	b082      	sub	sp, #8
1000363c:	af00      	add	r7, sp, #0
1000363e:	6078      	str	r0, [r7, #4]
10003640:	1c0a      	adds	r2, r1, #0
10003642:	1cfb      	adds	r3, r7, #3
10003644:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
10003646:	687b      	ldr	r3, [r7, #4]
10003648:	22a4      	movs	r2, #164	; 0xa4
1000364a:	589a      	ldr	r2, [r3, r2]
1000364c:	1cfb      	adds	r3, r7, #3
1000364e:	781b      	ldrb	r3, [r3, #0]
10003650:	2101      	movs	r1, #1
10003652:	4099      	lsls	r1, r3
10003654:	1c0b      	adds	r3, r1, #0
10003656:	431a      	orrs	r2, r3
10003658:	687b      	ldr	r3, [r7, #4]
1000365a:	21a4      	movs	r1, #164	; 0xa4
1000365c:	505a      	str	r2, [r3, r1]
}
1000365e:	46bd      	mov	sp, r7
10003660:	b002      	add	sp, #8
10003662:	bd80      	pop	{r7, pc}

10003664 <XMC_CCU8_SLICE_EnableCascadedShadowTransfer>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_EnableShadowTransfer(), XMC_CCU8_SLICE_DisableCascadedShadowTransfer()<BR>.
 * @note Not available for XMC4500 series
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableCascadedShadowTransfer(XMC_CCU8_SLICE_t *const slice)
{
10003664:	b580      	push	{r7, lr}
10003666:	b082      	sub	sp, #8
10003668:	af00      	add	r7, sp, #0
1000366a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableCascadedShadowTransfer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC |= (uint32_t) CCU8_CC8_STC_CSE_Msk;
1000366c:	687b      	ldr	r3, [r7, #4]
1000366e:	22b4      	movs	r2, #180	; 0xb4
10003670:	589b      	ldr	r3, [r3, r2]
10003672:	2201      	movs	r2, #1
10003674:	431a      	orrs	r2, r3
10003676:	687b      	ldr	r3, [r7, #4]
10003678:	21b4      	movs	r1, #180	; 0xb4
1000367a:	505a      	str	r2, [r3, r1]
}
1000367c:	46bd      	mov	sp, r7
1000367e:	b002      	add	sp, #8
10003680:	bd80      	pop	{r7, pc}
10003682:	46c0      	nop			; (mov r8, r8)

10003684 <XMC_CCU8_SLICE_SetShadowTransferMode>:
 * XMC_CCU8_EnableShadowTransfer()<BR>
 * @note Not available for XMC4500 series
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
10003684:	b580      	push	{r7, lr}
10003686:	b082      	sub	sp, #8
10003688:	af00      	add	r7, sp, #0
1000368a:	6078      	str	r0, [r7, #4]
1000368c:	1c0a      	adds	r2, r1, #0
1000368e:	1cfb      	adds	r3, r7, #3
10003690:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & (uint32_t)~CCU8_CC8_STC_STM_Msk) |
10003692:	687b      	ldr	r3, [r7, #4]
10003694:	22b4      	movs	r2, #180	; 0xb4
10003696:	589b      	ldr	r3, [r3, r2]
10003698:	2206      	movs	r2, #6
1000369a:	4393      	bics	r3, r2
1000369c:	1c1a      	adds	r2, r3, #0
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
1000369e:	1cfb      	adds	r3, r7, #3
100036a0:	781b      	ldrb	r3, [r3, #0]
100036a2:	005b      	lsls	r3, r3, #1
100036a4:	1c19      	adds	r1, r3, #0
100036a6:	2306      	movs	r3, #6
100036a8:	400b      	ands	r3, r1
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & (uint32_t)~CCU8_CC8_STC_STM_Msk) |
100036aa:	431a      	orrs	r2, r3
100036ac:	687b      	ldr	r3, [r7, #4]
100036ae:	21b4      	movs	r1, #180	; 0xb4
100036b0:	505a      	str	r2, [r3, r1]
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
}
100036b2:	46bd      	mov	sp, r7
100036b4:	b002      	add	sp, #8
100036b6:	bd80      	pop	{r7, pc}

100036b8 <XMC_CCU8_SLICE_WriteImmediateAfterShadowTransfer>:
* XMC_CCU8_EnableShadowTransfer()<BR>
* @note Only available for XMC1400 series
*/
__STATIC_INLINE void XMC_CCU8_SLICE_WriteImmediateAfterShadowTransfer(XMC_CCU8_SLICE_t *const slice,
    const uint32_t immediate_write)
{
100036b8:	b580      	push	{r7, lr}
100036ba:	b082      	sub	sp, #8
100036bc:	af00      	add	r7, sp, #0
100036be:	6078      	str	r0, [r7, #4]
100036c0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_WriteImmediateAfterShadowTransfer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC |= immediate_write;
100036c2:	687b      	ldr	r3, [r7, #4]
100036c4:	22b4      	movs	r2, #180	; 0xb4
100036c6:	589a      	ldr	r2, [r3, r2]
100036c8:	683b      	ldr	r3, [r7, #0]
100036ca:	431a      	orrs	r2, r3
100036cc:	687b      	ldr	r3, [r7, #4]
100036ce:	21b4      	movs	r1, #180	; 0xb4
100036d0:	505a      	str	r2, [r3, r1]
}
100036d2:	46bd      	mov	sp, r7
100036d4:	b002      	add	sp, #8
100036d6:	bd80      	pop	{r7, pc}

100036d8 <XMC_CCU8_SLICE_EnableAutomaticShadowTransferRequest>:
*  XMC_CCU8_SLICE_DisableAutomaticShadowTransferRequest().
*  @note Only available for XMC1400 series
*/
__STATIC_INLINE void XMC_CCU8_SLICE_EnableAutomaticShadowTransferRequest(XMC_CCU8_SLICE_t *const slice,
    const uint32_t automatic_shadow_transfer)
{
100036d8:	b580      	push	{r7, lr}
100036da:	b082      	sub	sp, #8
100036dc:	af00      	add	r7, sp, #0
100036de:	6078      	str	r0, [r7, #4]
100036e0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableAutomaticShadowTransferRequest:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC |= automatic_shadow_transfer;
100036e2:	687b      	ldr	r3, [r7, #4]
100036e4:	22b4      	movs	r2, #180	; 0xb4
100036e6:	589a      	ldr	r2, [r3, r2]
100036e8:	683b      	ldr	r3, [r7, #0]
100036ea:	431a      	orrs	r2, r3
100036ec:	687b      	ldr	r3, [r7, #4]
100036ee:	21b4      	movs	r1, #180	; 0xb4
100036f0:	505a      	str	r2, [r3, r1]
}
100036f2:	46bd      	mov	sp, r7
100036f4:	b002      	add	sp, #8
100036f6:	bd80      	pop	{r7, pc}

100036f8 <PWM_CCU8_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU8_STATUS_t PWM_CCU8_Init(PWM_CCU8_t* handle_ptr)
{
100036f8:	b590      	push	{r4, r7, lr}
100036fa:	b087      	sub	sp, #28
100036fc:	af00      	add	r7, sp, #0
100036fe:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;
  GLOBAL_CCU8_STATUS_t status_ccu8_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU8_STATUS_FAILURE;
10003700:	2317      	movs	r3, #23
10003702:	18fb      	adds	r3, r7, r3
10003704:	2201      	movs	r2, #1
10003706:	701a      	strb	r2, [r3, #0]
  status_ccu8_global = GLOBAL_CCU8_STATUS_FAILURE;
10003708:	2316      	movs	r3, #22
1000370a:	18fb      	adds	r3, r7, r3
1000370c:	2201      	movs	r2, #1
1000370e:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU8_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU8_STATE_UNINITIALIZED == handle_ptr->state)
10003710:	687b      	ldr	r3, [r7, #4]
10003712:	7f1b      	ldrb	r3, [r3, #28]
10003714:	2b00      	cmp	r3, #0
10003716:	d000      	beq.n	1000371a <PWM_CCU8_Init+0x22>
10003718:	e0cc      	b.n	100038b4 <PWM_CCU8_Init+0x1bc>
  {
    /* Initialize consumed Apps */
    status_ccu8_global = GLOBAL_CCU8_Init(handle_ptr->config_ptr->global_ccu8_handle);
1000371a:	687b      	ldr	r3, [r7, #4]
1000371c:	681b      	ldr	r3, [r3, #0]
1000371e:	2298      	movs	r2, #152	; 0x98
10003720:	589b      	ldr	r3, [r3, r2]
10003722:	2216      	movs	r2, #22
10003724:	18bc      	adds	r4, r7, r2
10003726:	1c18      	adds	r0, r3, #0
10003728:	f001 f994 	bl	10004a54 <GLOBAL_CCU8_Init>
1000372c:	1c03      	adds	r3, r0, #0
1000372e:	7023      	strb	r3, [r4, #0]

    /* Initialize CCU8x_CC8y slice */
    if (GLOBAL_CCU8_STATUS_SUCCESS == status_ccu8_global)
10003730:	2316      	movs	r3, #22
10003732:	18fb      	adds	r3, r7, r3
10003734:	781b      	ldrb	r3, [r3, #0]
10003736:	2b00      	cmp	r3, #0
10003738:	d000      	beq.n	1000373c <PWM_CCU8_Init+0x44>
1000373a:	e0b7      	b.n	100038ac <PWM_CCU8_Init+0x1b4>
    {
      XMC_DEBUG("PWM_CCU8_Init:Initilizing slice");

      /* Configure CCU8x_CC8y slice as timer */
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
1000373c:	687b      	ldr	r3, [r7, #4]
1000373e:	689a      	ldr	r2, [r3, #8]
10003740:	687b      	ldr	r3, [r7, #4]
10003742:	681b      	ldr	r3, [r3, #0]
10003744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10003746:	1c10      	adds	r0, r2, #0
10003748:	1c19      	adds	r1, r3, #0
1000374a:	f7fe fc1d 	bl	10001f88 <XMC_CCU8_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);
1000374e:	687b      	ldr	r3, [r7, #4]
10003750:	689a      	ldr	r2, [r3, #8]
10003752:	687b      	ldr	r3, [r7, #4]
10003754:	681b      	ldr	r3, [r3, #0]
10003756:	885b      	ldrh	r3, [r3, #2]
10003758:	1c10      	adds	r0, r2, #0
1000375a:	1c19      	adds	r1, r3, #0
1000375c:	f7fe ff16 	bl	1000258c <XMC_CCU8_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
10003760:	687b      	ldr	r3, [r7, #4]
10003762:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
10003764:	687b      	ldr	r3, [r7, #4]
10003766:	681b      	ldr	r3, [r3, #0]
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
10003768:	889b      	ldrh	r3, [r3, #4]
1000376a:	1c10      	adds	r0, r2, #0
1000376c:	2100      	movs	r1, #0
1000376e:	1c1a      	adds	r2, r3, #0
10003770:	f7fe ff1a 	bl	100025a8 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
10003774:	687b      	ldr	r3, [r7, #4]
10003776:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);
10003778:	687b      	ldr	r3, [r7, #4]
1000377a:	681b      	ldr	r3, [r3, #0]

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
1000377c:	88db      	ldrh	r3, [r3, #6]
1000377e:	1c10      	adds	r0, r2, #0
10003780:	2101      	movs	r1, #1
10003782:	1c1a      	adds	r2, r3, #0
10003784:	f7fe ff10 	bl	100025a8 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
10003788:	687b      	ldr	r3, [r7, #4]
1000378a:	681b      	ldr	r3, [r3, #0]
1000378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000378e:	78db      	ldrb	r3, [r3, #3]
10003790:	2202      	movs	r2, #2
10003792:	4013      	ands	r3, r2
10003794:	b2db      	uxtb	r3, r3
10003796:	2b00      	cmp	r3, #0
10003798:	d108      	bne.n	100037ac <PWM_CCU8_Init+0xb4>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
1000379a:	687b      	ldr	r3, [r7, #4]
1000379c:	681b      	ldr	r3, [r3, #0]
1000379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100037a0:	78db      	ldrb	r3, [r3, #3]
100037a2:	2204      	movs	r2, #4
100037a4:	4013      	ands	r3, r2
100037a6:	b2db      	uxtb	r3, r3
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
100037a8:	2b00      	cmp	r3, #0
100037aa:	d008      	beq.n	100037be <PWM_CCU8_Init+0xc6>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
100037ac:	687b      	ldr	r3, [r7, #4]
100037ae:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
100037b0:	687b      	ldr	r3, [r7, #4]
100037b2:	681b      	ldr	r3, [r3, #0]
100037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
100037b6:	1c10      	adds	r0, r2, #0
100037b8:	1c19      	adds	r1, r3, #0
100037ba:	f7fe fc1d 	bl	10001ff8 <XMC_CCU8_SetMultiChannelShadowTransferMode>
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
      }

#if (UC_SERIES != XMC45) /*STC register not available on XMC45xx devices */
      XMC_CCU8_SLICE_SetShadowTransferMode(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->shadow_transfer_mode);
100037be:	687b      	ldr	r3, [r7, #4]
100037c0:	6899      	ldr	r1, [r3, #8]
100037c2:	687b      	ldr	r3, [r7, #4]
100037c4:	681b      	ldr	r3, [r3, #0]
100037c6:	2244      	movs	r2, #68	; 0x44
100037c8:	5c9b      	ldrb	r3, [r3, r2]
100037ca:	1c08      	adds	r0, r1, #0
100037cc:	1c19      	adds	r1, r3, #0
100037ce:	f7ff ff59 	bl	10003684 <XMC_CCU8_SLICE_SetShadowTransferMode>
#endif

#if (UC_SERIES == XMC14) /*below feature available in XMC14xx devices */
      XMC_CCU8_SLICE_WriteImmediateAfterShadowTransfer(handle_ptr->ccu8_slice_ptr,
100037d2:	687b      	ldr	r3, [r7, #4]
100037d4:	689a      	ldr	r2, [r3, #8]
                                                       handle_ptr->config_ptr->immediate_write);
100037d6:	687b      	ldr	r3, [r7, #4]
100037d8:	681b      	ldr	r3, [r3, #0]
#if (UC_SERIES != XMC45) /*STC register not available on XMC45xx devices */
      XMC_CCU8_SLICE_SetShadowTransferMode(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->shadow_transfer_mode);
#endif

#if (UC_SERIES == XMC14) /*below feature available in XMC14xx devices */
      XMC_CCU8_SLICE_WriteImmediateAfterShadowTransfer(handle_ptr->ccu8_slice_ptr,
100037da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100037dc:	1c10      	adds	r0, r2, #0
100037de:	1c19      	adds	r1, r3, #0
100037e0:	f7ff ff6a 	bl	100036b8 <XMC_CCU8_SLICE_WriteImmediateAfterShadowTransfer>
                                                       handle_ptr->config_ptr->immediate_write);
      XMC_CCU8_SLICE_EnableAutomaticShadowTransferRequest(handle_ptr->ccu8_slice_ptr,
100037e4:	687b      	ldr	r3, [r7, #4]
100037e6:	689a      	ldr	r2, [r3, #8]
                                                          handle_ptr->config_ptr->automatic_shadow_transfer);
100037e8:	687b      	ldr	r3, [r7, #4]
100037ea:	681b      	ldr	r3, [r3, #0]
#endif

#if (UC_SERIES == XMC14) /*below feature available in XMC14xx devices */
      XMC_CCU8_SLICE_WriteImmediateAfterShadowTransfer(handle_ptr->ccu8_slice_ptr,
                                                       handle_ptr->config_ptr->immediate_write);
      XMC_CCU8_SLICE_EnableAutomaticShadowTransferRequest(handle_ptr->ccu8_slice_ptr,
100037ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100037ee:	1c10      	adds	r0, r2, #0
100037f0:	1c19      	adds	r1, r3, #0
100037f2:	f7ff ff71 	bl	100036d8 <XMC_CCU8_SLICE_EnableAutomaticShadowTransferRequest>
                                                          handle_ptr->config_ptr->automatic_shadow_transfer);
      if((bool)true == handle_ptr->config_ptr->cascaded_shadow_txfr_enable)
100037f6:	687b      	ldr	r3, [r7, #4]
100037f8:	681b      	ldr	r3, [r3, #0]
100037fa:	2250      	movs	r2, #80	; 0x50
100037fc:	5c9b      	ldrb	r3, [r3, r2]
100037fe:	2b00      	cmp	r3, #0
10003800:	d004      	beq.n	1000380c <PWM_CCU8_Init+0x114>
      {
        XMC_CCU8_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu8_slice_ptr);
10003802:	687b      	ldr	r3, [r7, #4]
10003804:	689b      	ldr	r3, [r3, #8]
10003806:	1c18      	adds	r0, r3, #0
10003808:	f7ff ff2c 	bl	10003664 <XMC_CCU8_SLICE_EnableCascadedShadowTransfer>
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
1000380c:	687b      	ldr	r3, [r7, #4]
1000380e:	685a      	ldr	r2, [r3, #4]
10003810:	687b      	ldr	r3, [r7, #4]
10003812:	691b      	ldr	r3, [r3, #16]
10003814:	1c10      	adds	r0, r2, #0
10003816:	1c19      	adds	r1, r3, #0
10003818:	f7ff ff02 	bl	10003620 <XMC_CCU8_EnableShadowTransfer>
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->dither_shadow_txfr_msk);
1000381c:	687b      	ldr	r3, [r7, #4]
1000381e:	685a      	ldr	r2, [r3, #4]
10003820:	687b      	ldr	r3, [r7, #4]
10003822:	695b      	ldr	r3, [r3, #20]
10003824:	1c10      	adds	r0, r2, #0
10003826:	1c19      	adds	r1, r3, #0
10003828:	f7ff fefa 	bl	10003620 <XMC_CCU8_EnableShadowTransfer>

      XMC_CCU8_SLICE_DeadTimeInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->dt_config_ptr);
1000382c:	687b      	ldr	r3, [r7, #4]
1000382e:	689a      	ldr	r2, [r3, #8]
10003830:	687b      	ldr	r3, [r7, #4]
10003832:	681b      	ldr	r3, [r3, #0]
10003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003836:	1c10      	adds	r0, r2, #0
10003838:	1c19      	adds	r1, r3, #0
1000383a:	f7fe ff29 	bl	10002690 <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure events */
      PWM_CCU8_lConfigure_Events(handle_ptr);
1000383e:	687b      	ldr	r3, [r7, #4]
10003840:	1c18      	adds	r0, r3, #0
10003842:	f000 f961 	bl	10003b08 <PWM_CCU8_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU8_lInit_Interrupt(handle_ptr);
10003846:	687b      	ldr	r3, [r7, #4]
10003848:	1c18      	adds	r0, r3, #0
1000384a:	f000 f83f 	bl	100038cc <PWM_CCU8_lInit_Interrupt>

      /*Initializes the GPIO*/
      PWM_CCU8_lInit_GPIO(handle_ptr);
1000384e:	687b      	ldr	r3, [r7, #4]
10003850:	1c18      	adds	r0, r3, #0
10003852:	f000 f8ff 	bl	10003a54 <PWM_CCU8_lInit_GPIO>

      frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
10003856:	687b      	ldr	r3, [r7, #4]
10003858:	681b      	ldr	r3, [r3, #0]
1000385a:	2298      	movs	r2, #152	; 0x98
1000385c:	589b      	ldr	r3, [r3, r2]
1000385e:	681b      	ldr	r3, [r3, #0]
10003860:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->prescaler_initval;
10003862:	687b      	ldr	r3, [r7, #4]
10003864:	681b      	ldr	r3, [r3, #0]
10003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10003868:	7b1b      	ldrb	r3, [r3, #12]
1000386a:	071b      	lsls	r3, r3, #28
1000386c:	0f1b      	lsrs	r3, r3, #28
1000386e:	b2db      	uxtb	r3, r3
10003870:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
10003872:	68fb      	ldr	r3, [r7, #12]
10003874:	693a      	ldr	r2, [r7, #16]
10003876:	40da      	lsrs	r2, r3
10003878:	1c13      	adds	r3, r2, #0
1000387a:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
1000387c:	687b      	ldr	r3, [r7, #4]
1000387e:	693a      	ldr	r2, [r7, #16]
10003880:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU8_STATE_INITIALIZED;
10003882:	687b      	ldr	r3, [r7, #4]
10003884:	2201      	movs	r2, #1
10003886:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU8_STATUS_SUCCESS;
10003888:	2317      	movs	r3, #23
1000388a:	18fb      	adds	r3, r7, r3
1000388c:	2200      	movs	r2, #0
1000388e:	701a      	strb	r2, [r3, #0]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
10003890:	687b      	ldr	r3, [r7, #4]
10003892:	681b      	ldr	r3, [r3, #0]
10003894:	781b      	ldrb	r3, [r3, #0]
10003896:	2b00      	cmp	r3, #0
10003898:	d010      	beq.n	100038bc <PWM_CCU8_Init+0x1c4>
      {
        status = PWM_CCU8_Start(handle_ptr);
1000389a:	2317      	movs	r3, #23
1000389c:	18fc      	adds	r4, r7, r3
1000389e:	687b      	ldr	r3, [r7, #4]
100038a0:	1c18      	adds	r0, r3, #0
100038a2:	f000 fa1d 	bl	10003ce0 <PWM_CCU8_Start>
100038a6:	1c03      	adds	r3, r0, #0
100038a8:	7023      	strb	r3, [r4, #0]
100038aa:	e007      	b.n	100038bc <PWM_CCU8_Init+0x1c4>
      }

    }
    else
    {
      handle_ptr->state = PWM_CCU8_STATE_UNINITIALIZED;
100038ac:	687b      	ldr	r3, [r7, #4]
100038ae:	2200      	movs	r2, #0
100038b0:	771a      	strb	r2, [r3, #28]
100038b2:	e003      	b.n	100038bc <PWM_CCU8_Init+0x1c4>
    }

  }
  else
  {
    status = PWM_CCU8_STATUS_ALREADY_INITIALIZED;
100038b4:	2317      	movs	r3, #23
100038b6:	18fb      	adds	r3, r7, r3
100038b8:	2202      	movs	r2, #2
100038ba:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU8_Init:PWM_CCU8_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
100038bc:	2317      	movs	r3, #23
100038be:	18fb      	adds	r3, r7, r3
100038c0:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU8_Init() api */
100038c2:	1c18      	adds	r0, r3, #0
100038c4:	46bd      	mov	sp, r7
100038c6:	b007      	add	sp, #28
100038c8:	bd90      	pop	{r4, r7, pc}
100038ca:	46c0      	nop			; (mov r8, r8)

100038cc <PWM_CCU8_lInit_Interrupt>:

static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{
100038cc:	b580      	push	{r7, lr}
100038ce:	b082      	sub	sp, #8
100038d0:	af00      	add	r7, sp, #0
100038d2:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
100038d4:	687b      	ldr	r3, [r7, #4]
100038d6:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_per_match);
100038d8:	687b      	ldr	r3, [r7, #4]
100038da:	681b      	ldr	r3, [r3, #0]
static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
100038dc:	7c5b      	ldrb	r3, [r3, #17]
100038de:	1c10      	adds	r0, r2, #0
100038e0:	2100      	movs	r1, #0
100038e2:	1c1a      	adds	r2, r3, #0
100038e4:	f7fe fe7c 	bl	100025e0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
100038e8:	687b      	ldr	r3, [r7, #4]
100038ea:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
100038ec:	687b      	ldr	r3, [r7, #4]
100038ee:	681b      	ldr	r3, [r3, #0]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
100038f0:	7c9b      	ldrb	r3, [r3, #18]
100038f2:	1c10      	adds	r0, r2, #0
100038f4:	2102      	movs	r1, #2
100038f6:	1c1a      	adds	r2, r3, #0
100038f8:	f7fe fe72 	bl	100025e0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
100038fc:	687b      	ldr	r3, [r7, #4]
100038fe:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
10003900:	687b      	ldr	r3, [r7, #4]
10003902:	681b      	ldr	r3, [r3, #0]

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
10003904:	7cdb      	ldrb	r3, [r3, #19]
10003906:	1c10      	adds	r0, r2, #0
10003908:	2103      	movs	r1, #3
1000390a:	1c1a      	adds	r2, r3, #0
1000390c:	f7fe fe68 	bl	100025e0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
10003910:	687b      	ldr	r3, [r7, #4]
10003912:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
10003914:	687b      	ldr	r3, [r7, #4]
10003916:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
10003918:	7d1b      	ldrb	r3, [r3, #20]
1000391a:	1c10      	adds	r0, r2, #0
1000391c:	2104      	movs	r1, #4
1000391e:	1c1a      	adds	r2, r3, #0
10003920:	f7fe fe5e 	bl	100025e0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
10003924:	687b      	ldr	r3, [r7, #4]
10003926:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
10003928:	687b      	ldr	r3, [r7, #4]
1000392a:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
1000392c:	7d5b      	ldrb	r3, [r3, #21]
1000392e:	1c10      	adds	r0, r2, #0
10003930:	2105      	movs	r1, #5
10003932:	1c1a      	adds	r2, r3, #0
10003934:	f7fe fe54 	bl	100025e0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
10003938:	687b      	ldr	r3, [r7, #4]
1000393a:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_one_match_down);
1000393c:	687b      	ldr	r3, [r7, #4]
1000393e:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
10003940:	7d9b      	ldrb	r3, [r3, #22]
10003942:	1c10      	adds	r0, r2, #0
10003944:	2101      	movs	r1, #1
10003946:	1c1a      	adds	r2, r3, #0
10003948:	f7fe fe4a 	bl	100025e0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
1000394c:	687b      	ldr	r3, [r7, #4]
1000394e:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e0);
10003950:	687b      	ldr	r3, [r7, #4]
10003952:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
10003954:	7ddb      	ldrb	r3, [r3, #23]
10003956:	1c10      	adds	r0, r2, #0
10003958:	2108      	movs	r1, #8
1000395a:	1c1a      	adds	r2, r3, #0
1000395c:	f7fe fe40 	bl	100025e0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
10003960:	687b      	ldr	r3, [r7, #4]
10003962:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e1);
10003964:	687b      	ldr	r3, [r7, #4]
10003966:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
10003968:	7e1b      	ldrb	r3, [r3, #24]
1000396a:	1c10      	adds	r0, r2, #0
1000396c:	2109      	movs	r1, #9
1000396e:	1c1a      	adds	r2, r3, #0
10003970:	f7fe fe36 	bl	100025e0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
10003974:	687b      	ldr	r3, [r7, #4]
10003976:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e2);
10003978:	687b      	ldr	r3, [r7, #4]
1000397a:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
1000397c:	7e5b      	ldrb	r3, [r3, #25]
1000397e:	1c10      	adds	r0, r2, #0
10003980:	210a      	movs	r1, #10
10003982:	1c1a      	adds	r2, r3, #0
10003984:	f7fe fe2c 	bl	100025e0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e2);

  if ((bool) true == handle_ptr->config_ptr->int_per_match)
10003988:	687b      	ldr	r3, [r7, #4]
1000398a:	681b      	ldr	r3, [r3, #0]
1000398c:	7a1b      	ldrb	r3, [r3, #8]
1000398e:	2b00      	cmp	r3, #0
10003990:	d005      	beq.n	1000399e <PWM_CCU8_lInit_Interrupt+0xd2>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt period match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
10003992:	687b      	ldr	r3, [r7, #4]
10003994:	689b      	ldr	r3, [r3, #8]
10003996:	1c18      	adds	r0, r3, #0
10003998:	2100      	movs	r1, #0
1000399a:	f7ff fe4d 	bl	10003638 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_up)
1000399e:	687b      	ldr	r3, [r7, #4]
100039a0:	681b      	ldr	r3, [r3, #0]
100039a2:	7a5b      	ldrb	r3, [r3, #9]
100039a4:	2b00      	cmp	r3, #0
100039a6:	d005      	beq.n	100039b4 <PWM_CCU8_lInit_Interrupt+0xe8>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
100039a8:	687b      	ldr	r3, [r7, #4]
100039aa:	689b      	ldr	r3, [r3, #8]
100039ac:	1c18      	adds	r0, r3, #0
100039ae:	2102      	movs	r1, #2
100039b0:	f7ff fe42 	bl	10003638 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_down)
100039b4:	687b      	ldr	r3, [r7, #4]
100039b6:	681b      	ldr	r3, [r3, #0]
100039b8:	7a9b      	ldrb	r3, [r3, #10]
100039ba:	2b00      	cmp	r3, #0
100039bc:	d005      	beq.n	100039ca <PWM_CCU8_lInit_Interrupt+0xfe>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1);
100039be:	687b      	ldr	r3, [r7, #4]
100039c0:	689b      	ldr	r3, [r3, #8]
100039c2:	1c18      	adds	r0, r3, #0
100039c4:	2103      	movs	r1, #3
100039c6:	f7ff fe37 	bl	10003638 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_up)
100039ca:	687b      	ldr	r3, [r7, #4]
100039cc:	681b      	ldr	r3, [r3, #0]
100039ce:	7adb      	ldrb	r3, [r3, #11]
100039d0:	2b00      	cmp	r3, #0
100039d2:	d005      	beq.n	100039e0 <PWM_CCU8_lInit_Interrupt+0x114>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
100039d4:	687b      	ldr	r3, [r7, #4]
100039d6:	689b      	ldr	r3, [r3, #8]
100039d8:	1c18      	adds	r0, r3, #0
100039da:	2104      	movs	r1, #4
100039dc:	f7ff fe2c 	bl	10003638 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_down)
100039e0:	687b      	ldr	r3, [r7, #4]
100039e2:	681b      	ldr	r3, [r3, #0]
100039e4:	7b1b      	ldrb	r3, [r3, #12]
100039e6:	2b00      	cmp	r3, #0
100039e8:	d005      	beq.n	100039f6 <PWM_CCU8_lInit_Interrupt+0x12a>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2);
100039ea:	687b      	ldr	r3, [r7, #4]
100039ec:	689b      	ldr	r3, [r3, #8]
100039ee:	1c18      	adds	r0, r3, #0
100039f0:	2105      	movs	r1, #5
100039f2:	f7ff fe21 	bl	10003638 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
100039f6:	687b      	ldr	r3, [r7, #4]
100039f8:	681b      	ldr	r3, [r3, #0]
100039fa:	7b5b      	ldrb	r3, [r3, #13]
100039fc:	2b00      	cmp	r3, #0
100039fe:	d005      	beq.n	10003a0c <PWM_CCU8_lInit_Interrupt+0x140>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt one match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
10003a00:	687b      	ldr	r3, [r7, #4]
10003a02:	689b      	ldr	r3, [r3, #8]
10003a04:	1c18      	adds	r0, r3, #0
10003a06:	2101      	movs	r1, #1
10003a08:	f7ff fe16 	bl	10003638 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
10003a0c:	687b      	ldr	r3, [r7, #4]
10003a0e:	681b      	ldr	r3, [r3, #0]
10003a10:	7b9b      	ldrb	r3, [r3, #14]
10003a12:	2b00      	cmp	r3, #0
10003a14:	d005      	beq.n	10003a22 <PWM_CCU8_lInit_Interrupt+0x156>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 0 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0);
10003a16:	687b      	ldr	r3, [r7, #4]
10003a18:	689b      	ldr	r3, [r3, #8]
10003a1a:	1c18      	adds	r0, r3, #0
10003a1c:	2108      	movs	r1, #8
10003a1e:	f7ff fe0b 	bl	10003638 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
10003a22:	687b      	ldr	r3, [r7, #4]
10003a24:	681b      	ldr	r3, [r3, #0]
10003a26:	7bdb      	ldrb	r3, [r3, #15]
10003a28:	2b00      	cmp	r3, #0
10003a2a:	d005      	beq.n	10003a38 <PWM_CCU8_lInit_Interrupt+0x16c>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 1 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1);
10003a2c:	687b      	ldr	r3, [r7, #4]
10003a2e:	689b      	ldr	r3, [r3, #8]
10003a30:	1c18      	adds	r0, r3, #0
10003a32:	2109      	movs	r1, #9
10003a34:	f7ff fe00 	bl	10003638 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
10003a38:	687b      	ldr	r3, [r7, #4]
10003a3a:	681b      	ldr	r3, [r3, #0]
10003a3c:	7c1b      	ldrb	r3, [r3, #16]
10003a3e:	2b00      	cmp	r3, #0
10003a40:	d005      	beq.n	10003a4e <PWM_CCU8_lInit_Interrupt+0x182>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 2 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
10003a42:	687b      	ldr	r3, [r7, #4]
10003a44:	689b      	ldr	r3, [r3, #8]
10003a46:	1c18      	adds	r0, r3, #0
10003a48:	210a      	movs	r1, #10
10003a4a:	f7ff fdf5 	bl	10003638 <XMC_CCU8_SLICE_EnableEvent>
  }
}
10003a4e:	46bd      	mov	sp, r7
10003a50:	b002      	add	sp, #8
10003a52:	bd80      	pop	{r7, pc}

10003a54 <PWM_CCU8_lInit_GPIO>:
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
10003a54:	b580      	push	{r7, lr}
10003a56:	b082      	sub	sp, #8
10003a58:	af00      	add	r7, sp, #0
10003a5a:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
10003a5c:	687b      	ldr	r3, [r7, #4]
10003a5e:	681b      	ldr	r3, [r3, #0]
10003a60:	2258      	movs	r2, #88	; 0x58
10003a62:	5c9b      	ldrb	r3, [r3, r2]
10003a64:	2b00      	cmp	r3, #0
10003a66:	d00e      	beq.n	10003a86 <PWM_CCU8_lInit_GPIO+0x32>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
10003a68:	687b      	ldr	r3, [r7, #4]
10003a6a:	681b      	ldr	r3, [r3, #0]
10003a6c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
10003a6e:	687b      	ldr	r3, [r7, #4]
10003a70:	681b      	ldr	r3, [r3, #0]
10003a72:	2260      	movs	r2, #96	; 0x60
10003a74:	5c9a      	ldrb	r2, [r3, r2]
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
10003a76:	687b      	ldr	r3, [r7, #4]
10003a78:	681b      	ldr	r3, [r3, #0]
}
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
10003a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10003a7c:	1c08      	adds	r0, r1, #0
10003a7e:	1c11      	adds	r1, r2, #0
10003a80:	1c1a      	adds	r2, r3, #0
10003a82:	f7fd fb81 	bl	10001188 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
10003a86:	687b      	ldr	r3, [r7, #4]
10003a88:	681b      	ldr	r3, [r3, #0]
10003a8a:	2268      	movs	r2, #104	; 0x68
10003a8c:	5c9b      	ldrb	r3, [r3, r2]
10003a8e:	2b00      	cmp	r3, #0
10003a90:	d00e      	beq.n	10003ab0 <PWM_CCU8_lInit_GPIO+0x5c>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
10003a92:	687b      	ldr	r3, [r7, #4]
10003a94:	681b      	ldr	r3, [r3, #0]
10003a96:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
10003a98:	687b      	ldr	r3, [r7, #4]
10003a9a:	681b      	ldr	r3, [r3, #0]
10003a9c:	2270      	movs	r2, #112	; 0x70
10003a9e:	5c9a      	ldrb	r2, [r3, r2]
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
10003aa0:	687b      	ldr	r3, [r7, #4]
10003aa2:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
10003aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10003aa6:	1c08      	adds	r0, r1, #0
10003aa8:	1c11      	adds	r1, r2, #0
10003aaa:	1c1a      	adds	r2, r3, #0
10003aac:	f7fd fb6c 	bl	10001188 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
10003ab0:	687b      	ldr	r3, [r7, #4]
10003ab2:	681b      	ldr	r3, [r3, #0]
10003ab4:	2278      	movs	r2, #120	; 0x78
10003ab6:	5c9b      	ldrb	r3, [r3, r2]
10003ab8:	2b00      	cmp	r3, #0
10003aba:	d00d      	beq.n	10003ad8 <PWM_CCU8_lInit_GPIO+0x84>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
10003abc:	687b      	ldr	r3, [r7, #4]
10003abe:	681b      	ldr	r3, [r3, #0]
10003ac0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
10003ac2:	687b      	ldr	r3, [r7, #4]
10003ac4:	681b      	ldr	r3, [r3, #0]
10003ac6:	2280      	movs	r2, #128	; 0x80
10003ac8:	5c99      	ldrb	r1, [r3, r2]
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
10003aca:	687b      	ldr	r3, [r7, #4]
10003acc:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
10003ace:	2284      	movs	r2, #132	; 0x84
10003ad0:	589b      	ldr	r3, [r3, r2]
10003ad2:	1c1a      	adds	r2, r3, #0
10003ad4:	f7fd fb58 	bl	10001188 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
10003ad8:	687b      	ldr	r3, [r7, #4]
10003ada:	681b      	ldr	r3, [r3, #0]
10003adc:	2288      	movs	r2, #136	; 0x88
10003ade:	5c9b      	ldrb	r3, [r3, r2]
10003ae0:	2b00      	cmp	r3, #0
10003ae2:	d00e      	beq.n	10003b02 <PWM_CCU8_lInit_GPIO+0xae>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
10003ae4:	687b      	ldr	r3, [r7, #4]
10003ae6:	681b      	ldr	r3, [r3, #0]
10003ae8:	228c      	movs	r2, #140	; 0x8c
10003aea:	5898      	ldr	r0, [r3, r2]
10003aec:	687b      	ldr	r3, [r7, #4]
10003aee:	681b      	ldr	r3, [r3, #0]
10003af0:	2290      	movs	r2, #144	; 0x90
10003af2:	5c99      	ldrb	r1, [r3, r2]
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
10003af4:	687b      	ldr	r3, [r7, #4]
10003af6:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
10003af8:	2294      	movs	r2, #148	; 0x94
10003afa:	589b      	ldr	r3, [r3, r2]
10003afc:	1c1a      	adds	r2, r3, #0
10003afe:	f7fd fb43 	bl	10001188 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
  }
}
10003b02:	46bd      	mov	sp, r7
10003b04:	b002      	add	sp, #8
10003b06:	bd80      	pop	{r7, pc}

10003b08 <PWM_CCU8_lConfigure_Events>:

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
10003b08:	b590      	push	{r4, r7, lr}
10003b0a:	b085      	sub	sp, #20
10003b0c:	af02      	add	r7, sp, #8
10003b0e:	6078      	str	r0, [r7, #4]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
10003b10:	687b      	ldr	r3, [r7, #4]
10003b12:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
10003b14:	687b      	ldr	r3, [r7, #4]
10003b16:	681b      	ldr	r3, [r3, #0]
}

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
10003b18:	69db      	ldr	r3, [r3, #28]
10003b1a:	1c10      	adds	r0, r2, #0
10003b1c:	2101      	movs	r1, #1
10003b1e:	1c1a      	adds	r2, r3, #0
10003b20:	f7fe fc9e 	bl	10002460 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
10003b24:	687b      	ldr	r3, [r7, #4]
10003b26:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
10003b28:	687b      	ldr	r3, [r7, #4]
10003b2a:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
10003b2c:	6a1b      	ldr	r3, [r3, #32]
10003b2e:	1c10      	adds	r0, r2, #0
10003b30:	2102      	movs	r1, #2
10003b32:	1c1a      	adds	r2, r3, #0
10003b34:	f7fe fc94 	bl	10002460 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
10003b38:	687b      	ldr	r3, [r7, #4]
10003b3a:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
10003b3c:	687b      	ldr	r3, [r7, #4]
10003b3e:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
10003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003b42:	1c10      	adds	r0, r2, #0
10003b44:	2103      	movs	r1, #3
10003b46:	1c1a      	adds	r2, r3, #0
10003b48:	f7fe fc8a 	bl	10002460 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
10003b4c:	687b      	ldr	r3, [r7, #4]
10003b4e:	681b      	ldr	r3, [r3, #0]
10003b50:	2228      	movs	r2, #40	; 0x28
10003b52:	5c9b      	ldrb	r3, [r3, r2]
10003b54:	2b00      	cmp	r3, #0
10003b56:	d00c      	beq.n	10003b72 <PWM_CCU8_lConfigure_Events+0x6a>
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
10003b58:	687b      	ldr	r3, [r7, #4]
10003b5a:	6898      	ldr	r0, [r3, #8]
10003b5c:	687b      	ldr	r3, [r7, #4]
10003b5e:	681b      	ldr	r3, [r3, #0]
10003b60:	2228      	movs	r2, #40	; 0x28
10003b62:	5c99      	ldrb	r1, [r3, r2]
                               handle_ptr->config_ptr->ext_start_mode);
10003b64:	687b      	ldr	r3, [r7, #4]
10003b66:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
10003b68:	2229      	movs	r2, #41	; 0x29
10003b6a:	5c9b      	ldrb	r3, [r3, r2]
10003b6c:	1c1a      	adds	r2, r3, #0
10003b6e:	f7fe fa5d 	bl	1000202c <XMC_CCU8_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
10003b72:	687b      	ldr	r3, [r7, #4]
10003b74:	681b      	ldr	r3, [r3, #0]
10003b76:	222a      	movs	r2, #42	; 0x2a
10003b78:	5c9b      	ldrb	r3, [r3, r2]
10003b7a:	2b00      	cmp	r3, #0
10003b7c:	d00c      	beq.n	10003b98 <PWM_CCU8_lConfigure_Events+0x90>
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
10003b7e:	687b      	ldr	r3, [r7, #4]
10003b80:	6898      	ldr	r0, [r3, #8]
10003b82:	687b      	ldr	r3, [r7, #4]
10003b84:	681b      	ldr	r3, [r3, #0]
10003b86:	222a      	movs	r2, #42	; 0x2a
10003b88:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_stop_mode);
10003b8a:	687b      	ldr	r3, [r7, #4]
10003b8c:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
10003b8e:	222b      	movs	r2, #43	; 0x2b
10003b90:	5c9b      	ldrb	r3, [r3, r2]
10003b92:	1c1a      	adds	r2, r3, #0
10003b94:	f7fe fa7e 	bl	10002094 <XMC_CCU8_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
10003b98:	687b      	ldr	r3, [r7, #4]
10003b9a:	681b      	ldr	r3, [r3, #0]
10003b9c:	222c      	movs	r2, #44	; 0x2c
10003b9e:	5c9b      	ldrb	r3, [r3, r2]
10003ba0:	2b00      	cmp	r3, #0
10003ba2:	d009      	beq.n	10003bb8 <PWM_CCU8_lConfigure_Events+0xb0>
  {
    XMC_CCU8_SLICE_DirectionConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
10003ba4:	687b      	ldr	r3, [r7, #4]
10003ba6:	6899      	ldr	r1, [r3, #8]
10003ba8:	687b      	ldr	r3, [r7, #4]
10003baa:	681b      	ldr	r3, [r3, #0]
10003bac:	222c      	movs	r2, #44	; 0x2c
10003bae:	5c9b      	ldrb	r3, [r3, r2]
10003bb0:	1c08      	adds	r0, r1, #0
10003bb2:	1c19      	adds	r1, r3, #0
10003bb4:	f7fe fb66 	bl	10002284 <XMC_CCU8_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
10003bb8:	687b      	ldr	r3, [r7, #4]
10003bba:	681b      	ldr	r3, [r3, #0]
10003bbc:	222d      	movs	r2, #45	; 0x2d
10003bbe:	5c9b      	ldrb	r3, [r3, r2]
10003bc0:	2b00      	cmp	r3, #0
10003bc2:	d009      	beq.n	10003bd8 <PWM_CCU8_lConfigure_Events+0xd0>
  {
    XMC_CCU8_SLICE_GateConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
10003bc4:	687b      	ldr	r3, [r7, #4]
10003bc6:	6899      	ldr	r1, [r3, #8]
10003bc8:	687b      	ldr	r3, [r7, #4]
10003bca:	681b      	ldr	r3, [r3, #0]
10003bcc:	222d      	movs	r2, #45	; 0x2d
10003bce:	5c9b      	ldrb	r3, [r3, r2]
10003bd0:	1c08      	adds	r0, r1, #0
10003bd2:	1c19      	adds	r1, r3, #0
10003bd4:	f7fe fb3a 	bl	1000224c <XMC_CCU8_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
10003bd8:	687b      	ldr	r3, [r7, #4]
10003bda:	681b      	ldr	r3, [r3, #0]
10003bdc:	222e      	movs	r2, #46	; 0x2e
10003bde:	5c9b      	ldrb	r3, [r3, r2]
10003be0:	2b00      	cmp	r3, #0
10003be2:	d009      	beq.n	10003bf8 <PWM_CCU8_lConfigure_Events+0xf0>
  {
    XMC_CCU8_SLICE_CountConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_event);
10003be4:	687b      	ldr	r3, [r7, #4]
10003be6:	6899      	ldr	r1, [r3, #8]
10003be8:	687b      	ldr	r3, [r7, #4]
10003bea:	681b      	ldr	r3, [r3, #0]
10003bec:	222e      	movs	r2, #46	; 0x2e
10003bee:	5c9b      	ldrb	r3, [r3, r2]
10003bf0:	1c08      	adds	r0, r1, #0
10003bf2:	1c19      	adds	r1, r3, #0
10003bf4:	f7fe fb0e 	bl	10002214 <XMC_CCU8_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
10003bf8:	687b      	ldr	r3, [r7, #4]
10003bfa:	681b      	ldr	r3, [r3, #0]
10003bfc:	222f      	movs	r2, #47	; 0x2f
10003bfe:	5c9b      	ldrb	r3, [r3, r2]
10003c00:	2b00      	cmp	r3, #0
10003c02:	d013      	beq.n	10003c2c <PWM_CCU8_lConfigure_Events+0x124>
  {
    XMC_CCU8_SLICE_LoadConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_event);
10003c04:	687b      	ldr	r3, [r7, #4]
10003c06:	6899      	ldr	r1, [r3, #8]
10003c08:	687b      	ldr	r3, [r7, #4]
10003c0a:	681b      	ldr	r3, [r3, #0]
10003c0c:	222f      	movs	r2, #47	; 0x2f
10003c0e:	5c9b      	ldrb	r3, [r3, r2]
10003c10:	1c08      	adds	r0, r1, #0
10003c12:	1c19      	adds	r1, r3, #0
10003c14:	f7fe fa70 	bl	100020f8 <XMC_CCU8_SLICE_LoadConfig>
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
10003c18:	687b      	ldr	r3, [r7, #4]
10003c1a:	6899      	ldr	r1, [r3, #8]
10003c1c:	687b      	ldr	r3, [r7, #4]
10003c1e:	681b      	ldr	r3, [r3, #0]
10003c20:	2230      	movs	r2, #48	; 0x30
10003c22:	5c9b      	ldrb	r3, [r3, r2]
10003c24:	1c08      	adds	r0, r1, #0
10003c26:	1c19      	adds	r1, r3, #0
10003c28:	f7fe fa82 	bl	10002130 <XMC_CCU8_SLICE_LoadSelector>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
10003c2c:	687b      	ldr	r3, [r7, #4]
10003c2e:	681b      	ldr	r3, [r3, #0]
10003c30:	2231      	movs	r2, #49	; 0x31
10003c32:	5c9b      	ldrb	r3, [r3, r2]
10003c34:	2b00      	cmp	r3, #0
10003c36:	d012      	beq.n	10003c5e <PWM_CCU8_lConfigure_Events+0x156>
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10003c38:	687b      	ldr	r3, [r7, #4]
10003c3a:	6898      	ldr	r0, [r3, #8]
10003c3c:	687b      	ldr	r3, [r7, #4]
10003c3e:	681b      	ldr	r3, [r3, #0]
10003c40:	2231      	movs	r2, #49	; 0x31
10003c42:	5c99      	ldrb	r1, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
10003c44:	687b      	ldr	r3, [r7, #4]
10003c46:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10003c48:	2232      	movs	r2, #50	; 0x32
10003c4a:	5c9c      	ldrb	r4, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
10003c4c:	687b      	ldr	r3, [r7, #4]
10003c4e:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10003c50:	2233      	movs	r2, #51	; 0x33
10003c52:	5c9b      	ldrb	r3, [r3, r2]
10003c54:	9300      	str	r3, [sp, #0]
10003c56:	1c22      	adds	r2, r4, #0
10003c58:	2303      	movs	r3, #3
10003c5a:	f7fe fa83 	bl	10002164 <XMC_CCU8_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
10003c5e:	687b      	ldr	r3, [r7, #4]
10003c60:	681b      	ldr	r3, [r3, #0]
10003c62:	2237      	movs	r2, #55	; 0x37
10003c64:	5c9b      	ldrb	r3, [r3, r2]
10003c66:	2b03      	cmp	r3, #3
10003c68:	d118      	bne.n	10003c9c <PWM_CCU8_lConfigure_Events+0x194>
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
10003c6a:	687b      	ldr	r3, [r7, #4]
10003c6c:	6898      	ldr	r0, [r3, #8]
10003c6e:	687b      	ldr	r3, [r7, #4]
10003c70:	681b      	ldr	r3, [r3, #0]
10003c72:	2239      	movs	r2, #57	; 0x39
10003c74:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_trap_sync);
10003c76:	687b      	ldr	r3, [r7, #4]
10003c78:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
10003c7a:	2238      	movs	r2, #56	; 0x38
10003c7c:	5c9b      	ldrb	r3, [r3, r2]
10003c7e:	1c1a      	adds	r2, r3, #0
10003c80:	f7fe fb34 	bl	100022ec <XMC_CCU8_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
10003c84:	687b      	ldr	r3, [r7, #4]
10003c86:	681b      	ldr	r3, [r3, #0]
10003c88:	2236      	movs	r2, #54	; 0x36
10003c8a:	5c9b      	ldrb	r3, [r3, r2]
10003c8c:	2b00      	cmp	r3, #0
10003c8e:	d005      	beq.n	10003c9c <PWM_CCU8_lConfigure_Events+0x194>
    {
      XMC_CCU8_SLICE_EnableTrap(
10003c90:	687b      	ldr	r3, [r7, #4]
10003c92:	689b      	ldr	r3, [r3, #8]
10003c94:	1c18      	adds	r0, r3, #0
10003c96:	210f      	movs	r1, #15
10003c98:	f7ff fc94 	bl	100035c4 <XMC_CCU8_SLICE_EnableTrap>
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
10003c9c:	687b      	ldr	r3, [r7, #4]
10003c9e:	681b      	ldr	r3, [r3, #0]
10003ca0:	2234      	movs	r2, #52	; 0x34
10003ca2:	5c9b      	ldrb	r3, [r3, r2]
10003ca4:	2b00      	cmp	r3, #0
10003ca6:	d105      	bne.n	10003cb4 <PWM_CCU8_lConfigure_Events+0x1ac>
      != handle_ptr->config_ptr->ext_override_level_event))
10003ca8:	687b      	ldr	r3, [r7, #4]
10003caa:	681b      	ldr	r3, [r3, #0]
10003cac:	2235      	movs	r2, #53	; 0x35
10003cae:	5c9b      	ldrb	r3, [r3, r2]
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
10003cb0:	2b00      	cmp	r3, #0
10003cb2:	d011      	beq.n	10003cd8 <PWM_CCU8_lConfigure_Events+0x1d0>
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
10003cb4:	687b      	ldr	r3, [r7, #4]
10003cb6:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
10003cb8:	687b      	ldr	r3, [r7, #4]
10003cba:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
10003cbc:	6a1a      	ldr	r2, [r3, #32]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
10003cbe:	687b      	ldr	r3, [r7, #4]
10003cc0:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
10003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003cc4:	1c08      	adds	r0, r1, #0
10003cc6:	1c11      	adds	r1, r2, #0
10003cc8:	1c1a      	adds	r2, r3, #0
10003cca:	f7fe fb55 	bl	10002378 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU8_SLICE_StatusBitOverrideConfig(handle_ptr->ccu8_slice_ptr);
10003cce:	687b      	ldr	r3, [r7, #4]
10003cd0:	689b      	ldr	r3, [r3, #8]
10003cd2:	1c18      	adds	r0, r3, #0
10003cd4:	f7fe faf2 	bl	100022bc <XMC_CCU8_SLICE_StatusBitOverrideConfig>
  }

}
10003cd8:	46bd      	mov	sp, r7
10003cda:	b003      	add	sp, #12
10003cdc:	bd90      	pop	{r4, r7, pc}
10003cde:	46c0      	nop			; (mov r8, r8)

10003ce0 <PWM_CCU8_Start>:
/**********************************************************************************************************/
/*Starts the CCU8_CC8 slice. This needs to be called even if external start is configured.*/
PWM_CCU8_STATUS_t PWM_CCU8_Start(PWM_CCU8_t* handle_ptr)
{
10003ce0:	b580      	push	{r7, lr}
10003ce2:	b084      	sub	sp, #16
10003ce4:	af00      	add	r7, sp, #0
10003ce6:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;

  status = PWM_CCU8_STATUS_FAILURE;
10003ce8:	230f      	movs	r3, #15
10003cea:	18fb      	adds	r3, r7, r3
10003cec:	2201      	movs	r2, #1
10003cee:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU8_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU8_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU8_STATE_STOPPED == handle_ptr->state))
10003cf0:	687b      	ldr	r3, [r7, #4]
10003cf2:	7f1b      	ldrb	r3, [r3, #28]
10003cf4:	2b01      	cmp	r3, #1
10003cf6:	d003      	beq.n	10003d00 <PWM_CCU8_Start+0x20>
10003cf8:	687b      	ldr	r3, [r7, #4]
10003cfa:	7f1b      	ldrb	r3, [r3, #28]
10003cfc:	2b03      	cmp	r3, #3
10003cfe:	d119      	bne.n	10003d34 <PWM_CCU8_Start+0x54>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_module_ptr, handle_ptr->slice_number);
10003d00:	687b      	ldr	r3, [r7, #4]
10003d02:	685a      	ldr	r2, [r3, #4]
10003d04:	687b      	ldr	r3, [r7, #4]
10003d06:	7b5b      	ldrb	r3, [r3, #13]
10003d08:	1c10      	adds	r0, r2, #0
10003d0a:	1c19      	adds	r1, r3, #0
10003d0c:	f7ff fc4a 	bl	100035a4 <XMC_CCU8_EnableClock>

    if (XMC_CCU8_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
10003d10:	687b      	ldr	r3, [r7, #4]
10003d12:	681b      	ldr	r3, [r3, #0]
10003d14:	2228      	movs	r2, #40	; 0x28
10003d16:	5c9b      	ldrb	r3, [r3, r2]
10003d18:	2b00      	cmp	r3, #0
10003d1a:	d104      	bne.n	10003d26 <PWM_CCU8_Start+0x46>
    {
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
10003d1c:	687b      	ldr	r3, [r7, #4]
10003d1e:	689b      	ldr	r3, [r3, #8]
10003d20:	1c18      	adds	r0, r3, #0
10003d22:	f7ff fc5f 	bl	100035e4 <XMC_CCU8_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU8_STATE_RUNNING;
10003d26:	687b      	ldr	r3, [r7, #4]
10003d28:	2202      	movs	r2, #2
10003d2a:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU8_STATUS_SUCCESS;
10003d2c:	230f      	movs	r3, #15
10003d2e:	18fb      	adds	r3, r7, r3
10003d30:	2200      	movs	r2, #0
10003d32:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU8_Start:start PWM");
  }
  return (status);
10003d34:	230f      	movs	r3, #15
10003d36:	18fb      	adds	r3, r7, r3
10003d38:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU8_Start() api */
10003d3a:	1c18      	adds	r0, r3, #0
10003d3c:	46bd      	mov	sp, r7
10003d3e:	b004      	add	sp, #16
10003d40:	bd80      	pop	{r7, pc}
10003d42:	46c0      	nop			; (mov r8, r8)

10003d44 <PWM_CCU8_Stop>:
/**********************************************************************************************************/
/*Stops the CCU8_CC8 slice. */
PWM_CCU8_STATUS_t PWM_CCU8_Stop(PWM_CCU8_t* handle_ptr)
{
10003d44:	b580      	push	{r7, lr}
10003d46:	b084      	sub	sp, #16
10003d48:	af00      	add	r7, sp, #0
10003d4a:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;

  status = PWM_CCU8_STATUS_FAILURE;
10003d4c:	230f      	movs	r3, #15
10003d4e:	18fb      	adds	r3, r7, r3
10003d50:	2201      	movs	r2, #1
10003d52:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU8_Stop:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
10003d54:	687b      	ldr	r3, [r7, #4]
10003d56:	7f1b      	ldrb	r3, [r3, #28]
10003d58:	2b00      	cmp	r3, #0
10003d5a:	d010      	beq.n	10003d7e <PWM_CCU8_Stop+0x3a>
  {
    XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
10003d5c:	687b      	ldr	r3, [r7, #4]
10003d5e:	689b      	ldr	r3, [r3, #8]
10003d60:	1c18      	adds	r0, r3, #0
10003d62:	f7ff fc49 	bl	100035f8 <XMC_CCU8_SLICE_StopTimer>
    XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
10003d66:	687b      	ldr	r3, [r7, #4]
10003d68:	689b      	ldr	r3, [r3, #8]
10003d6a:	1c18      	adds	r0, r3, #0
10003d6c:	f7ff fc4e 	bl	1000360c <XMC_CCU8_SLICE_ClearTimer>

    handle_ptr->state = PWM_CCU8_STATE_STOPPED;
10003d70:	687b      	ldr	r3, [r7, #4]
10003d72:	2203      	movs	r2, #3
10003d74:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU8_STATUS_SUCCESS;
10003d76:	230f      	movs	r3, #15
10003d78:	18fb      	adds	r3, r7, r3
10003d7a:	2200      	movs	r2, #0
10003d7c:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU8_Stop:stop PWM");
  }
  return (status);
10003d7e:	230f      	movs	r3, #15
10003d80:	18fb      	adds	r3, r7, r3
10003d82:	781b      	ldrb	r3, [r3, #0]

} /* end of PWM_CCU8_Stop() api */
10003d84:	1c18      	adds	r0, r3, #0
10003d86:	46bd      	mov	sp, r7
10003d88:	b004      	add	sp, #16
10003d8a:	bd80      	pop	{r7, pc}

10003d8c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
10003d8c:	b580      	push	{r7, lr}
10003d8e:	b082      	sub	sp, #8
10003d90:	af00      	add	r7, sp, #0
10003d92:	6078      	str	r0, [r7, #4]
10003d94:	1c0a      	adds	r2, r1, #0
10003d96:	1cfb      	adds	r3, r7, #3
10003d98:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
10003d9a:	1cfb      	adds	r3, r7, #3
10003d9c:	781b      	ldrb	r3, [r3, #0]
10003d9e:	2201      	movs	r2, #1
10003da0:	409a      	lsls	r2, r3
10003da2:	687b      	ldr	r3, [r7, #4]
10003da4:	60da      	str	r2, [r3, #12]
}
10003da6:	46bd      	mov	sp, r7
10003da8:	b002      	add	sp, #8
10003daa:	bd80      	pop	{r7, pc}

10003dac <XMC_CCU4_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU4_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
{
10003dac:	b580      	push	{r7, lr}
10003dae:	b082      	sub	sp, #8
10003db0:	af00      	add	r7, sp, #0
10003db2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
10003db4:	687b      	ldr	r3, [r7, #4]
10003db6:	695b      	ldr	r3, [r3, #20]
10003db8:	2280      	movs	r2, #128	; 0x80
10003dba:	0292      	lsls	r2, r2, #10
10003dbc:	431a      	orrs	r2, r3
10003dbe:	687b      	ldr	r3, [r7, #4]
10003dc0:	615a      	str	r2, [r3, #20]
}
10003dc2:	46bd      	mov	sp, r7
10003dc4:	b002      	add	sp, #8
10003dc6:	bd80      	pop	{r7, pc}

10003dc8 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
10003dc8:	b580      	push	{r7, lr}
10003dca:	b082      	sub	sp, #8
10003dcc:	af00      	add	r7, sp, #0
10003dce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10003dd0:	687b      	ldr	r3, [r7, #4]
10003dd2:	2201      	movs	r2, #1
10003dd4:	60da      	str	r2, [r3, #12]
}
10003dd6:	46bd      	mov	sp, r7
10003dd8:	b002      	add	sp, #8
10003dda:	bd80      	pop	{r7, pc}

10003ddc <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
10003ddc:	b580      	push	{r7, lr}
10003dde:	b082      	sub	sp, #8
10003de0:	af00      	add	r7, sp, #0
10003de2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
10003de4:	687b      	ldr	r3, [r7, #4]
10003de6:	2201      	movs	r2, #1
10003de8:	611a      	str	r2, [r3, #16]
}
10003dea:	46bd      	mov	sp, r7
10003dec:	b002      	add	sp, #8
10003dee:	bd80      	pop	{r7, pc}

10003df0 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
10003df0:	b580      	push	{r7, lr}
10003df2:	b082      	sub	sp, #8
10003df4:	af00      	add	r7, sp, #0
10003df6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
10003df8:	687b      	ldr	r3, [r7, #4]
10003dfa:	2202      	movs	r2, #2
10003dfc:	611a      	str	r2, [r3, #16]
}
10003dfe:	46bd      	mov	sp, r7
10003e00:	b002      	add	sp, #8
10003e02:	bd80      	pop	{r7, pc}

10003e04 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
10003e04:	b580      	push	{r7, lr}
10003e06:	b082      	sub	sp, #8
10003e08:	af00      	add	r7, sp, #0
10003e0a:	6078      	str	r0, [r7, #4]
10003e0c:	1c0a      	adds	r2, r1, #0
10003e0e:	1cbb      	adds	r3, r7, #2
10003e10:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10003e12:	1cbb      	adds	r3, r7, #2
10003e14:	881a      	ldrh	r2, [r3, #0]
10003e16:	687b      	ldr	r3, [r7, #4]
10003e18:	635a      	str	r2, [r3, #52]	; 0x34
}
10003e1a:	46bd      	mov	sp, r7
10003e1c:	b002      	add	sp, #8
10003e1e:	bd80      	pop	{r7, pc}

10003e20 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
10003e20:	b580      	push	{r7, lr}
10003e22:	b082      	sub	sp, #8
10003e24:	af00      	add	r7, sp, #0
10003e26:	6078      	str	r0, [r7, #4]
10003e28:	1c0a      	adds	r2, r1, #0
10003e2a:	1cbb      	adds	r3, r7, #2
10003e2c:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
10003e2e:	1cbb      	adds	r3, r7, #2
10003e30:	881a      	ldrh	r2, [r3, #0]
10003e32:	687b      	ldr	r3, [r7, #4]
10003e34:	63da      	str	r2, [r3, #60]	; 0x3c
}
10003e36:	46bd      	mov	sp, r7
10003e38:	b002      	add	sp, #8
10003e3a:	bd80      	pop	{r7, pc}

10003e3c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10003e3c:	b580      	push	{r7, lr}
10003e3e:	b082      	sub	sp, #8
10003e40:	af00      	add	r7, sp, #0
10003e42:	6078      	str	r0, [r7, #4]
10003e44:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
10003e46:	687b      	ldr	r3, [r7, #4]
10003e48:	683a      	ldr	r2, [r7, #0]
10003e4a:	611a      	str	r2, [r3, #16]
}
10003e4c:	46bd      	mov	sp, r7
10003e4e:	b002      	add	sp, #8
10003e50:	bd80      	pop	{r7, pc}
10003e52:	46c0      	nop			; (mov r8, r8)

10003e54 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
10003e54:	b580      	push	{r7, lr}
10003e56:	b082      	sub	sp, #8
10003e58:	af00      	add	r7, sp, #0
10003e5a:	6078      	str	r0, [r7, #4]
10003e5c:	1c0a      	adds	r2, r1, #0
10003e5e:	1cfb      	adds	r3, r7, #3
10003e60:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
10003e62:	687b      	ldr	r3, [r7, #4]
10003e64:	22a4      	movs	r2, #164	; 0xa4
10003e66:	589a      	ldr	r2, [r3, r2]
10003e68:	1cfb      	adds	r3, r7, #3
10003e6a:	781b      	ldrb	r3, [r3, #0]
10003e6c:	2101      	movs	r1, #1
10003e6e:	4099      	lsls	r1, r3
10003e70:	1c0b      	adds	r3, r1, #0
10003e72:	431a      	orrs	r2, r3
10003e74:	687b      	ldr	r3, [r7, #4]
10003e76:	21a4      	movs	r1, #164	; 0xa4
10003e78:	505a      	str	r2, [r3, r1]
}
10003e7a:	46bd      	mov	sp, r7
10003e7c:	b002      	add	sp, #8
10003e7e:	bd80      	pop	{r7, pc}

10003e80 <XMC_CCU4_SLICE_EnableCascadedShadowTransfer>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_EnableShadowTransfer(), XMC_CCU4_SLICE_DisableCascadedShadowTransfer()<BR>.
 *  @note Only available for XMC1400 series
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableCascadedShadowTransfer(XMC_CCU4_SLICE_t *const slice)
{
10003e80:	b580      	push	{r7, lr}
10003e82:	b082      	sub	sp, #8
10003e84:	af00      	add	r7, sp, #0
10003e86:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableCascadedShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->STC |= (uint32_t) CCU4_CC4_STC_CSE_Msk;
10003e88:	687b      	ldr	r3, [r7, #4]
10003e8a:	22b4      	movs	r2, #180	; 0xb4
10003e8c:	589b      	ldr	r3, [r3, r2]
10003e8e:	2201      	movs	r2, #1
10003e90:	431a      	orrs	r2, r3
10003e92:	687b      	ldr	r3, [r7, #4]
10003e94:	21b4      	movs	r1, #180	; 0xb4
10003e96:	505a      	str	r2, [r3, r1]
}
10003e98:	46bd      	mov	sp, r7
10003e9a:	b002      	add	sp, #8
10003e9c:	bd80      	pop	{r7, pc}
10003e9e:	46c0      	nop			; (mov r8, r8)

10003ea0 <XMC_CCU4_SLICE_SetShadowTransferMode>:
 * XMC_CCU4_EnableShadowTransfer()<BR>
 *  @note Only available for XMC1400 series
*/
__STATIC_INLINE void XMC_CCU4_SLICE_SetShadowTransferMode(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
10003ea0:	b580      	push	{r7, lr}
10003ea2:	b082      	sub	sp, #8
10003ea4:	af00      	add	r7, sp, #0
10003ea6:	6078      	str	r0, [r7, #4]
10003ea8:	1c0a      	adds	r2, r1, #0
10003eaa:	1cfb      	adds	r3, r7, #3
10003eac:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->STC = ((slice->STC) & (uint32_t)~CCU4_CC4_STC_STM_Msk) |
10003eae:	687b      	ldr	r3, [r7, #4]
10003eb0:	22b4      	movs	r2, #180	; 0xb4
10003eb2:	589b      	ldr	r3, [r3, r2]
10003eb4:	2206      	movs	r2, #6
10003eb6:	4393      	bics	r3, r2
10003eb8:	1c1a      	adds	r2, r3, #0
               ((shadow_transfer_mode << CCU4_CC4_STC_STM_Pos) & (uint32_t)CCU4_CC4_STC_STM_Msk);
10003eba:	1cfb      	adds	r3, r7, #3
10003ebc:	781b      	ldrb	r3, [r3, #0]
10003ebe:	005b      	lsls	r3, r3, #1
10003ec0:	1c19      	adds	r1, r3, #0
10003ec2:	2306      	movs	r3, #6
10003ec4:	400b      	ands	r3, r1
*/
__STATIC_INLINE void XMC_CCU4_SLICE_SetShadowTransferMode(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->STC = ((slice->STC) & (uint32_t)~CCU4_CC4_STC_STM_Msk) |
10003ec6:	431a      	orrs	r2, r3
10003ec8:	687b      	ldr	r3, [r7, #4]
10003eca:	21b4      	movs	r1, #180	; 0xb4
10003ecc:	505a      	str	r2, [r3, r1]
               ((shadow_transfer_mode << CCU4_CC4_STC_STM_Pos) & (uint32_t)CCU4_CC4_STC_STM_Msk);
}
10003ece:	46bd      	mov	sp, r7
10003ed0:	b002      	add	sp, #8
10003ed2:	bd80      	pop	{r7, pc}

10003ed4 <XMC_CCU4_SLICE_WriteImmediateAfterShadowTransfer>:
* XMC_CCU4_EnableShadowTransfer()<BR>
*  @note Only available for XMC1400 series
*/
__STATIC_INLINE void XMC_CCU4_SLICE_WriteImmediateAfterShadowTransfer(XMC_CCU4_SLICE_t *const slice,
    const uint32_t immediate_write)
{
10003ed4:	b580      	push	{r7, lr}
10003ed6:	b082      	sub	sp, #8
10003ed8:	af00      	add	r7, sp, #0
10003eda:	6078      	str	r0, [r7, #4]
10003edc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_WriteImmediateAfterShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->STC |= immediate_write;
10003ede:	687b      	ldr	r3, [r7, #4]
10003ee0:	22b4      	movs	r2, #180	; 0xb4
10003ee2:	589a      	ldr	r2, [r3, r2]
10003ee4:	683b      	ldr	r3, [r7, #0]
10003ee6:	431a      	orrs	r2, r3
10003ee8:	687b      	ldr	r3, [r7, #4]
10003eea:	21b4      	movs	r1, #180	; 0xb4
10003eec:	505a      	str	r2, [r3, r1]
}
10003eee:	46bd      	mov	sp, r7
10003ef0:	b002      	add	sp, #8
10003ef2:	bd80      	pop	{r7, pc}

10003ef4 <XMC_CCU4_SLICE_EnableAutomaticShadowTransferRequest>:
*  XMC_CCU4_SLICE_DisableAutomaticShadowTransferRequest().
*  @note Only available for XMC1400 series
*/
__STATIC_INLINE void XMC_CCU4_SLICE_EnableAutomaticShadowTransferRequest(XMC_CCU4_SLICE_t *const slice,
    const uint32_t automatic_shadow_transfer)
{
10003ef4:	b580      	push	{r7, lr}
10003ef6:	b082      	sub	sp, #8
10003ef8:	af00      	add	r7, sp, #0
10003efa:	6078      	str	r0, [r7, #4]
10003efc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableAutomaticShadowTransferRequest:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->STC |= automatic_shadow_transfer;
10003efe:	687b      	ldr	r3, [r7, #4]
10003f00:	22b4      	movs	r2, #180	; 0xb4
10003f02:	589a      	ldr	r2, [r3, r2]
10003f04:	683b      	ldr	r3, [r7, #0]
10003f06:	431a      	orrs	r2, r3
10003f08:	687b      	ldr	r3, [r7, #4]
10003f0a:	21b4      	movs	r1, #180	; 0xb4
10003f0c:	505a      	str	r2, [r3, r1]
}
10003f0e:	46bd      	mov	sp, r7
10003f10:	b002      	add	sp, #8
10003f12:	bd80      	pop	{r7, pc}

10003f14 <PWM_CCU4_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU4_STATUS_t PWM_CCU4_Init(PWM_CCU4_t* handle_ptr)
{
10003f14:	b590      	push	{r4, r7, lr}
10003f16:	b087      	sub	sp, #28
10003f18:	af00      	add	r7, sp, #0
10003f1a:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;
  GLOBAL_CCU4_STATUS_t status_ccu4_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU4_STATUS_FAILURE;
10003f1c:	2317      	movs	r3, #23
10003f1e:	18fb      	adds	r3, r7, r3
10003f20:	2201      	movs	r2, #1
10003f22:	701a      	strb	r2, [r3, #0]
  status_ccu4_global = GLOBAL_CCU4_STATUS_FAILURE;
10003f24:	2316      	movs	r3, #22
10003f26:	18fb      	adds	r3, r7, r3
10003f28:	2201      	movs	r2, #1
10003f2a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU4_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU4_STATE_UNINITIALIZED == handle_ptr->state)
10003f2c:	687b      	ldr	r3, [r7, #4]
10003f2e:	7f1b      	ldrb	r3, [r3, #28]
10003f30:	2b00      	cmp	r3, #0
10003f32:	d000      	beq.n	10003f36 <PWM_CCU4_Init+0x22>
10003f34:	e0be      	b.n	100040b4 <PWM_CCU4_Init+0x1a0>
  {
    /* Initialize consumed Apps */
    status_ccu4_global = GLOBAL_CCU4_Init(handle_ptr->config_ptr->global_ccu4_handle);
10003f36:	687b      	ldr	r3, [r7, #4]
10003f38:	681b      	ldr	r3, [r3, #0]
10003f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10003f3c:	2216      	movs	r2, #22
10003f3e:	18bc      	adds	r4, r7, r2
10003f40:	1c18      	adds	r0, r3, #0
10003f42:	f000 fdb3 	bl	10004aac <GLOBAL_CCU4_Init>
10003f46:	1c03      	adds	r3, r0, #0
10003f48:	7023      	strb	r3, [r4, #0]

    /* Initialize CCU4x_CC4y slice */
    if (GLOBAL_CCU4_STATUS_SUCCESS == status_ccu4_global)
10003f4a:	2316      	movs	r3, #22
10003f4c:	18fb      	adds	r3, r7, r3
10003f4e:	781b      	ldrb	r3, [r3, #0]
10003f50:	2b00      	cmp	r3, #0
10003f52:	d000      	beq.n	10003f56 <PWM_CCU4_Init+0x42>
10003f54:	e0aa      	b.n	100040ac <PWM_CCU4_Init+0x198>
    {
      XMC_DEBUG("PWM_CCU4_Init:Initilizing slice");

      /* Configure CCU4x_CC4y slice as timer */
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr);
10003f56:	687b      	ldr	r3, [r7, #4]
10003f58:	689a      	ldr	r2, [r3, #8]
10003f5a:	687b      	ldr	r3, [r7, #4]
10003f5c:	681b      	ldr	r3, [r3, #0]
10003f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003f60:	1c10      	adds	r0, r2, #0
10003f62:	1c19      	adds	r1, r3, #0
10003f64:	f7fd fc3e 	bl	100017e4 <XMC_CCU4_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->period_value);
10003f68:	687b      	ldr	r3, [r7, #4]
10003f6a:	689a      	ldr	r2, [r3, #8]
10003f6c:	687b      	ldr	r3, [r7, #4]
10003f6e:	681b      	ldr	r3, [r3, #0]
10003f70:	885b      	ldrh	r3, [r3, #2]
10003f72:	1c10      	adds	r0, r2, #0
10003f74:	1c19      	adds	r1, r3, #0
10003f76:	f7ff ff45 	bl	10003e04 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);
10003f7a:	687b      	ldr	r3, [r7, #4]
10003f7c:	689a      	ldr	r2, [r3, #8]
10003f7e:	687b      	ldr	r3, [r7, #4]
10003f80:	681b      	ldr	r3, [r3, #0]
10003f82:	889b      	ldrh	r3, [r3, #4]
10003f84:	1c10      	adds	r0, r2, #0
10003f86:	1c19      	adds	r1, r3, #0
10003f88:	f7ff ff4a 	bl	10003e20 <XMC_CCU4_SLICE_SetTimerCompareMatch>

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
10003f8c:	687b      	ldr	r3, [r7, #4]
10003f8e:	681b      	ldr	r3, [r3, #0]
10003f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003f92:	78db      	ldrb	r3, [r3, #3]
10003f94:	2202      	movs	r2, #2
10003f96:	4013      	ands	r3, r2
10003f98:	b2db      	uxtb	r3, r3
10003f9a:	2b00      	cmp	r3, #0
10003f9c:	d008      	beq.n	10003fb0 <PWM_CCU4_Init+0x9c>
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
10003f9e:	687b      	ldr	r3, [r7, #4]
10003fa0:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
10003fa2:	687b      	ldr	r3, [r7, #4]
10003fa4:	681b      	ldr	r3, [r3, #0]
10003fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
10003fa8:	1c10      	adds	r0, r2, #0
10003faa:	1c19      	adds	r1, r3, #0
10003fac:	f7fd fc00 	bl	100017b0 <XMC_CCU4_SetMultiChannelShadowTransferMode>
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
      }

#if (UC_SERIES == XMC14) /*below feature available in XMC14xx devices */
      XMC_CCU4_SLICE_SetShadowTransferMode(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->shadow_transfer_mode);
10003fb0:	687b      	ldr	r3, [r7, #4]
10003fb2:	6899      	ldr	r1, [r3, #8]
10003fb4:	687b      	ldr	r3, [r7, #4]
10003fb6:	681b      	ldr	r3, [r3, #0]
10003fb8:	2238      	movs	r2, #56	; 0x38
10003fba:	5c9b      	ldrb	r3, [r3, r2]
10003fbc:	1c08      	adds	r0, r1, #0
10003fbe:	1c19      	adds	r1, r3, #0
10003fc0:	f7ff ff6e 	bl	10003ea0 <XMC_CCU4_SLICE_SetShadowTransferMode>
      XMC_CCU4_SLICE_WriteImmediateAfterShadowTransfer(handle_ptr->ccu4_slice_ptr,
10003fc4:	687b      	ldr	r3, [r7, #4]
10003fc6:	689a      	ldr	r2, [r3, #8]
                                                       handle_ptr->config_ptr->immediate_write);
10003fc8:	687b      	ldr	r3, [r7, #4]
10003fca:	681b      	ldr	r3, [r3, #0]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
      }

#if (UC_SERIES == XMC14) /*below feature available in XMC14xx devices */
      XMC_CCU4_SLICE_SetShadowTransferMode(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->shadow_transfer_mode);
      XMC_CCU4_SLICE_WriteImmediateAfterShadowTransfer(handle_ptr->ccu4_slice_ptr,
10003fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10003fce:	1c10      	adds	r0, r2, #0
10003fd0:	1c19      	adds	r1, r3, #0
10003fd2:	f7ff ff7f 	bl	10003ed4 <XMC_CCU4_SLICE_WriteImmediateAfterShadowTransfer>
                                                       handle_ptr->config_ptr->immediate_write);
      XMC_CCU4_SLICE_EnableAutomaticShadowTransferRequest(handle_ptr->ccu4_slice_ptr,
10003fd6:	687b      	ldr	r3, [r7, #4]
10003fd8:	689a      	ldr	r2, [r3, #8]
                                                          handle_ptr->config_ptr->automatic_shadow_transfer);
10003fda:	687b      	ldr	r3, [r7, #4]
10003fdc:	681b      	ldr	r3, [r3, #0]

#if (UC_SERIES == XMC14) /*below feature available in XMC14xx devices */
      XMC_CCU4_SLICE_SetShadowTransferMode(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->shadow_transfer_mode);
      XMC_CCU4_SLICE_WriteImmediateAfterShadowTransfer(handle_ptr->ccu4_slice_ptr,
                                                       handle_ptr->config_ptr->immediate_write);
      XMC_CCU4_SLICE_EnableAutomaticShadowTransferRequest(handle_ptr->ccu4_slice_ptr,
10003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003fe0:	1c10      	adds	r0, r2, #0
10003fe2:	1c19      	adds	r1, r3, #0
10003fe4:	f7ff ff86 	bl	10003ef4 <XMC_CCU4_SLICE_EnableAutomaticShadowTransferRequest>
                                                          handle_ptr->config_ptr->automatic_shadow_transfer);
      if((bool)true == handle_ptr->config_ptr->cascaded_shadow_txfr_enable)
10003fe8:	687b      	ldr	r3, [r7, #4]
10003fea:	681b      	ldr	r3, [r3, #0]
10003fec:	2244      	movs	r2, #68	; 0x44
10003fee:	5c9b      	ldrb	r3, [r3, r2]
10003ff0:	2b00      	cmp	r3, #0
10003ff2:	d004      	beq.n	10003ffe <PWM_CCU4_Init+0xea>
      {
        XMC_CCU4_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu4_slice_ptr);
10003ff4:	687b      	ldr	r3, [r7, #4]
10003ff6:	689b      	ldr	r3, [r3, #8]
10003ff8:	1c18      	adds	r0, r3, #0
10003ffa:	f7ff ff41 	bl	10003e80 <XMC_CCU4_SLICE_EnableCascadedShadowTransfer>
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
10003ffe:	687b      	ldr	r3, [r7, #4]
10004000:	685a      	ldr	r2, [r3, #4]
10004002:	687b      	ldr	r3, [r7, #4]
10004004:	691b      	ldr	r3, [r3, #16]
10004006:	1c10      	adds	r0, r2, #0
10004008:	1c19      	adds	r1, r3, #0
1000400a:	f7ff ff17 	bl	10003e3c <XMC_CCU4_EnableShadowTransfer>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->dither_shadow_txfr_msk);
1000400e:	687b      	ldr	r3, [r7, #4]
10004010:	685a      	ldr	r2, [r3, #4]
10004012:	687b      	ldr	r3, [r7, #4]
10004014:	695b      	ldr	r3, [r3, #20]
10004016:	1c10      	adds	r0, r2, #0
10004018:	1c19      	adds	r1, r3, #0
1000401a:	f7ff ff0f 	bl	10003e3c <XMC_CCU4_EnableShadowTransfer>

      /* Configure events */
      PWM_CCU4_lConfigure_Events(handle_ptr);
1000401e:	687b      	ldr	r3, [r7, #4]
10004020:	1c18      	adds	r0, r3, #0
10004022:	f000 f8ed 	bl	10004200 <PWM_CCU4_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU4_lInit_Interrupt(handle_ptr);
10004026:	687b      	ldr	r3, [r7, #4]
10004028:	1c18      	adds	r0, r3, #0
1000402a:	f000 f84f 	bl	100040cc <PWM_CCU4_lInit_Interrupt>

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
1000402e:	687b      	ldr	r3, [r7, #4]
10004030:	681b      	ldr	r3, [r3, #0]
10004032:	224c      	movs	r2, #76	; 0x4c
10004034:	5c9b      	ldrb	r3, [r3, r2]
10004036:	2b00      	cmp	r3, #0
10004038:	d00e      	beq.n	10004058 <PWM_CCU4_Init+0x144>
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
1000403a:	687b      	ldr	r3, [r7, #4]
1000403c:	681b      	ldr	r3, [r3, #0]
1000403e:	6d19      	ldr	r1, [r3, #80]	; 0x50
10004040:	687b      	ldr	r3, [r7, #4]
10004042:	681b      	ldr	r3, [r3, #0]
10004044:	2254      	movs	r2, #84	; 0x54
10004046:	5c9a      	ldrb	r2, [r3, r2]
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
10004048:	687b      	ldr	r3, [r7, #4]
1000404a:	681b      	ldr	r3, [r3, #0]
      PWM_CCU4_lInit_Interrupt(handle_ptr);

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
1000404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1000404e:	1c08      	adds	r0, r1, #0
10004050:	1c11      	adds	r1, r2, #0
10004052:	1c1a      	adds	r2, r3, #0
10004054:	f7fd f898 	bl	10001188 <XMC_GPIO_Init>
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
      }

      frequency_module = handle_ptr->config_ptr->global_ccu4_handle->module_frequency;
10004058:	687b      	ldr	r3, [r7, #4]
1000405a:	681b      	ldr	r3, [r3, #0]
1000405c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000405e:	681b      	ldr	r3, [r3, #0]
10004060:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->prescaler_initval;
10004062:	687b      	ldr	r3, [r7, #4]
10004064:	681b      	ldr	r3, [r3, #0]
10004066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004068:	791b      	ldrb	r3, [r3, #4]
1000406a:	071b      	lsls	r3, r3, #28
1000406c:	0f1b      	lsrs	r3, r3, #28
1000406e:	b2db      	uxtb	r3, r3
10004070:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
10004072:	68fb      	ldr	r3, [r7, #12]
10004074:	693a      	ldr	r2, [r7, #16]
10004076:	40da      	lsrs	r2, r3
10004078:	1c13      	adds	r3, r2, #0
1000407a:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
1000407c:	687b      	ldr	r3, [r7, #4]
1000407e:	693a      	ldr	r2, [r7, #16]
10004080:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU4_STATE_INITIALIZED;
10004082:	687b      	ldr	r3, [r7, #4]
10004084:	2201      	movs	r2, #1
10004086:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU4_STATUS_SUCCESS;
10004088:	2317      	movs	r3, #23
1000408a:	18fb      	adds	r3, r7, r3
1000408c:	2200      	movs	r2, #0
1000408e:	701a      	strb	r2, [r3, #0]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
10004090:	687b      	ldr	r3, [r7, #4]
10004092:	681b      	ldr	r3, [r3, #0]
10004094:	781b      	ldrb	r3, [r3, #0]
10004096:	2b00      	cmp	r3, #0
10004098:	d010      	beq.n	100040bc <PWM_CCU4_Init+0x1a8>
      {
        status = PWM_CCU4_Start(handle_ptr);
1000409a:	2317      	movs	r3, #23
1000409c:	18fc      	adds	r4, r7, r3
1000409e:	687b      	ldr	r3, [r7, #4]
100040a0:	1c18      	adds	r0, r3, #0
100040a2:	f000 f98b 	bl	100043bc <PWM_CCU4_Start>
100040a6:	1c03      	adds	r3, r0, #0
100040a8:	7023      	strb	r3, [r4, #0]
100040aa:	e007      	b.n	100040bc <PWM_CCU4_Init+0x1a8>
      }
    }
    else
    {
      handle_ptr->state = PWM_CCU4_STATE_UNINITIALIZED;
100040ac:	687b      	ldr	r3, [r7, #4]
100040ae:	2200      	movs	r2, #0
100040b0:	771a      	strb	r2, [r3, #28]
100040b2:	e003      	b.n	100040bc <PWM_CCU4_Init+0x1a8>
    }

  }
  else
  {
    status = PWM_CCU4_STATUS_ALREADY_INITIALIZED;
100040b4:	2317      	movs	r3, #23
100040b6:	18fb      	adds	r3, r7, r3
100040b8:	2202      	movs	r2, #2
100040ba:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU4_Init:PWM_CCU4_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
100040bc:	2317      	movs	r3, #23
100040be:	18fb      	adds	r3, r7, r3
100040c0:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU4_Init() api */
100040c2:	1c18      	adds	r0, r3, #0
100040c4:	46bd      	mov	sp, r7
100040c6:	b007      	add	sp, #28
100040c8:	bd90      	pop	{r4, r7, pc}
100040ca:	46c0      	nop			; (mov r8, r8)

100040cc <PWM_CCU4_lInit_Interrupt>:

static void PWM_CCU4_lInit_Interrupt(PWM_CCU4_t* handle_ptr)
{
100040cc:	b580      	push	{r7, lr}
100040ce:	b082      	sub	sp, #8
100040d0:	af00      	add	r7, sp, #0
100040d2:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
100040d4:	687b      	ldr	r3, [r7, #4]
100040d6:	681b      	ldr	r3, [r3, #0]
100040d8:	799b      	ldrb	r3, [r3, #6]
100040da:	2b00      	cmp	r3, #0
100040dc:	d00f      	beq.n	100040fe <PWM_CCU4_lInit_Interrupt+0x32>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
100040de:	687b      	ldr	r3, [r7, #4]
100040e0:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_per_match);
100040e2:	687b      	ldr	r3, [r7, #4]
100040e4:	681b      	ldr	r3, [r3, #0]
  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
100040e6:	7b5b      	ldrb	r3, [r3, #13]
100040e8:	1c10      	adds	r0, r2, #0
100040ea:	2100      	movs	r1, #0
100040ec:	1c1a      	adds	r2, r3, #0
100040ee:	f7fd fe95 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_per_match);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
100040f2:	687b      	ldr	r3, [r7, #4]
100040f4:	689b      	ldr	r3, [r3, #8]
100040f6:	1c18      	adds	r0, r3, #0
100040f8:	2100      	movs	r1, #0
100040fa:	f7ff feab 	bl	10003e54 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
100040fe:	687b      	ldr	r3, [r7, #4]
10004100:	681b      	ldr	r3, [r3, #0]
10004102:	79db      	ldrb	r3, [r3, #7]
10004104:	2b00      	cmp	r3, #0
10004106:	d00f      	beq.n	10004128 <PWM_CCU4_lInit_Interrupt+0x5c>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
10004108:	687b      	ldr	r3, [r7, #4]
1000410a:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_up);
1000410c:	687b      	ldr	r3, [r7, #4]
1000410e:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
10004110:	7b9b      	ldrb	r3, [r3, #14]
10004112:	1c10      	adds	r0, r2, #0
10004114:	2102      	movs	r1, #2
10004116:	1c1a      	adds	r2, r3, #0
10004118:	f7fd fe80 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_up);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
1000411c:	687b      	ldr	r3, [r7, #4]
1000411e:	689b      	ldr	r3, [r3, #8]
10004120:	1c18      	adds	r0, r3, #0
10004122:	2102      	movs	r1, #2
10004124:	f7ff fe96 	bl	10003e54 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
10004128:	687b      	ldr	r3, [r7, #4]
1000412a:	681b      	ldr	r3, [r3, #0]
1000412c:	7a1b      	ldrb	r3, [r3, #8]
1000412e:	2b00      	cmp	r3, #0
10004130:	d00f      	beq.n	10004152 <PWM_CCU4_lInit_Interrupt+0x86>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
10004132:	687b      	ldr	r3, [r7, #4]
10004134:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_down);
10004136:	687b      	ldr	r3, [r7, #4]
10004138:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
1000413a:	7bdb      	ldrb	r3, [r3, #15]
1000413c:	1c10      	adds	r0, r2, #0
1000413e:	2103      	movs	r1, #3
10004140:	1c1a      	adds	r2, r3, #0
10004142:	f7fd fe6b 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN);
10004146:	687b      	ldr	r3, [r7, #4]
10004148:	689b      	ldr	r3, [r3, #8]
1000414a:	1c18      	adds	r0, r3, #0
1000414c:	2103      	movs	r1, #3
1000414e:	f7ff fe81 	bl	10003e54 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
10004152:	687b      	ldr	r3, [r7, #4]
10004154:	681b      	ldr	r3, [r3, #0]
10004156:	7a5b      	ldrb	r3, [r3, #9]
10004158:	2b00      	cmp	r3, #0
1000415a:	d00f      	beq.n	1000417c <PWM_CCU4_lInit_Interrupt+0xb0>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
1000415c:	687b      	ldr	r3, [r7, #4]
1000415e:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_one_match_down);
10004160:	687b      	ldr	r3, [r7, #4]
10004162:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
10004164:	7c1b      	ldrb	r3, [r3, #16]
10004166:	1c10      	adds	r0, r2, #0
10004168:	2101      	movs	r1, #1
1000416a:	1c1a      	adds	r2, r3, #0
1000416c:	f7fd fe56 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_one_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH);
10004170:	687b      	ldr	r3, [r7, #4]
10004172:	689b      	ldr	r3, [r3, #8]
10004174:	1c18      	adds	r0, r3, #0
10004176:	2101      	movs	r1, #1
10004178:	f7ff fe6c 	bl	10003e54 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
1000417c:	687b      	ldr	r3, [r7, #4]
1000417e:	681b      	ldr	r3, [r3, #0]
10004180:	7a9b      	ldrb	r3, [r3, #10]
10004182:	2b00      	cmp	r3, #0
10004184:	d00f      	beq.n	100041a6 <PWM_CCU4_lInit_Interrupt+0xda>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
10004186:	687b      	ldr	r3, [r7, #4]
10004188:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e0);
1000418a:	687b      	ldr	r3, [r7, #4]
1000418c:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
1000418e:	7c5b      	ldrb	r3, [r3, #17]
10004190:	1c10      	adds	r0, r2, #0
10004192:	2108      	movs	r1, #8
10004194:	1c1a      	adds	r2, r3, #0
10004196:	f7fd fe41 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e0);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
1000419a:	687b      	ldr	r3, [r7, #4]
1000419c:	689b      	ldr	r3, [r3, #8]
1000419e:	1c18      	adds	r0, r3, #0
100041a0:	2108      	movs	r1, #8
100041a2:	f7ff fe57 	bl	10003e54 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
100041a6:	687b      	ldr	r3, [r7, #4]
100041a8:	681b      	ldr	r3, [r3, #0]
100041aa:	7adb      	ldrb	r3, [r3, #11]
100041ac:	2b00      	cmp	r3, #0
100041ae:	d00f      	beq.n	100041d0 <PWM_CCU4_lInit_Interrupt+0x104>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
100041b0:	687b      	ldr	r3, [r7, #4]
100041b2:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e1);
100041b4:	687b      	ldr	r3, [r7, #4]
100041b6:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
100041b8:	7c9b      	ldrb	r3, [r3, #18]
100041ba:	1c10      	adds	r0, r2, #0
100041bc:	2109      	movs	r1, #9
100041be:	1c1a      	adds	r2, r3, #0
100041c0:	f7fd fe2c 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e1);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1);
100041c4:	687b      	ldr	r3, [r7, #4]
100041c6:	689b      	ldr	r3, [r3, #8]
100041c8:	1c18      	adds	r0, r3, #0
100041ca:	2109      	movs	r1, #9
100041cc:	f7ff fe42 	bl	10003e54 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
100041d0:	687b      	ldr	r3, [r7, #4]
100041d2:	681b      	ldr	r3, [r3, #0]
100041d4:	7b1b      	ldrb	r3, [r3, #12]
100041d6:	2b00      	cmp	r3, #0
100041d8:	d00f      	beq.n	100041fa <PWM_CCU4_lInit_Interrupt+0x12e>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
100041da:	687b      	ldr	r3, [r7, #4]
100041dc:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e2);
100041de:	687b      	ldr	r3, [r7, #4]
100041e0:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
100041e2:	7cdb      	ldrb	r3, [r3, #19]
100041e4:	1c10      	adds	r0, r2, #0
100041e6:	210a      	movs	r1, #10
100041e8:	1c1a      	adds	r2, r3, #0
100041ea:	f7fd fe17 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e2);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
100041ee:	687b      	ldr	r3, [r7, #4]
100041f0:	689b      	ldr	r3, [r3, #8]
100041f2:	1c18      	adds	r0, r3, #0
100041f4:	210a      	movs	r1, #10
100041f6:	f7ff fe2d 	bl	10003e54 <XMC_CCU4_SLICE_EnableEvent>
  }
}
100041fa:	46bd      	mov	sp, r7
100041fc:	b002      	add	sp, #8
100041fe:	bd80      	pop	{r7, pc}

10004200 <PWM_CCU4_lConfigure_Events>:

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{
10004200:	b590      	push	{r4, r7, lr}
10004202:	b083      	sub	sp, #12
10004204:	af00      	add	r7, sp, #0
10004206:	6078      	str	r0, [r7, #4]

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
10004208:	687b      	ldr	r3, [r7, #4]
1000420a:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
1000420c:	687b      	ldr	r3, [r7, #4]
1000420e:	681b      	ldr	r3, [r3, #0]

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
10004210:	695b      	ldr	r3, [r3, #20]
10004212:	1c10      	adds	r0, r2, #0
10004214:	2101      	movs	r1, #1
10004216:	1c1a      	adds	r2, r3, #0
10004218:	f7fd fd4a 	bl	10001cb0 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
1000421c:	687b      	ldr	r3, [r7, #4]
1000421e:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
10004220:	687b      	ldr	r3, [r7, #4]
10004222:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
10004224:	699b      	ldr	r3, [r3, #24]
10004226:	1c10      	adds	r0, r2, #0
10004228:	2102      	movs	r1, #2
1000422a:	1c1a      	adds	r2, r3, #0
1000422c:	f7fd fd40 	bl	10001cb0 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
10004230:	687b      	ldr	r3, [r7, #4]
10004232:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
10004234:	687b      	ldr	r3, [r7, #4]
10004236:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
10004238:	69db      	ldr	r3, [r3, #28]
1000423a:	1c10      	adds	r0, r2, #0
1000423c:	2103      	movs	r1, #3
1000423e:	1c1a      	adds	r2, r3, #0
10004240:	f7fd fd36 	bl	10001cb0 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
10004244:	687b      	ldr	r3, [r7, #4]
10004246:	681b      	ldr	r3, [r3, #0]
10004248:	2220      	movs	r2, #32
1000424a:	5c9b      	ldrb	r3, [r3, r2]
1000424c:	2b00      	cmp	r3, #0
1000424e:	d00c      	beq.n	1000426a <PWM_CCU4_lConfigure_Events+0x6a>
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
10004250:	687b      	ldr	r3, [r7, #4]
10004252:	6898      	ldr	r0, [r3, #8]
10004254:	687b      	ldr	r3, [r7, #4]
10004256:	681b      	ldr	r3, [r3, #0]
10004258:	2220      	movs	r2, #32
1000425a:	5c99      	ldrb	r1, [r3, r2]
                               handle_ptr->config_ptr->ext_start_mode);
1000425c:	687b      	ldr	r3, [r7, #4]
1000425e:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
10004260:	2221      	movs	r2, #33	; 0x21
10004262:	5c9b      	ldrb	r3, [r3, r2]
10004264:	1c1a      	adds	r2, r3, #0
10004266:	f7fd fb15 	bl	10001894 <XMC_CCU4_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
1000426a:	687b      	ldr	r3, [r7, #4]
1000426c:	681b      	ldr	r3, [r3, #0]
1000426e:	2222      	movs	r2, #34	; 0x22
10004270:	5c9b      	ldrb	r3, [r3, r2]
10004272:	2b00      	cmp	r3, #0
10004274:	d00c      	beq.n	10004290 <PWM_CCU4_lConfigure_Events+0x90>
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
10004276:	687b      	ldr	r3, [r7, #4]
10004278:	6898      	ldr	r0, [r3, #8]
1000427a:	687b      	ldr	r3, [r7, #4]
1000427c:	681b      	ldr	r3, [r3, #0]
1000427e:	2222      	movs	r2, #34	; 0x22
10004280:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_stop_mode);
10004282:	687b      	ldr	r3, [r7, #4]
10004284:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
10004286:	2223      	movs	r2, #35	; 0x23
10004288:	5c9b      	ldrb	r3, [r3, r2]
1000428a:	1c1a      	adds	r2, r3, #0
1000428c:	f7fd fb36 	bl	100018fc <XMC_CCU4_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
10004290:	687b      	ldr	r3, [r7, #4]
10004292:	681b      	ldr	r3, [r3, #0]
10004294:	2224      	movs	r2, #36	; 0x24
10004296:	5c9b      	ldrb	r3, [r3, r2]
10004298:	2b00      	cmp	r3, #0
1000429a:	d009      	beq.n	100042b0 <PWM_CCU4_lConfigure_Events+0xb0>
  {
    XMC_CCU4_SLICE_DirectionConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
1000429c:	687b      	ldr	r3, [r7, #4]
1000429e:	6899      	ldr	r1, [r3, #8]
100042a0:	687b      	ldr	r3, [r7, #4]
100042a2:	681b      	ldr	r3, [r3, #0]
100042a4:	2224      	movs	r2, #36	; 0x24
100042a6:	5c9b      	ldrb	r3, [r3, r2]
100042a8:	1c08      	adds	r0, r1, #0
100042aa:	1c19      	adds	r1, r3, #0
100042ac:	f7fd fc12 	bl	10001ad4 <XMC_CCU4_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
100042b0:	687b      	ldr	r3, [r7, #4]
100042b2:	681b      	ldr	r3, [r3, #0]
100042b4:	2225      	movs	r2, #37	; 0x25
100042b6:	5c9b      	ldrb	r3, [r3, r2]
100042b8:	2b00      	cmp	r3, #0
100042ba:	d009      	beq.n	100042d0 <PWM_CCU4_lConfigure_Events+0xd0>
  {
    XMC_CCU4_SLICE_GateConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
100042bc:	687b      	ldr	r3, [r7, #4]
100042be:	6899      	ldr	r1, [r3, #8]
100042c0:	687b      	ldr	r3, [r7, #4]
100042c2:	681b      	ldr	r3, [r3, #0]
100042c4:	2225      	movs	r2, #37	; 0x25
100042c6:	5c9b      	ldrb	r3, [r3, r2]
100042c8:	1c08      	adds	r0, r1, #0
100042ca:	1c19      	adds	r1, r3, #0
100042cc:	f7fd fbcc 	bl	10001a68 <XMC_CCU4_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
100042d0:	687b      	ldr	r3, [r7, #4]
100042d2:	681b      	ldr	r3, [r3, #0]
100042d4:	2226      	movs	r2, #38	; 0x26
100042d6:	5c9b      	ldrb	r3, [r3, r2]
100042d8:	2b00      	cmp	r3, #0
100042da:	d009      	beq.n	100042f0 <PWM_CCU4_lConfigure_Events+0xf0>
  {
    XMC_CCU4_SLICE_CountConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_event);
100042dc:	687b      	ldr	r3, [r7, #4]
100042de:	6899      	ldr	r1, [r3, #8]
100042e0:	687b      	ldr	r3, [r7, #4]
100042e2:	681b      	ldr	r3, [r3, #0]
100042e4:	2226      	movs	r2, #38	; 0x26
100042e6:	5c9b      	ldrb	r3, [r3, r2]
100042e8:	1c08      	adds	r0, r1, #0
100042ea:	1c19      	adds	r1, r3, #0
100042ec:	f7fd fba0 	bl	10001a30 <XMC_CCU4_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
100042f0:	687b      	ldr	r3, [r7, #4]
100042f2:	681b      	ldr	r3, [r3, #0]
100042f4:	2227      	movs	r2, #39	; 0x27
100042f6:	5c9b      	ldrb	r3, [r3, r2]
100042f8:	2b00      	cmp	r3, #0
100042fa:	d009      	beq.n	10004310 <PWM_CCU4_lConfigure_Events+0x110>
  {
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
100042fc:	687b      	ldr	r3, [r7, #4]
100042fe:	6899      	ldr	r1, [r3, #8]
10004300:	687b      	ldr	r3, [r7, #4]
10004302:	681b      	ldr	r3, [r3, #0]
10004304:	2227      	movs	r2, #39	; 0x27
10004306:	5c9b      	ldrb	r3, [r3, r2]
10004308:	1c08      	adds	r0, r1, #0
1000430a:	1c19      	adds	r1, r3, #0
1000430c:	f7fd fb28 	bl	10001960 <XMC_CCU4_SLICE_LoadConfig>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
10004310:	687b      	ldr	r3, [r7, #4]
10004312:	681b      	ldr	r3, [r3, #0]
10004314:	2228      	movs	r2, #40	; 0x28
10004316:	5c9b      	ldrb	r3, [r3, r2]
10004318:	2b00      	cmp	r3, #0
1000431a:	d010      	beq.n	1000433e <PWM_CCU4_lConfigure_Events+0x13e>
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
1000431c:	687b      	ldr	r3, [r7, #4]
1000431e:	6898      	ldr	r0, [r3, #8]
10004320:	687b      	ldr	r3, [r7, #4]
10004322:	681b      	ldr	r3, [r3, #0]
10004324:	2228      	movs	r2, #40	; 0x28
10004326:	5c99      	ldrb	r1, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
10004328:	687b      	ldr	r3, [r7, #4]
1000432a:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
1000432c:	2229      	movs	r2, #41	; 0x29
1000432e:	5c9c      	ldrb	r4, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
10004330:	687b      	ldr	r3, [r7, #4]
10004332:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10004334:	222a      	movs	r2, #42	; 0x2a
10004336:	5c9b      	ldrb	r3, [r3, r2]
10004338:	1c22      	adds	r2, r4, #0
1000433a:	f7fd fb2d 	bl	10001998 <XMC_CCU4_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
1000433e:	687b      	ldr	r3, [r7, #4]
10004340:	681b      	ldr	r3, [r3, #0]
10004342:	222e      	movs	r2, #46	; 0x2e
10004344:	5c9b      	ldrb	r3, [r3, r2]
10004346:	2b03      	cmp	r3, #3
10004348:	d117      	bne.n	1000437a <PWM_CCU4_lConfigure_Events+0x17a>
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
1000434a:	687b      	ldr	r3, [r7, #4]
1000434c:	6898      	ldr	r0, [r3, #8]
1000434e:	687b      	ldr	r3, [r7, #4]
10004350:	681b      	ldr	r3, [r3, #0]
10004352:	2230      	movs	r2, #48	; 0x30
10004354:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_trap_sync);
10004356:	687b      	ldr	r3, [r7, #4]
10004358:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
1000435a:	222f      	movs	r2, #47	; 0x2f
1000435c:	5c9b      	ldrb	r3, [r3, r2]
1000435e:	1c1a      	adds	r2, r3, #0
10004360:	f7fd fbec 	bl	10001b3c <XMC_CCU4_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);

    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
10004364:	687b      	ldr	r3, [r7, #4]
10004366:	681b      	ldr	r3, [r3, #0]
10004368:	222d      	movs	r2, #45	; 0x2d
1000436a:	5c9b      	ldrb	r3, [r3, r2]
1000436c:	2b00      	cmp	r3, #0
1000436e:	d004      	beq.n	1000437a <PWM_CCU4_lConfigure_Events+0x17a>
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
10004370:	687b      	ldr	r3, [r7, #4]
10004372:	689b      	ldr	r3, [r3, #8]
10004374:	1c18      	adds	r0, r3, #0
10004376:	f7ff fd19 	bl	10003dac <XMC_CCU4_SLICE_EnableTrap>
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
1000437a:	687b      	ldr	r3, [r7, #4]
1000437c:	681b      	ldr	r3, [r3, #0]
1000437e:	222b      	movs	r2, #43	; 0x2b
10004380:	5c9b      	ldrb	r3, [r3, r2]
10004382:	2b02      	cmp	r3, #2
10004384:	d117      	bne.n	100043b6 <PWM_CCU4_lConfigure_Events+0x1b6>
      == handle_ptr->config_ptr->ext_override_level_event))
10004386:	687b      	ldr	r3, [r7, #4]
10004388:	681b      	ldr	r3, [r3, #0]
1000438a:	222c      	movs	r2, #44	; 0x2c
1000438c:	5c9b      	ldrb	r3, [r3, r2]
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
1000438e:	2b03      	cmp	r3, #3
10004390:	d111      	bne.n	100043b6 <PWM_CCU4_lConfigure_Events+0x1b6>
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
10004392:	687b      	ldr	r3, [r7, #4]
10004394:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
10004396:	687b      	ldr	r3, [r7, #4]
10004398:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
1000439a:	699a      	ldr	r2, [r3, #24]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
1000439c:	687b      	ldr	r3, [r7, #4]
1000439e:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
100043a0:	69db      	ldr	r3, [r3, #28]
100043a2:	1c08      	adds	r0, r1, #0
100043a4:	1c11      	adds	r1, r2, #0
100043a6:	1c1a      	adds	r2, r3, #0
100043a8:	f7fd fc0e 	bl	10001bc8 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU4_SLICE_StatusBitOverrideConfig(handle_ptr->ccu4_slice_ptr);
100043ac:	687b      	ldr	r3, [r7, #4]
100043ae:	689b      	ldr	r3, [r3, #8]
100043b0:	1c18      	adds	r0, r3, #0
100043b2:	f7fd fbab 	bl	10001b0c <XMC_CCU4_SLICE_StatusBitOverrideConfig>
  }

}
100043b6:	46bd      	mov	sp, r7
100043b8:	b003      	add	sp, #12
100043ba:	bd90      	pop	{r4, r7, pc}

100043bc <PWM_CCU4_Start>:
/**********************************************************************************************************/
/*Starts the CCU4_CC4 slice. This needs to be called even if external start is configured.*/
PWM_CCU4_STATUS_t PWM_CCU4_Start(PWM_CCU4_t* handle_ptr)
{
100043bc:	b580      	push	{r7, lr}
100043be:	b084      	sub	sp, #16
100043c0:	af00      	add	r7, sp, #0
100043c2:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;

  status = PWM_CCU4_STATUS_FAILURE;
100043c4:	230f      	movs	r3, #15
100043c6:	18fb      	adds	r3, r7, r3
100043c8:	2201      	movs	r2, #1
100043ca:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU4_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU4_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU4_STATE_STOPPED == handle_ptr->state))
100043cc:	687b      	ldr	r3, [r7, #4]
100043ce:	7f1b      	ldrb	r3, [r3, #28]
100043d0:	2b01      	cmp	r3, #1
100043d2:	d003      	beq.n	100043dc <PWM_CCU4_Start+0x20>
100043d4:	687b      	ldr	r3, [r7, #4]
100043d6:	7f1b      	ldrb	r3, [r3, #28]
100043d8:	2b03      	cmp	r3, #3
100043da:	d119      	bne.n	10004410 <PWM_CCU4_Start+0x54>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_module_ptr, handle_ptr->slice_number);
100043dc:	687b      	ldr	r3, [r7, #4]
100043de:	685a      	ldr	r2, [r3, #4]
100043e0:	687b      	ldr	r3, [r7, #4]
100043e2:	7b5b      	ldrb	r3, [r3, #13]
100043e4:	1c10      	adds	r0, r2, #0
100043e6:	1c19      	adds	r1, r3, #0
100043e8:	f7ff fcd0 	bl	10003d8c <XMC_CCU4_EnableClock>

    if (XMC_CCU4_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
100043ec:	687b      	ldr	r3, [r7, #4]
100043ee:	681b      	ldr	r3, [r3, #0]
100043f0:	2220      	movs	r2, #32
100043f2:	5c9b      	ldrb	r3, [r3, r2]
100043f4:	2b00      	cmp	r3, #0
100043f6:	d104      	bne.n	10004402 <PWM_CCU4_Start+0x46>
    {
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
100043f8:	687b      	ldr	r3, [r7, #4]
100043fa:	689b      	ldr	r3, [r3, #8]
100043fc:	1c18      	adds	r0, r3, #0
100043fe:	f7ff fce3 	bl	10003dc8 <XMC_CCU4_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU4_STATE_RUNNING;
10004402:	687b      	ldr	r3, [r7, #4]
10004404:	2202      	movs	r2, #2
10004406:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU4_STATUS_SUCCESS;
10004408:	230f      	movs	r3, #15
1000440a:	18fb      	adds	r3, r7, r3
1000440c:	2200      	movs	r2, #0
1000440e:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU4_Start:start PWM");
  }
  return (status);
10004410:	230f      	movs	r3, #15
10004412:	18fb      	adds	r3, r7, r3
10004414:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU4_Start() api */
10004416:	1c18      	adds	r0, r3, #0
10004418:	46bd      	mov	sp, r7
1000441a:	b004      	add	sp, #16
1000441c:	bd80      	pop	{r7, pc}
1000441e:	46c0      	nop			; (mov r8, r8)

10004420 <PWM_CCU4_Stop>:
/**********************************************************************************************************/
/*Stops the CCU4_CC4 slice. */
PWM_CCU4_STATUS_t PWM_CCU4_Stop(PWM_CCU4_t* handle_ptr)
{
10004420:	b580      	push	{r7, lr}
10004422:	b084      	sub	sp, #16
10004424:	af00      	add	r7, sp, #0
10004426:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;

  status = PWM_CCU4_STATUS_FAILURE;
10004428:	230f      	movs	r3, #15
1000442a:	18fb      	adds	r3, r7, r3
1000442c:	2201      	movs	r2, #1
1000442e:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU4_Stop:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU4_STATE_UNINITIALIZED != handle_ptr->state)
10004430:	687b      	ldr	r3, [r7, #4]
10004432:	7f1b      	ldrb	r3, [r3, #28]
10004434:	2b00      	cmp	r3, #0
10004436:	d010      	beq.n	1000445a <PWM_CCU4_Stop+0x3a>
  {
    XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
10004438:	687b      	ldr	r3, [r7, #4]
1000443a:	689b      	ldr	r3, [r3, #8]
1000443c:	1c18      	adds	r0, r3, #0
1000443e:	f7ff fccd 	bl	10003ddc <XMC_CCU4_SLICE_StopTimer>
    XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
10004442:	687b      	ldr	r3, [r7, #4]
10004444:	689b      	ldr	r3, [r3, #8]
10004446:	1c18      	adds	r0, r3, #0
10004448:	f7ff fcd2 	bl	10003df0 <XMC_CCU4_SLICE_ClearTimer>

    handle_ptr->state = PWM_CCU4_STATE_STOPPED;
1000444c:	687b      	ldr	r3, [r7, #4]
1000444e:	2203      	movs	r2, #3
10004450:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU4_STATUS_SUCCESS;
10004452:	230f      	movs	r3, #15
10004454:	18fb      	adds	r3, r7, r3
10004456:	2200      	movs	r2, #0
10004458:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU4_Stop:stop PWM");
  }
  return (status);
1000445a:	230f      	movs	r3, #15
1000445c:	18fb      	adds	r3, r7, r3
1000445e:	781b      	ldrb	r3, [r3, #0]

} /* end of PWM_CCU4_Stop() api */
10004460:	1c18      	adds	r0, r3, #0
10004462:	46bd      	mov	sp, r7
10004464:	b004      	add	sp, #16
10004466:	bd80      	pop	{r7, pc}

10004468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10004468:	b580      	push	{r7, lr}
1000446a:	b082      	sub	sp, #8
1000446c:	af00      	add	r7, sp, #0
1000446e:	1c02      	adds	r2, r0, #0
10004470:	1dfb      	adds	r3, r7, #7
10004472:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004474:	1dfb      	adds	r3, r7, #7
10004476:	781b      	ldrb	r3, [r3, #0]
10004478:	2b7f      	cmp	r3, #127	; 0x7f
1000447a:	d809      	bhi.n	10004490 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000447c:	4b06      	ldr	r3, [pc, #24]	; (10004498 <__NVIC_EnableIRQ+0x30>)
1000447e:	1dfa      	adds	r2, r7, #7
10004480:	7812      	ldrb	r2, [r2, #0]
10004482:	1c11      	adds	r1, r2, #0
10004484:	221f      	movs	r2, #31
10004486:	400a      	ands	r2, r1
10004488:	2101      	movs	r1, #1
1000448a:	4091      	lsls	r1, r2
1000448c:	1c0a      	adds	r2, r1, #0
1000448e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10004490:	46bd      	mov	sp, r7
10004492:	b002      	add	sp, #8
10004494:	bd80      	pop	{r7, pc}
10004496:	46c0      	nop			; (mov r8, r8)
10004498:	e000e100 	.word	0xe000e100

1000449c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1000449c:	b5b0      	push	{r4, r5, r7, lr}
1000449e:	b082      	sub	sp, #8
100044a0:	af00      	add	r7, sp, #0
100044a2:	1c02      	adds	r2, r0, #0
100044a4:	6039      	str	r1, [r7, #0]
100044a6:	1dfb      	adds	r3, r7, #7
100044a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100044aa:	1dfb      	adds	r3, r7, #7
100044ac:	781b      	ldrb	r3, [r3, #0]
100044ae:	2b7f      	cmp	r3, #127	; 0x7f
100044b0:	d827      	bhi.n	10004502 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100044b2:	4c2d      	ldr	r4, [pc, #180]	; (10004568 <__NVIC_SetPriority+0xcc>)
100044b4:	1dfb      	adds	r3, r7, #7
100044b6:	781b      	ldrb	r3, [r3, #0]
100044b8:	b25b      	sxtb	r3, r3
100044ba:	089b      	lsrs	r3, r3, #2
100044bc:	492a      	ldr	r1, [pc, #168]	; (10004568 <__NVIC_SetPriority+0xcc>)
100044be:	1dfa      	adds	r2, r7, #7
100044c0:	7812      	ldrb	r2, [r2, #0]
100044c2:	b252      	sxtb	r2, r2
100044c4:	0892      	lsrs	r2, r2, #2
100044c6:	32c0      	adds	r2, #192	; 0xc0
100044c8:	0092      	lsls	r2, r2, #2
100044ca:	5852      	ldr	r2, [r2, r1]
100044cc:	1df9      	adds	r1, r7, #7
100044ce:	7809      	ldrb	r1, [r1, #0]
100044d0:	1c08      	adds	r0, r1, #0
100044d2:	2103      	movs	r1, #3
100044d4:	4001      	ands	r1, r0
100044d6:	00c9      	lsls	r1, r1, #3
100044d8:	1c08      	adds	r0, r1, #0
100044da:	21ff      	movs	r1, #255	; 0xff
100044dc:	4081      	lsls	r1, r0
100044de:	43c9      	mvns	r1, r1
100044e0:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100044e2:	683a      	ldr	r2, [r7, #0]
100044e4:	0192      	lsls	r2, r2, #6
100044e6:	20ff      	movs	r0, #255	; 0xff
100044e8:	4002      	ands	r2, r0
100044ea:	1df8      	adds	r0, r7, #7
100044ec:	7800      	ldrb	r0, [r0, #0]
100044ee:	1c05      	adds	r5, r0, #0
100044f0:	2003      	movs	r0, #3
100044f2:	4028      	ands	r0, r5
100044f4:	00c0      	lsls	r0, r0, #3
100044f6:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100044f8:	430a      	orrs	r2, r1
100044fa:	33c0      	adds	r3, #192	; 0xc0
100044fc:	009b      	lsls	r3, r3, #2
100044fe:	511a      	str	r2, [r3, r4]
10004500:	e02e      	b.n	10004560 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004502:	4c1a      	ldr	r4, [pc, #104]	; (1000456c <__NVIC_SetPriority+0xd0>)
10004504:	1dfb      	adds	r3, r7, #7
10004506:	781b      	ldrb	r3, [r3, #0]
10004508:	1c1a      	adds	r2, r3, #0
1000450a:	230f      	movs	r3, #15
1000450c:	4013      	ands	r3, r2
1000450e:	3b08      	subs	r3, #8
10004510:	0899      	lsrs	r1, r3, #2
10004512:	4a16      	ldr	r2, [pc, #88]	; (1000456c <__NVIC_SetPriority+0xd0>)
10004514:	1dfb      	adds	r3, r7, #7
10004516:	781b      	ldrb	r3, [r3, #0]
10004518:	1c18      	adds	r0, r3, #0
1000451a:	230f      	movs	r3, #15
1000451c:	4003      	ands	r3, r0
1000451e:	3b08      	subs	r3, #8
10004520:	089b      	lsrs	r3, r3, #2
10004522:	3306      	adds	r3, #6
10004524:	009b      	lsls	r3, r3, #2
10004526:	18d3      	adds	r3, r2, r3
10004528:	685b      	ldr	r3, [r3, #4]
1000452a:	1dfa      	adds	r2, r7, #7
1000452c:	7812      	ldrb	r2, [r2, #0]
1000452e:	1c10      	adds	r0, r2, #0
10004530:	2203      	movs	r2, #3
10004532:	4002      	ands	r2, r0
10004534:	00d2      	lsls	r2, r2, #3
10004536:	1c10      	adds	r0, r2, #0
10004538:	22ff      	movs	r2, #255	; 0xff
1000453a:	4082      	lsls	r2, r0
1000453c:	43d2      	mvns	r2, r2
1000453e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004540:	683b      	ldr	r3, [r7, #0]
10004542:	019b      	lsls	r3, r3, #6
10004544:	20ff      	movs	r0, #255	; 0xff
10004546:	4003      	ands	r3, r0
10004548:	1df8      	adds	r0, r7, #7
1000454a:	7800      	ldrb	r0, [r0, #0]
1000454c:	1c05      	adds	r5, r0, #0
1000454e:	2003      	movs	r0, #3
10004550:	4028      	ands	r0, r5
10004552:	00c0      	lsls	r0, r0, #3
10004554:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004556:	431a      	orrs	r2, r3
10004558:	1d8b      	adds	r3, r1, #6
1000455a:	009b      	lsls	r3, r3, #2
1000455c:	18e3      	adds	r3, r4, r3
1000455e:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10004560:	46bd      	mov	sp, r7
10004562:	b002      	add	sp, #8
10004564:	bdb0      	pop	{r4, r5, r7, pc}
10004566:	46c0      	nop			; (mov r8, r8)
10004568:	e000e100 	.word	0xe000e100
1000456c:	e000ed00 	.word	0xe000ed00

10004570 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
10004570:	b580      	push	{r7, lr}
10004572:	b082      	sub	sp, #8
10004574:	af00      	add	r7, sp, #0
10004576:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
10004578:	687b      	ldr	r3, [r7, #4]
1000457a:	789b      	ldrb	r3, [r3, #2]
1000457c:	b25b      	sxtb	r3, r3
1000457e:	1c18      	adds	r0, r3, #0
10004580:	f7ff ff72 	bl	10004468 <__NVIC_EnableIRQ>
}
10004584:	46bd      	mov	sp, r7
10004586:	b002      	add	sp, #8
10004588:	bd80      	pop	{r7, pc}
1000458a:	46c0      	nop			; (mov r8, r8)

1000458c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
1000458c:	b580      	push	{r7, lr}
1000458e:	b082      	sub	sp, #8
10004590:	af00      	add	r7, sp, #0
10004592:	6078      	str	r0, [r7, #4]
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
10004594:	687b      	ldr	r3, [r7, #4]
10004596:	789a      	ldrb	r2, [r3, #2]
10004598:	687b      	ldr	r3, [r7, #4]
1000459a:	78db      	ldrb	r3, [r3, #3]
1000459c:	1c19      	adds	r1, r3, #0
1000459e:	b253      	sxtb	r3, r2
100045a0:	1c18      	adds	r0, r3, #0
100045a2:	f7ff ff7b 	bl	1000449c <__NVIC_SetPriority>
  
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
100045a6:	687b      	ldr	r3, [r7, #4]
100045a8:	789b      	ldrb	r3, [r3, #2]
100045aa:	b2da      	uxtb	r2, r3
100045ac:	687b      	ldr	r3, [r7, #4]
100045ae:	789b      	ldrb	r3, [r3, #2]
100045b0:	b25b      	sxtb	r3, r3
100045b2:	021b      	lsls	r3, r3, #8
100045b4:	b299      	uxth	r1, r3
100045b6:	687b      	ldr	r3, [r7, #4]
100045b8:	881b      	ldrh	r3, [r3, #0]
100045ba:	b29b      	uxth	r3, r3
100045bc:	430b      	orrs	r3, r1
100045be:	b29b      	uxth	r3, r3
100045c0:	b29b      	uxth	r3, r3
100045c2:	1c10      	adds	r0, r2, #0
100045c4:	1c19      	adds	r1, r3, #0
100045c6:	f7fd f855 	bl	10001674 <XMC_SCU_SetInterruptControl>
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
100045ca:	687b      	ldr	r3, [r7, #4]
100045cc:	791b      	ldrb	r3, [r3, #4]
100045ce:	2b00      	cmp	r3, #0
100045d0:	d003      	beq.n	100045da <INTERRUPT_Init+0x4e>
  {
    INTERRUPT_Enable(handler);
100045d2:	687b      	ldr	r3, [r7, #4]
100045d4:	1c18      	adds	r0, r3, #0
100045d6:	f7ff ffcb 	bl	10004570 <INTERRUPT_Enable>
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
100045da:	2300      	movs	r3, #0
}
100045dc:	1c18      	adds	r0, r3, #0
100045de:	46bd      	mov	sp, r7
100045e0:	b002      	add	sp, #8
100045e2:	bd80      	pop	{r7, pc}

100045e4 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
100045e4:	b580      	push	{r7, lr}
100045e6:	b082      	sub	sp, #8
100045e8:	af00      	add	r7, sp, #0
100045ea:	6078      	str	r0, [r7, #4]
100045ec:	1c0a      	adds	r2, r1, #0
100045ee:	1cfb      	adds	r3, r7, #3
100045f0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
100045f2:	1cfb      	adds	r3, r7, #3
100045f4:	781b      	ldrb	r3, [r3, #0]
100045f6:	2201      	movs	r2, #1
100045f8:	409a      	lsls	r2, r3
100045fa:	687b      	ldr	r3, [r7, #4]
100045fc:	60da      	str	r2, [r3, #12]
}
100045fe:	46bd      	mov	sp, r7
10004600:	b002      	add	sp, #8
10004602:	bd80      	pop	{r7, pc}

10004604 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
10004604:	b580      	push	{r7, lr}
10004606:	b082      	sub	sp, #8
10004608:	af00      	add	r7, sp, #0
1000460a:	6078      	str	r0, [r7, #4]
1000460c:	1c0a      	adds	r2, r1, #0
1000460e:	1cbb      	adds	r3, r7, #2
10004610:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10004612:	1cbb      	adds	r3, r7, #2
10004614:	881a      	ldrh	r2, [r3, #0]
10004616:	687b      	ldr	r3, [r7, #4]
10004618:	635a      	str	r2, [r3, #52]	; 0x34
}
1000461a:	46bd      	mov	sp, r7
1000461c:	b002      	add	sp, #8
1000461e:	bd80      	pop	{r7, pc}

10004620 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
10004620:	b580      	push	{r7, lr}
10004622:	b082      	sub	sp, #8
10004624:	af00      	add	r7, sp, #0
10004626:	6078      	str	r0, [r7, #4]
10004628:	1c0a      	adds	r2, r1, #0
1000462a:	1cbb      	adds	r3, r7, #2
1000462c:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
1000462e:	1cbb      	adds	r3, r7, #2
10004630:	881a      	ldrh	r2, [r3, #0]
10004632:	687b      	ldr	r3, [r7, #4]
10004634:	63da      	str	r2, [r3, #60]	; 0x3c
}
10004636:	46bd      	mov	sp, r7
10004638:	b002      	add	sp, #8
1000463a:	bd80      	pop	{r7, pc}

1000463c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
1000463c:	b580      	push	{r7, lr}
1000463e:	b082      	sub	sp, #8
10004640:	af00      	add	r7, sp, #0
10004642:	6078      	str	r0, [r7, #4]
10004644:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
10004646:	687b      	ldr	r3, [r7, #4]
10004648:	683a      	ldr	r2, [r7, #0]
1000464a:	611a      	str	r2, [r3, #16]
}
1000464c:	46bd      	mov	sp, r7
1000464e:	b002      	add	sp, #8
10004650:	bd80      	pop	{r7, pc}
10004652:	46c0      	nop			; (mov r8, r8)

10004654 <XMC_CCU4_SLICE_SetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerValue().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerValue(XMC_CCU4_SLICE_t *const slice, const uint16_t timer_val)
{
10004654:	b580      	push	{r7, lr}
10004656:	b082      	sub	sp, #8
10004658:	af00      	add	r7, sp, #0
1000465a:	6078      	str	r0, [r7, #4]
1000465c:	1c0a      	adds	r2, r1, #0
1000465e:	1cbb      	adds	r3, r7, #2
10004660:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TIMER = (uint32_t) timer_val;
10004662:	1cbb      	adds	r3, r7, #2
10004664:	881a      	ldrh	r2, [r3, #0]
10004666:	687b      	ldr	r3, [r7, #4]
10004668:	671a      	str	r2, [r3, #112]	; 0x70
}
1000466a:	46bd      	mov	sp, r7
1000466c:	b002      	add	sp, #8
1000466e:	bd80      	pop	{r7, pc}

10004670 <HALL_POSIF_Init>:
}
/**
 * This function initializes the hall_posif App and low level app.
 */
HALL_POSIF_STATUS_t HALL_POSIF_Init(HALL_POSIF_t * const HandlePtr)
{
10004670:	b580      	push	{r7, lr}
10004672:	b084      	sub	sp, #16
10004674:	af00      	add	r7, sp, #0
10004676:	6078      	str	r0, [r7, #4]
  HALL_POSIF_STATUS_t status = HALL_POSIF_STATUS_SUCCESS;
10004678:	230f      	movs	r3, #15
1000467a:	18fb      	adds	r3, r7, r3
1000467c:	2200      	movs	r2, #0
1000467e:	701a      	strb	r2, [r3, #0]

#if (HALL_POSIF_ERU_AVALABLE == 1U)
  uint32_t etl_count = 0U;
#endif
  if (HALL_POSIF_UNINITIALISED == HandlePtr->state)
10004680:	687b      	ldr	r3, [r7, #4]
10004682:	2284      	movs	r2, #132	; 0x84
10004684:	5c9b      	ldrb	r3, [r3, r2]
10004686:	2b00      	cmp	r3, #0
10004688:	d000      	beq.n	1000468c <HALL_POSIF_Init+0x1c>
1000468a:	e195      	b.n	100049b8 <HALL_POSIF_Init+0x348>
  {

    if (HALL_POSIF_STATUS_FAILURE == (HALL_POSIF_STATUS_t) GLOBAL_POSIF_Init(HandlePtr->global_posif_handle_ptr))
1000468c:	687b      	ldr	r3, [r7, #4]
1000468e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10004690:	1c18      	adds	r0, r3, #0
10004692:	f000 f9b1 	bl	100049f8 <GLOBAL_POSIF_Init>
10004696:	1e03      	subs	r3, r0, #0
10004698:	2b01      	cmp	r3, #1
1000469a:	d103      	bne.n	100046a4 <HALL_POSIF_Init+0x34>
    {
      /* Failure during GLOBAL_POSIF app initialization */
      status = HALL_POSIF_STATUS_FAILURE;
1000469c:	230f      	movs	r3, #15
1000469e:	18fb      	adds	r3, r7, r3
100046a0:	2201      	movs	r2, #1
100046a2:	701a      	strb	r2, [r3, #0]
    }

    if (HALL_POSIF_STATUS_FAILURE == (HALL_POSIF_STATUS_t) GLOBAL_CCU4_Init(HandlePtr->global_ccu4_handle_ptr))
100046a4:	687b      	ldr	r3, [r7, #4]
100046a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
100046a8:	1c18      	adds	r0, r3, #0
100046aa:	f000 f9ff 	bl	10004aac <GLOBAL_CCU4_Init>
100046ae:	1e03      	subs	r3, r0, #0
100046b0:	2b01      	cmp	r3, #1
100046b2:	d103      	bne.n	100046bc <HALL_POSIF_Init+0x4c>
    {
      /* Failure during GLOBAL_CCU4 app initialization */
      status = HALL_POSIF_STATUS_FAILURE;
100046b4:	230f      	movs	r3, #15
100046b6:	18fb      	adds	r3, r7, r3
100046b8:	2201      	movs	r2, #1
100046ba:	701a      	strb	r2, [r3, #0]
        XMC_ERU_OGU_Init( HandlePtr->etl_resource_ptr[etl_count]->eru,HandlePtr->etl_resource_ptr[etl_count]->ogu_channel, HandlePtr->ogu_conf_ptr[etl_count]);
      }
    }
#endif

    XMC_GPIO_Init(HandlePtr->hallinput_ptr[0]->port, HandlePtr->hallinput_ptr[0]->pin, HandlePtr->hallpinconfig_ptr);
100046bc:	687b      	ldr	r3, [r7, #4]
100046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100046c0:	6819      	ldr	r1, [r3, #0]
100046c2:	687b      	ldr	r3, [r7, #4]
100046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100046c6:	791a      	ldrb	r2, [r3, #4]
100046c8:	687b      	ldr	r3, [r7, #4]
100046ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100046cc:	1c08      	adds	r0, r1, #0
100046ce:	1c11      	adds	r1, r2, #0
100046d0:	1c1a      	adds	r2, r3, #0
100046d2:	f7fc fd59 	bl	10001188 <XMC_GPIO_Init>
    XMC_GPIO_Init(HandlePtr->hallinput_ptr[1]->port, HandlePtr->hallinput_ptr[1]->pin, HandlePtr->hallpinconfig_ptr);
100046d6:	687b      	ldr	r3, [r7, #4]
100046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100046da:	6819      	ldr	r1, [r3, #0]
100046dc:	687b      	ldr	r3, [r7, #4]
100046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100046e0:	791a      	ldrb	r2, [r3, #4]
100046e2:	687b      	ldr	r3, [r7, #4]
100046e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100046e6:	1c08      	adds	r0, r1, #0
100046e8:	1c11      	adds	r1, r2, #0
100046ea:	1c1a      	adds	r2, r3, #0
100046ec:	f7fc fd4c 	bl	10001188 <XMC_GPIO_Init>

    if (HALL_POSIF_3HALL == HandlePtr->config_ptr->halltype)
100046f0:	687b      	ldr	r3, [r7, #4]
100046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100046f4:	7b5b      	ldrb	r3, [r3, #13]
100046f6:	2b00      	cmp	r3, #0
100046f8:	d10c      	bne.n	10004714 <HALL_POSIF_Init+0xa4>
    {
      XMC_GPIO_Init(HandlePtr->hallinput_ptr[2]->port, HandlePtr->hallinput_ptr[2]->pin, HandlePtr->hallpinconfig_ptr);
100046fa:	687b      	ldr	r3, [r7, #4]
100046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100046fe:	6819      	ldr	r1, [r3, #0]
10004700:	687b      	ldr	r3, [r7, #4]
10004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004704:	791a      	ldrb	r2, [r3, #4]
10004706:	687b      	ldr	r3, [r7, #4]
10004708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000470a:	1c08      	adds	r0, r1, #0
1000470c:	1c11      	adds	r1, r2, #0
1000470e:	1c1a      	adds	r2, r3, #0
10004710:	f7fc fd3a 	bl	10001188 <XMC_GPIO_Init>
        XMC_ERU_ETL_SetStatusFlag(HandlePtr->etl_resource_ptr[2]->eru, HandlePtr->etl_resource_ptr[2]->etl_channel);
      }
    }
#endif

    XMC_CCU4_SLICE_CaptureInit(HandlePtr->capture_ptr->slice_ptr, HandlePtr->capture_init_ptr);
10004714:	687b      	ldr	r3, [r7, #4]
10004716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10004718:	681a      	ldr	r2, [r3, #0]
1000471a:	687b      	ldr	r3, [r7, #4]
1000471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000471e:	1c10      	adds	r0, r2, #0
10004720:	1c19      	adds	r1, r3, #0
10004722:	f7fd f893 	bl	1000184c <XMC_CCU4_SLICE_CaptureInit>
    XMC_CCU4_SLICE_SetPrescaler(HandlePtr->capture_ptr->slice_ptr, HandlePtr->phasedelay_init_ptr->prescaler_initval);
10004726:	687b      	ldr	r3, [r7, #4]
10004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
1000472a:	681a      	ldr	r2, [r3, #0]
1000472c:	687b      	ldr	r3, [r7, #4]
1000472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004730:	791b      	ldrb	r3, [r3, #4]
10004732:	071b      	lsls	r3, r3, #28
10004734:	0f1b      	lsrs	r3, r3, #28
10004736:	b2db      	uxtb	r3, r3
10004738:	1c10      	adds	r0, r2, #0
1000473a:	1c19      	adds	r1, r3, #0
1000473c:	f7fd fb4e 	bl	10001ddc <XMC_CCU4_SLICE_SetPrescaler>
    XMC_CCU4_SLICE_CompareInit(HandlePtr->phasedelay_ptr->slice_ptr, HandlePtr->phasedelay_init_ptr);
10004740:	687b      	ldr	r3, [r7, #4]
10004742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10004744:	681a      	ldr	r2, [r3, #0]
10004746:	687b      	ldr	r3, [r7, #4]
10004748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000474a:	1c10      	adds	r0, r2, #0
1000474c:	1c19      	adds	r1, r3, #0
1000474e:	f7fd f849 	bl	100017e4 <XMC_CCU4_SLICE_CompareInit>

    XMC_POSIF_Init(HandlePtr->global_ptr, HandlePtr->posifconfig_ptr);
10004752:	687b      	ldr	r3, [r7, #4]
10004754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10004756:	687b      	ldr	r3, [r7, #4]
10004758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000475a:	1c10      	adds	r0, r2, #0
1000475c:	1c19      	adds	r1, r3, #0
1000475e:	f7fd fff9 	bl	10002754 <XMC_POSIF_Init>

    if (HALL_POSIF_STATUS_FAILURE
        == (HALL_POSIF_STATUS_t) XMC_POSIF_HSC_Init(HandlePtr->global_ptr, HandlePtr->posifhsc_ptr))
10004762:	687b      	ldr	r3, [r7, #4]
10004764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10004766:	687b      	ldr	r3, [r7, #4]
10004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000476a:	1c10      	adds	r0, r2, #0
1000476c:	1c19      	adds	r1, r3, #0
1000476e:	f7fe f805 	bl	1000277c <XMC_POSIF_HSC_Init>
10004772:	1e03      	subs	r3, r0, #0
    XMC_CCU4_SLICE_SetPrescaler(HandlePtr->capture_ptr->slice_ptr, HandlePtr->phasedelay_init_ptr->prescaler_initval);
    XMC_CCU4_SLICE_CompareInit(HandlePtr->phasedelay_ptr->slice_ptr, HandlePtr->phasedelay_init_ptr);

    XMC_POSIF_Init(HandlePtr->global_ptr, HandlePtr->posifconfig_ptr);

    if (HALL_POSIF_STATUS_FAILURE
10004774:	2b01      	cmp	r3, #1
10004776:	d103      	bne.n	10004780 <HALL_POSIF_Init+0x110>
        == (HALL_POSIF_STATUS_t) XMC_POSIF_HSC_Init(HandlePtr->global_ptr, HandlePtr->posifhsc_ptr))
    {
      /* Failure during posif mode configuration */
      status = HALL_POSIF_STATUS_FAILURE;
10004778:	230f      	movs	r3, #15
1000477a:	18fb      	adds	r3, r7, r3
1000477c:	2201      	movs	r2, #1
1000477e:	701a      	strb	r2, [r3, #0]
    }

    XMC_CCU4_SLICE_SetTimerCompareMatch(HandlePtr->phasedelay_ptr->slice_ptr, HandlePtr->config_ptr->blanking_time);
10004780:	687b      	ldr	r3, [r7, #4]
10004782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10004784:	681a      	ldr	r2, [r3, #0]
10004786:	687b      	ldr	r3, [r7, #4]
10004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000478a:	8adb      	ldrh	r3, [r3, #22]
1000478c:	1c10      	adds	r0, r2, #0
1000478e:	1c19      	adds	r1, r3, #0
10004790:	f7ff ff46 	bl	10004620 <XMC_CCU4_SLICE_SetTimerCompareMatch>
    XMC_CCU4_SLICE_SetTimerPeriodMatch(HandlePtr->phasedelay_ptr->slice_ptr, HandlePtr->config_ptr->phase_delay);
10004794:	687b      	ldr	r3, [r7, #4]
10004796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10004798:	681a      	ldr	r2, [r3, #0]
1000479a:	687b      	ldr	r3, [r7, #4]
1000479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000479e:	8b1b      	ldrh	r3, [r3, #24]
100047a0:	1c10      	adds	r0, r2, #0
100047a2:	1c19      	adds	r1, r3, #0
100047a4:	f7ff ff2e 	bl	10004604 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

    XMC_CCU4_SLICE_SetTimerCompareMatch(HandlePtr->capture_ptr->slice_ptr,
100047a8:	687b      	ldr	r3, [r7, #4]
100047aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
100047ac:	6819      	ldr	r1, [r3, #0]
        (uint16_t)((uint32_t) HandlePtr->config_ptr->phase_delay + HandlePtr->pattern_update_delay));
100047ae:	687b      	ldr	r3, [r7, #4]
100047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100047b2:	8b1a      	ldrh	r2, [r3, #24]
100047b4:	687b      	ldr	r3, [r7, #4]
100047b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }

    XMC_CCU4_SLICE_SetTimerCompareMatch(HandlePtr->phasedelay_ptr->slice_ptr, HandlePtr->config_ptr->blanking_time);
    XMC_CCU4_SLICE_SetTimerPeriodMatch(HandlePtr->phasedelay_ptr->slice_ptr, HandlePtr->config_ptr->phase_delay);

    XMC_CCU4_SLICE_SetTimerCompareMatch(HandlePtr->capture_ptr->slice_ptr,
100047b8:	b29b      	uxth	r3, r3
100047ba:	18d3      	adds	r3, r2, r3
100047bc:	b29b      	uxth	r3, r3
100047be:	1c08      	adds	r0, r1, #0
100047c0:	1c19      	adds	r1, r3, #0
100047c2:	f7ff ff2d 	bl	10004620 <XMC_CCU4_SLICE_SetTimerCompareMatch>
        (uint16_t)((uint32_t) HandlePtr->config_ptr->phase_delay + HandlePtr->pattern_update_delay));
    XMC_CCU4_SLICE_SetTimerPeriodMatch(HandlePtr->capture_ptr->slice_ptr, 0xFFFFU);
100047c6:	687b      	ldr	r3, [r7, #4]
100047c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
100047ca:	681b      	ldr	r3, [r3, #0]
100047cc:	4a7e      	ldr	r2, [pc, #504]	; (100049c8 <HALL_POSIF_Init+0x358>)
100047ce:	1c18      	adds	r0, r3, #0
100047d0:	1c11      	adds	r1, r2, #0
100047d2:	f7ff ff17 	bl	10004604 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    XMC_CCU4_SLICE_SetTimerValue(HandlePtr->capture_ptr->slice_ptr,
100047d6:	687b      	ldr	r3, [r7, #4]
100047d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
100047da:	6819      	ldr	r1, [r3, #0]
        (uint16_t)(HandlePtr->config_ptr->phase_delay + HandlePtr->pattern_update_delay + 1U));
100047dc:	687b      	ldr	r3, [r7, #4]
100047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100047e0:	8b1a      	ldrh	r2, [r3, #24]
100047e2:	687b      	ldr	r3, [r7, #4]
100047e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    XMC_CCU4_SLICE_SetTimerPeriodMatch(HandlePtr->phasedelay_ptr->slice_ptr, HandlePtr->config_ptr->phase_delay);

    XMC_CCU4_SLICE_SetTimerCompareMatch(HandlePtr->capture_ptr->slice_ptr,
        (uint16_t)((uint32_t) HandlePtr->config_ptr->phase_delay + HandlePtr->pattern_update_delay));
    XMC_CCU4_SLICE_SetTimerPeriodMatch(HandlePtr->capture_ptr->slice_ptr, 0xFFFFU);
    XMC_CCU4_SLICE_SetTimerValue(HandlePtr->capture_ptr->slice_ptr,
100047e6:	b29b      	uxth	r3, r3
100047e8:	18d3      	adds	r3, r2, r3
100047ea:	b29b      	uxth	r3, r3
100047ec:	3301      	adds	r3, #1
100047ee:	b29b      	uxth	r3, r3
100047f0:	1c08      	adds	r0, r1, #0
100047f2:	1c19      	adds	r1, r3, #0
100047f4:	f7ff ff2e 	bl	10004654 <XMC_CCU4_SLICE_SetTimerValue>
        (uint16_t)(HandlePtr->config_ptr->phase_delay + HandlePtr->pattern_update_delay + 1U));

    XMC_CCU4_EnableShadowTransfer(HandlePtr->phasedelay_ptr->module_ptr,
100047f8:	687b      	ldr	r3, [r7, #4]
100047fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100047fc:	685a      	ldr	r2, [r3, #4]
        (uint32_t) HandlePtr->phasedelay_ptr->shadow_transfer_msk);
100047fe:	687b      	ldr	r3, [r7, #4]
10004800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        (uint16_t)((uint32_t) HandlePtr->config_ptr->phase_delay + HandlePtr->pattern_update_delay));
    XMC_CCU4_SLICE_SetTimerPeriodMatch(HandlePtr->capture_ptr->slice_ptr, 0xFFFFU);
    XMC_CCU4_SLICE_SetTimerValue(HandlePtr->capture_ptr->slice_ptr,
        (uint16_t)(HandlePtr->config_ptr->phase_delay + HandlePtr->pattern_update_delay + 1U));

    XMC_CCU4_EnableShadowTransfer(HandlePtr->phasedelay_ptr->module_ptr,
10004802:	689b      	ldr	r3, [r3, #8]
10004804:	1c10      	adds	r0, r2, #0
10004806:	1c19      	adds	r1, r3, #0
10004808:	f7ff ff18 	bl	1000463c <XMC_CCU4_EnableShadowTransfer>
        (uint32_t) HandlePtr->phasedelay_ptr->shadow_transfer_msk);
    XMC_CCU4_EnableShadowTransfer(HandlePtr->capture_ptr->module_ptr,
1000480c:	687b      	ldr	r3, [r7, #4]
1000480e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10004810:	685a      	ldr	r2, [r3, #4]
        (uint32_t) HandlePtr->capture_ptr->shadow_transfer_msk);
10004812:	687b      	ldr	r3, [r7, #4]
10004814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    XMC_CCU4_SLICE_SetTimerValue(HandlePtr->capture_ptr->slice_ptr,
        (uint16_t)(HandlePtr->config_ptr->phase_delay + HandlePtr->pattern_update_delay + 1U));

    XMC_CCU4_EnableShadowTransfer(HandlePtr->phasedelay_ptr->module_ptr,
        (uint32_t) HandlePtr->phasedelay_ptr->shadow_transfer_msk);
    XMC_CCU4_EnableShadowTransfer(HandlePtr->capture_ptr->module_ptr,
10004816:	689b      	ldr	r3, [r3, #8]
10004818:	1c10      	adds	r0, r2, #0
1000481a:	1c19      	adds	r1, r3, #0
1000481c:	f7ff ff0e 	bl	1000463c <XMC_CCU4_EnableShadowTransfer>
        (uint32_t) HandlePtr->capture_ptr->shadow_transfer_msk);

    XMC_CCU4_SLICE_ConfigureEvent(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_EVENT_0,
10004820:	687b      	ldr	r3, [r7, #4]
10004822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10004824:	681a      	ldr	r2, [r3, #0]
        HandlePtr->phdelayevent_ptr);
10004826:	687b      	ldr	r3, [r7, #4]
10004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    XMC_CCU4_EnableShadowTransfer(HandlePtr->phasedelay_ptr->module_ptr,
        (uint32_t) HandlePtr->phasedelay_ptr->shadow_transfer_msk);
    XMC_CCU4_EnableShadowTransfer(HandlePtr->capture_ptr->module_ptr,
        (uint32_t) HandlePtr->capture_ptr->shadow_transfer_msk);

    XMC_CCU4_SLICE_ConfigureEvent(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_EVENT_0,
1000482a:	1c10      	adds	r0, r2, #0
1000482c:	2101      	movs	r1, #1
1000482e:	1c1a      	adds	r2, r3, #0
10004830:	f7fd fa3e 	bl	10001cb0 <XMC_CCU4_SLICE_ConfigureEvent>
        HandlePtr->phdelayevent_ptr);
    XMC_CCU4_SLICE_StartConfig(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_EVENT_0,
10004834:	687b      	ldr	r3, [r7, #4]
10004836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10004838:	681b      	ldr	r3, [r3, #0]
1000483a:	1c18      	adds	r0, r3, #0
1000483c:	2101      	movs	r1, #1
1000483e:	2201      	movs	r2, #1
10004840:	f7fd f828 	bl	10001894 <XMC_CCU4_SLICE_StartConfig>
        XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR);

    XMC_CCU4_SLICE_ConfigureEvent(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_EVENT_0,
10004844:	687b      	ldr	r3, [r7, #4]
10004846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10004848:	681a      	ldr	r2, [r3, #0]
        HandlePtr->captureevent_ptr);
1000484a:	687b      	ldr	r3, [r7, #4]
1000484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    XMC_CCU4_SLICE_ConfigureEvent(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_EVENT_0,
        HandlePtr->phdelayevent_ptr);
    XMC_CCU4_SLICE_StartConfig(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_EVENT_0,
        XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR);

    XMC_CCU4_SLICE_ConfigureEvent(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_EVENT_0,
1000484e:	1c10      	adds	r0, r2, #0
10004850:	2101      	movs	r1, #1
10004852:	1c1a      	adds	r2, r3, #0
10004854:	f7fd fa2c 	bl	10001cb0 <XMC_CCU4_SLICE_ConfigureEvent>
        HandlePtr->captureevent_ptr);
    XMC_CCU4_SLICE_Capture1Config(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_EVENT_0);
10004858:	687b      	ldr	r3, [r7, #4]
1000485a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
1000485c:	681b      	ldr	r3, [r3, #0]
1000485e:	1c18      	adds	r0, r3, #0
10004860:	2101      	movs	r1, #1
10004862:	f7fd f91d 	bl	10001aa0 <XMC_CCU4_SLICE_Capture1Config>

    /* Clear IDLE mode.*/
    XMC_CCU4_EnableClock(HandlePtr->phasedelay_ptr->module_ptr, HandlePtr->phasedelay_ptr->slice_number);
10004866:	687b      	ldr	r3, [r7, #4]
10004868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
1000486a:	685a      	ldr	r2, [r3, #4]
1000486c:	687b      	ldr	r3, [r7, #4]
1000486e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10004870:	7b1b      	ldrb	r3, [r3, #12]
10004872:	1c10      	adds	r0, r2, #0
10004874:	1c19      	adds	r1, r3, #0
10004876:	f7ff feb5 	bl	100045e4 <XMC_CCU4_EnableClock>
    XMC_CCU4_EnableClock(HandlePtr->capture_ptr->module_ptr, HandlePtr->capture_ptr->slice_number);
1000487a:	687b      	ldr	r3, [r7, #4]
1000487c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
1000487e:	685a      	ldr	r2, [r3, #4]
10004880:	687b      	ldr	r3, [r7, #4]
10004882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10004884:	7b1b      	ldrb	r3, [r3, #12]
10004886:	1c10      	adds	r0, r2, #0
10004888:	1c19      	adds	r1, r3, #0
1000488a:	f7ff feab 	bl	100045e4 <XMC_CCU4_EnableClock>

    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
1000488e:	687b      	ldr	r3, [r7, #4]
10004890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10004892:	681a      	ldr	r2, [r3, #0]
        HandlePtr->config_ptr->phasedelay_slice_sr[0]);
10004894:	687b      	ldr	r3, [r7, #4]
10004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    /* Clear IDLE mode.*/
    XMC_CCU4_EnableClock(HandlePtr->phasedelay_ptr->module_ptr, HandlePtr->phasedelay_ptr->slice_number);
    XMC_CCU4_EnableClock(HandlePtr->capture_ptr->module_ptr, HandlePtr->capture_ptr->slice_number);

    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
10004898:	781b      	ldrb	r3, [r3, #0]
1000489a:	1c10      	adds	r0, r2, #0
1000489c:	2100      	movs	r1, #0
1000489e:	1c1a      	adds	r2, r3, #0
100048a0:	f7fd fabc 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
        HandlePtr->config_ptr->phasedelay_slice_sr[0]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
100048a4:	687b      	ldr	r3, [r7, #4]
100048a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100048a8:	681a      	ldr	r2, [r3, #0]
        HandlePtr->config_ptr->phasedelay_slice_sr[1]);
100048aa:	687b      	ldr	r3, [r7, #4]
100048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    XMC_CCU4_EnableClock(HandlePtr->phasedelay_ptr->module_ptr, HandlePtr->phasedelay_ptr->slice_number);
    XMC_CCU4_EnableClock(HandlePtr->capture_ptr->module_ptr, HandlePtr->capture_ptr->slice_number);

    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
        HandlePtr->config_ptr->phasedelay_slice_sr[0]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
100048ae:	785b      	ldrb	r3, [r3, #1]
100048b0:	1c10      	adds	r0, r2, #0
100048b2:	2102      	movs	r1, #2
100048b4:	1c1a      	adds	r2, r3, #0
100048b6:	f7fd fab1 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
        HandlePtr->config_ptr->phasedelay_slice_sr[1]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
100048ba:	687b      	ldr	r3, [r7, #4]
100048bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100048be:	681a      	ldr	r2, [r3, #0]
        HandlePtr->config_ptr->phasedelay_slice_sr[2]);
100048c0:	687b      	ldr	r3, [r7, #4]
100048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
        HandlePtr->config_ptr->phasedelay_slice_sr[0]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
        HandlePtr->config_ptr->phasedelay_slice_sr[1]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
100048c4:	789b      	ldrb	r3, [r3, #2]
100048c6:	1c10      	adds	r0, r2, #0
100048c8:	2108      	movs	r1, #8
100048ca:	1c1a      	adds	r2, r3, #0
100048cc:	f7fd faa6 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
        HandlePtr->config_ptr->phasedelay_slice_sr[2]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
100048d0:	687b      	ldr	r3, [r7, #4]
100048d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100048d4:	681a      	ldr	r2, [r3, #0]
        HandlePtr->config_ptr->phasedelay_slice_sr[3]);
100048d6:	687b      	ldr	r3, [r7, #4]
100048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        HandlePtr->config_ptr->phasedelay_slice_sr[0]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
        HandlePtr->config_ptr->phasedelay_slice_sr[1]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
        HandlePtr->config_ptr->phasedelay_slice_sr[2]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
100048da:	78db      	ldrb	r3, [r3, #3]
100048dc:	1c10      	adds	r0, r2, #0
100048de:	2109      	movs	r1, #9
100048e0:	1c1a      	adds	r2, r3, #0
100048e2:	f7fd fa9b 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
        HandlePtr->config_ptr->phasedelay_slice_sr[3]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
100048e6:	687b      	ldr	r3, [r7, #4]
100048e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100048ea:	681a      	ldr	r2, [r3, #0]
        HandlePtr->config_ptr->phasedelay_slice_sr[4]);
100048ec:	687b      	ldr	r3, [r7, #4]
100048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        HandlePtr->config_ptr->phasedelay_slice_sr[1]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
        HandlePtr->config_ptr->phasedelay_slice_sr[2]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
        HandlePtr->config_ptr->phasedelay_slice_sr[3]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
100048f0:	791b      	ldrb	r3, [r3, #4]
100048f2:	1c10      	adds	r0, r2, #0
100048f4:	210a      	movs	r1, #10
100048f6:	1c1a      	adds	r2, r3, #0
100048f8:	f7fd fa90 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
        HandlePtr->config_ptr->phasedelay_slice_sr[4]);

    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
100048fc:	687b      	ldr	r3, [r7, #4]
100048fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10004900:	681a      	ldr	r2, [r3, #0]
        HandlePtr->config_ptr->capture_slice_sr[0]);
10004902:	687b      	ldr	r3, [r7, #4]
10004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
        HandlePtr->config_ptr->phasedelay_slice_sr[3]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
        HandlePtr->config_ptr->phasedelay_slice_sr[4]);

    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
10004906:	795b      	ldrb	r3, [r3, #5]
10004908:	1c10      	adds	r0, r2, #0
1000490a:	2100      	movs	r1, #0
1000490c:	1c1a      	adds	r2, r3, #0
1000490e:	f7fd fa85 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
        HandlePtr->config_ptr->capture_slice_sr[0]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
10004912:	687b      	ldr	r3, [r7, #4]
10004914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10004916:	681a      	ldr	r2, [r3, #0]
        HandlePtr->config_ptr->capture_slice_sr[1]);
10004918:	687b      	ldr	r3, [r7, #4]
1000491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->phasedelay_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
        HandlePtr->config_ptr->phasedelay_slice_sr[4]);

    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
        HandlePtr->config_ptr->capture_slice_sr[0]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
1000491c:	799b      	ldrb	r3, [r3, #6]
1000491e:	1c10      	adds	r0, r2, #0
10004920:	2102      	movs	r1, #2
10004922:	1c1a      	adds	r2, r3, #0
10004924:	f7fd fa7a 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
        HandlePtr->config_ptr->capture_slice_sr[1]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
10004928:	687b      	ldr	r3, [r7, #4]
1000492a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
1000492c:	681a      	ldr	r2, [r3, #0]
        HandlePtr->config_ptr->capture_slice_sr[2]);
1000492e:	687b      	ldr	r3, [r7, #4]
10004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
        HandlePtr->config_ptr->capture_slice_sr[0]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
        HandlePtr->config_ptr->capture_slice_sr[1]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
10004932:	79db      	ldrb	r3, [r3, #7]
10004934:	1c10      	adds	r0, r2, #0
10004936:	2108      	movs	r1, #8
10004938:	1c1a      	adds	r2, r3, #0
1000493a:	f7fd fa6f 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
        HandlePtr->config_ptr->capture_slice_sr[2]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
1000493e:	687b      	ldr	r3, [r7, #4]
10004940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10004942:	681a      	ldr	r2, [r3, #0]
        HandlePtr->config_ptr->capture_slice_sr[3]);
10004944:	687b      	ldr	r3, [r7, #4]
10004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        HandlePtr->config_ptr->capture_slice_sr[0]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
        HandlePtr->config_ptr->capture_slice_sr[1]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
        HandlePtr->config_ptr->capture_slice_sr[2]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
10004948:	7a1b      	ldrb	r3, [r3, #8]
1000494a:	1c10      	adds	r0, r2, #0
1000494c:	2109      	movs	r1, #9
1000494e:	1c1a      	adds	r2, r3, #0
10004950:	f7fd fa64 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
        HandlePtr->config_ptr->capture_slice_sr[3]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
10004954:	687b      	ldr	r3, [r7, #4]
10004956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10004958:	681a      	ldr	r2, [r3, #0]
        HandlePtr->config_ptr->capture_slice_sr[4]);
1000495a:	687b      	ldr	r3, [r7, #4]
1000495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        HandlePtr->config_ptr->capture_slice_sr[1]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
        HandlePtr->config_ptr->capture_slice_sr[2]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
        HandlePtr->config_ptr->capture_slice_sr[3]);
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
1000495e:	7a5b      	ldrb	r3, [r3, #9]
10004960:	1c10      	adds	r0, r2, #0
10004962:	210a      	movs	r1, #10
10004964:	1c1a      	adds	r2, r3, #0
10004966:	f7fd fa59 	bl	10001e1c <XMC_CCU4_SLICE_SetInterruptNode>
        HandlePtr->config_ptr->capture_slice_sr[4]);

    XMC_POSIF_SetInterruptNode(HandlePtr->global_ptr, XMC_POSIF_IRQ_EVENT_CHE, HandlePtr->config_ptr->posif_hsc_sr[0]);
1000496a:	687b      	ldr	r3, [r7, #4]
1000496c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
1000496e:	687b      	ldr	r3, [r7, #4]
10004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004972:	7a9b      	ldrb	r3, [r3, #10]
10004974:	1c10      	adds	r0, r2, #0
10004976:	2100      	movs	r1, #0
10004978:	1c1a      	adds	r2, r3, #0
1000497a:	f7fd ff23 	bl	100027c4 <XMC_POSIF_SetInterruptNode>
    XMC_POSIF_SetInterruptNode(HandlePtr->global_ptr, XMC_POSIF_IRQ_EVENT_WHE, HandlePtr->config_ptr->posif_hsc_sr[1]);
1000497e:	687b      	ldr	r3, [r7, #4]
10004980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10004982:	687b      	ldr	r3, [r7, #4]
10004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004986:	7adb      	ldrb	r3, [r3, #11]
10004988:	1c10      	adds	r0, r2, #0
1000498a:	2101      	movs	r1, #1
1000498c:	1c1a      	adds	r2, r3, #0
1000498e:	f7fd ff19 	bl	100027c4 <XMC_POSIF_SetInterruptNode>
    XMC_POSIF_SetInterruptNode(HandlePtr->global_ptr, XMC_POSIF_IRQ_EVENT_HALL_INPUT,
10004992:	687b      	ldr	r3, [r7, #4]
10004994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        HandlePtr->config_ptr->posif_hsc_sr[2]);
10004996:	687b      	ldr	r3, [r7, #4]
10004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    XMC_CCU4_SLICE_SetInterruptNode(HandlePtr->capture_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
        HandlePtr->config_ptr->capture_slice_sr[4]);

    XMC_POSIF_SetInterruptNode(HandlePtr->global_ptr, XMC_POSIF_IRQ_EVENT_CHE, HandlePtr->config_ptr->posif_hsc_sr[0]);
    XMC_POSIF_SetInterruptNode(HandlePtr->global_ptr, XMC_POSIF_IRQ_EVENT_WHE, HandlePtr->config_ptr->posif_hsc_sr[1]);
    XMC_POSIF_SetInterruptNode(HandlePtr->global_ptr, XMC_POSIF_IRQ_EVENT_HALL_INPUT,
1000499a:	7b1b      	ldrb	r3, [r3, #12]
1000499c:	1c10      	adds	r0, r2, #0
1000499e:	2102      	movs	r1, #2
100049a0:	1c1a      	adds	r2, r3, #0
100049a2:	f7fd ff0f 	bl	100027c4 <XMC_POSIF_SetInterruptNode>
        HandlePtr->config_ptr->posif_hsc_sr[2]);

    if (status != HALL_POSIF_STATUS_FAILURE)
100049a6:	230f      	movs	r3, #15
100049a8:	18fb      	adds	r3, r7, r3
100049aa:	781b      	ldrb	r3, [r3, #0]
100049ac:	2b01      	cmp	r3, #1
100049ae:	d003      	beq.n	100049b8 <HALL_POSIF_Init+0x348>
    {
      HandlePtr->state = HALL_POSIF_INITIALISED;
100049b0:	687b      	ldr	r3, [r7, #4]
100049b2:	2284      	movs	r2, #132	; 0x84
100049b4:	2101      	movs	r1, #1
100049b6:	5499      	strb	r1, [r3, r2]
    }
  }
  return status;
100049b8:	230f      	movs	r3, #15
100049ba:	18fb      	adds	r3, r7, r3
100049bc:	781b      	ldrb	r3, [r3, #0]
}
100049be:	1c18      	adds	r0, r3, #0
100049c0:	46bd      	mov	sp, r7
100049c2:	b004      	add	sp, #16
100049c4:	bd80      	pop	{r7, pc}
100049c6:	46c0      	nop			; (mov r8, r8)
100049c8:	0000ffff 	.word	0x0000ffff

100049cc <XMC_POSIF_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_Stop() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_SetMode(XMC_POSIF_t *const peripheral, const XMC_POSIF_MODE_t mode)
{
100049cc:	b580      	push	{r7, lr}
100049ce:	b082      	sub	sp, #8
100049d0:	af00      	add	r7, sp, #0
100049d2:	6078      	str	r0, [r7, #4]
100049d4:	1c0a      	adds	r2, r1, #0
100049d6:	1cfb      	adds	r3, r7, #3
100049d8:	701a      	strb	r2, [r3, #0]
  peripheral->PCONF = ((peripheral->PCONF & ~(uint32_t)(POSIF_PCONF_FSEL_Msk)) |
100049da:	687b      	ldr	r3, [r7, #4]
100049dc:	681b      	ldr	r3, [r3, #0]
100049de:	2203      	movs	r2, #3
100049e0:	4393      	bics	r3, r2
100049e2:	1c1a      	adds	r2, r3, #0
                       (((uint32_t)mode << POSIF_PCONF_FSEL_Pos) & (uint32_t)POSIF_PCONF_FSEL_Msk));
100049e4:	1cfb      	adds	r3, r7, #3
100049e6:	781b      	ldrb	r3, [r3, #0]
100049e8:	2103      	movs	r1, #3
100049ea:	400b      	ands	r3, r1
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_Stop() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_SetMode(XMC_POSIF_t *const peripheral, const XMC_POSIF_MODE_t mode)
{
  peripheral->PCONF = ((peripheral->PCONF & ~(uint32_t)(POSIF_PCONF_FSEL_Msk)) |
100049ec:	431a      	orrs	r2, r3
100049ee:	687b      	ldr	r3, [r7, #4]
100049f0:	601a      	str	r2, [r3, #0]
                       (((uint32_t)mode << POSIF_PCONF_FSEL_Pos) & (uint32_t)POSIF_PCONF_FSEL_Msk));
}
100049f2:	46bd      	mov	sp, r7
100049f4:	b002      	add	sp, #8
100049f6:	bd80      	pop	{r7, pc}

100049f8 <GLOBAL_POSIF_Init>:

/**
 * This function initializes the global_posif app and low level app.
 */
GLOBAL_POSIF_STATUS_t GLOBAL_POSIF_Init(GLOBAL_POSIF_t*const HandlePtr)
{
100049f8:	b580      	push	{r7, lr}
100049fa:	b084      	sub	sp, #16
100049fc:	af00      	add	r7, sp, #0
100049fe:	6078      	str	r0, [r7, #4]
  GLOBAL_POSIF_STATUS_t status = GLOBAL_POSIF_STATUS_SUCCESS;
10004a00:	230f      	movs	r3, #15
10004a02:	18fb      	adds	r3, r7, r3
10004a04:	2200      	movs	r2, #0
10004a06:	701a      	strb	r2, [r3, #0]

  if (GLOBAL_POSIF_STATE_UNINITIALISED == HandlePtr->state)
10004a08:	687b      	ldr	r3, [r7, #4]
10004a0a:	791b      	ldrb	r3, [r3, #4]
10004a0c:	2b00      	cmp	r3, #0
10004a0e:	d10d      	bne.n	10004a2c <GLOBAL_POSIF_Init+0x34>
  {  
    /*Enable the posif Module*/
    XMC_POSIF_Enable(HandlePtr->moduleptr);
10004a10:	687b      	ldr	r3, [r7, #4]
10004a12:	681b      	ldr	r3, [r3, #0]
10004a14:	1c18      	adds	r0, r3, #0
10004a16:	f7fd fe81 	bl	1000271c <XMC_POSIF_Enable>
    XMC_POSIF_SetMode(HandlePtr->moduleptr, XMC_POSIF_MODE_MCM);
10004a1a:	687b      	ldr	r3, [r7, #4]
10004a1c:	681b      	ldr	r3, [r3, #0]
10004a1e:	1c18      	adds	r0, r3, #0
10004a20:	2102      	movs	r1, #2
10004a22:	f7ff ffd3 	bl	100049cc <XMC_POSIF_SetMode>

    HandlePtr->state = GLOBAL_POSIF_STATE_INITIALISED;
10004a26:	687b      	ldr	r3, [r7, #4]
10004a28:	2201      	movs	r2, #1
10004a2a:	711a      	strb	r2, [r3, #4]
  }

  return status ;
10004a2c:	230f      	movs	r3, #15
10004a2e:	18fb      	adds	r3, r7, r3
10004a30:	781b      	ldrb	r3, [r3, #0]
}
10004a32:	1c18      	adds	r0, r3, #0
10004a34:	46bd      	mov	sp, r7
10004a36:	b004      	add	sp, #16
10004a38:	bd80      	pop	{r7, pc}
10004a3a:	46c0      	nop			; (mov r8, r8)

10004a3c <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
10004a3c:	b580      	push	{r7, lr}
10004a3e:	b082      	sub	sp, #8
10004a40:	af00      	add	r7, sp, #0
10004a42:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
10004a44:	687b      	ldr	r3, [r7, #4]
10004a46:	2280      	movs	r2, #128	; 0x80
10004a48:	0052      	lsls	r2, r2, #1
10004a4a:	60da      	str	r2, [r3, #12]
}
10004a4c:	46bd      	mov	sp, r7
10004a4e:	b002      	add	sp, #8
10004a50:	bd80      	pop	{r7, pc}
10004a52:	46c0      	nop			; (mov r8, r8)

10004a54 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
10004a54:	b580      	push	{r7, lr}
10004a56:	b082      	sub	sp, #8
10004a58:	af00      	add	r7, sp, #0
10004a5a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
10004a5c:	687b      	ldr	r3, [r7, #4]
10004a5e:	7b5b      	ldrb	r3, [r3, #13]
10004a60:	2201      	movs	r2, #1
10004a62:	4053      	eors	r3, r2
10004a64:	b2db      	uxtb	r3, r3
10004a66:	2b00      	cmp	r3, #0
10004a68:	d00f      	beq.n	10004a8a <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
10004a6a:	687b      	ldr	r3, [r7, #4]
10004a6c:	689a      	ldr	r2, [r3, #8]
10004a6e:	687b      	ldr	r3, [r7, #4]
10004a70:	7b1b      	ldrb	r3, [r3, #12]
10004a72:	1c10      	adds	r0, r2, #0
10004a74:	1c19      	adds	r1, r3, #0
10004a76:	f7fd fa63 	bl	10001f40 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
10004a7a:	687b      	ldr	r3, [r7, #4]
10004a7c:	689b      	ldr	r3, [r3, #8]
10004a7e:	1c18      	adds	r0, r3, #0
10004a80:	f7ff ffdc 	bl	10004a3c <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
10004a84:	687b      	ldr	r3, [r7, #4]
10004a86:	2201      	movs	r2, #1
10004a88:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
10004a8a:	2300      	movs	r3, #0
}
10004a8c:	1c18      	adds	r0, r3, #0
10004a8e:	46bd      	mov	sp, r7
10004a90:	b002      	add	sp, #8
10004a92:	bd80      	pop	{r7, pc}

10004a94 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10004a94:	b580      	push	{r7, lr}
10004a96:	b082      	sub	sp, #8
10004a98:	af00      	add	r7, sp, #0
10004a9a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10004a9c:	687b      	ldr	r3, [r7, #4]
10004a9e:	2280      	movs	r2, #128	; 0x80
10004aa0:	0052      	lsls	r2, r2, #1
10004aa2:	60da      	str	r2, [r3, #12]
}
10004aa4:	46bd      	mov	sp, r7
10004aa6:	b002      	add	sp, #8
10004aa8:	bd80      	pop	{r7, pc}
10004aaa:	46c0      	nop			; (mov r8, r8)

10004aac <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
10004aac:	b580      	push	{r7, lr}
10004aae:	b082      	sub	sp, #8
10004ab0:	af00      	add	r7, sp, #0
10004ab2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
10004ab4:	687b      	ldr	r3, [r7, #4]
10004ab6:	7b5b      	ldrb	r3, [r3, #13]
10004ab8:	2201      	movs	r2, #1
10004aba:	4053      	eors	r3, r2
10004abc:	b2db      	uxtb	r3, r3
10004abe:	2b00      	cmp	r3, #0
10004ac0:	d00f      	beq.n	10004ae2 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
10004ac2:	687b      	ldr	r3, [r7, #4]
10004ac4:	689a      	ldr	r2, [r3, #8]
10004ac6:	687b      	ldr	r3, [r7, #4]
10004ac8:	7b1b      	ldrb	r3, [r3, #12]
10004aca:	1c10      	adds	r0, r2, #0
10004acc:	1c19      	adds	r1, r3, #0
10004ace:	f7fc fe4b 	bl	10001768 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
10004ad2:	687b      	ldr	r3, [r7, #4]
10004ad4:	689b      	ldr	r3, [r3, #8]
10004ad6:	1c18      	adds	r0, r3, #0
10004ad8:	f7ff ffdc 	bl	10004a94 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
10004adc:	687b      	ldr	r3, [r7, #4]
10004ade:	2201      	movs	r2, #1
10004ae0:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
10004ae2:	2300      	movs	r3, #0
}
10004ae4:	1c18      	adds	r0, r3, #0
10004ae6:	46bd      	mov	sp, r7
10004ae8:	b002      	add	sp, #8
10004aea:	bd80      	pop	{r7, pc}

10004aec <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
10004aec:	b580      	push	{r7, lr}
10004aee:	b082      	sub	sp, #8
10004af0:	af00      	add	r7, sp, #0
10004af2:	6078      	str	r0, [r7, #4]
10004af4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
10004af6:	687b      	ldr	r3, [r7, #4]
10004af8:	2280      	movs	r2, #128	; 0x80
10004afa:	589a      	ldr	r2, [r3, r2]
10004afc:	683b      	ldr	r3, [r7, #0]
10004afe:	3310      	adds	r3, #16
10004b00:	1c19      	adds	r1, r3, #0
10004b02:	2301      	movs	r3, #1
10004b04:	408b      	lsls	r3, r1
10004b06:	431a      	orrs	r2, r3
10004b08:	687b      	ldr	r3, [r7, #4]
10004b0a:	2180      	movs	r1, #128	; 0x80
10004b0c:	505a      	str	r2, [r3, r1]
}
10004b0e:	46bd      	mov	sp, r7
10004b10:	b002      	add	sp, #8
10004b12:	bd80      	pop	{r7, pc}

10004b14 <XMC_VADC_GLOBAL_SHS_SetAnalogReference>:
 * \par<b>Related APIs:</b><BR>
 * None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetAnalogReference(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
    const XMC_VADC_GLOBAL_SHS_AREF_t aref)
{
10004b14:	b580      	push	{r7, lr}
10004b16:	b082      	sub	sp, #8
10004b18:	af00      	add	r7, sp, #0
10004b1a:	6078      	str	r0, [r7, #4]
10004b1c:	1c0a      	adds	r2, r1, #0
10004b1e:	1cbb      	adds	r3, r7, #2
10004b20:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))

  shs_ptr->SHSCFG = (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref | SHS_SHSCFG_SCWC_Msk;
10004b22:	687b      	ldr	r3, [r7, #4]
10004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004b26:	4a06      	ldr	r2, [pc, #24]	; (10004b40 <XMC_VADC_GLOBAL_SHS_SetAnalogReference+0x2c>)
10004b28:	401a      	ands	r2, r3
10004b2a:	1cbb      	adds	r3, r7, #2
10004b2c:	881b      	ldrh	r3, [r3, #0]
10004b2e:	4313      	orrs	r3, r2
10004b30:	2280      	movs	r2, #128	; 0x80
10004b32:	0212      	lsls	r2, r2, #8
10004b34:	431a      	orrs	r2, r3
10004b36:	687b      	ldr	r3, [r7, #4]
10004b38:	641a      	str	r2, [r3, #64]	; 0x40
}
10004b3a:	46bd      	mov	sp, r7
10004b3c:	b002      	add	sp, #8
10004b3e:	bd80      	pop	{r7, pc}
10004b40:	fffff3ff 	.word	0xfffff3ff

10004b44 <XMC_VADC_GLOBAL_SHS_SetClockDivider>:
 *
 * \par<b>Related APIs:</b><BR>
 * None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint8_t divs_value)
{
10004b44:	b580      	push	{r7, lr}
10004b46:	b082      	sub	sp, #8
10004b48:	af00      	add	r7, sp, #0
10004b4a:	6078      	str	r0, [r7, #4]
10004b4c:	1c0a      	adds	r2, r1, #0
10004b4e:	1cfb      	adds	r3, r7, #3
10004b50:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
             (divs_value < (uint32_t)0x10))

  shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SCWC_Msk;
10004b52:	687b      	ldr	r3, [r7, #4]
10004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004b56:	4a0a      	ldr	r2, [pc, #40]	; (10004b80 <XMC_VADC_GLOBAL_SHS_SetClockDivider+0x3c>)
10004b58:	4013      	ands	r3, r2
10004b5a:	2280      	movs	r2, #128	; 0x80
10004b5c:	0212      	lsls	r2, r2, #8
10004b5e:	431a      	orrs	r2, r3
10004b60:	687b      	ldr	r3, [r7, #4]
10004b62:	641a      	str	r2, [r3, #64]	; 0x40
  shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk;
10004b64:	687b      	ldr	r3, [r7, #4]
10004b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10004b68:	1cfb      	adds	r3, r7, #3
10004b6a:	781b      	ldrb	r3, [r3, #0]
10004b6c:	4313      	orrs	r3, r2
10004b6e:	2280      	movs	r2, #128	; 0x80
10004b70:	0212      	lsls	r2, r2, #8
10004b72:	431a      	orrs	r2, r3
10004b74:	687b      	ldr	r3, [r7, #4]
10004b76:	641a      	str	r2, [r3, #64]	; 0x40
}
10004b78:	46bd      	mov	sp, r7
10004b7a:	b002      	add	sp, #8
10004b7c:	bd80      	pop	{r7, pc}
10004b7e:	46c0      	nop			; (mov r8, r8)
10004b80:	ffff7ff0 	.word	0xffff7ff0

10004b84 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
10004b84:	b580      	push	{r7, lr}
10004b86:	b084      	sub	sp, #16
10004b88:	af00      	add	r7, sp, #0
10004b8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
10004b8c:	687b      	ldr	r3, [r7, #4]
10004b8e:	7e1b      	ldrb	r3, [r3, #24]
10004b90:	2b02      	cmp	r3, #2
10004b92:	d15e      	bne.n	10004c52 <GLOBAL_ADC_Init+0xce>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
10004b94:	687b      	ldr	r3, [r7, #4]
10004b96:	68da      	ldr	r2, [r3, #12]
10004b98:	687b      	ldr	r3, [r7, #4]
10004b9a:	689b      	ldr	r3, [r3, #8]
10004b9c:	1c10      	adds	r0, r2, #0
10004b9e:	1c19      	adds	r1, r3, #0
10004ba0:	f7fd feae 	bl	10002900 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
10004ba4:	2300      	movs	r3, #0
10004ba6:	60fb      	str	r3, [r7, #12]
10004ba8:	e038      	b.n	10004c1c <GLOBAL_ADC_Init+0x98>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
10004baa:	687b      	ldr	r3, [r7, #4]
10004bac:	68fa      	ldr	r2, [r7, #12]
10004bae:	0092      	lsls	r2, r2, #2
10004bb0:	58d3      	ldr	r3, [r2, r3]
10004bb2:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
10004bb4:	687b      	ldr	r3, [r7, #4]
10004bb6:	68fa      	ldr	r2, [r7, #12]
10004bb8:	0092      	lsls	r2, r2, #2
10004bba:	58d3      	ldr	r3, [r2, r3]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
10004bbc:	685b      	ldr	r3, [r3, #4]
10004bbe:	1c08      	adds	r0, r1, #0
10004bc0:	1c19      	adds	r1, r3, #0
10004bc2:	f7fd ff61 	bl	10002a88 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
10004bc6:	687b      	ldr	r3, [r7, #4]
10004bc8:	68fa      	ldr	r2, [r7, #12]
10004bca:	0092      	lsls	r2, r2, #2
10004bcc:	58d3      	ldr	r3, [r2, r3]
10004bce:	681b      	ldr	r3, [r3, #0]
10004bd0:	1c18      	adds	r0, r3, #0
10004bd2:	2103      	movs	r1, #3
10004bd4:	f7fe f800 	bl	10002bd8 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
10004bd8:	687b      	ldr	r3, [r7, #4]
10004bda:	68fa      	ldr	r2, [r7, #12]
10004bdc:	0092      	lsls	r2, r2, #2
10004bde:	58d3      	ldr	r3, [r2, r3]
10004be0:	7a1b      	ldrb	r3, [r3, #8]
10004be2:	2201      	movs	r2, #1
10004be4:	4053      	eors	r3, r2
10004be6:	b2db      	uxtb	r3, r3
10004be8:	2b00      	cmp	r3, #0
10004bea:	d006      	beq.n	10004bfa <GLOBAL_ADC_Init+0x76>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
10004bec:	687b      	ldr	r3, [r7, #4]
10004bee:	68da      	ldr	r2, [r3, #12]
10004bf0:	68fb      	ldr	r3, [r7, #12]
10004bf2:	1c10      	adds	r0, r2, #0
10004bf4:	1c19      	adds	r1, r3, #0
10004bf6:	f7ff ff79 	bl	10004aec <XMC_VADC_GLOBAL_DisablePostCalibration>
      }

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
10004bfa:	687b      	ldr	r3, [r7, #4]
10004bfc:	691a      	ldr	r2, [r3, #16]
10004bfe:	68fb      	ldr	r3, [r7, #12]
10004c00:	b2db      	uxtb	r3, r3
10004c02:	1c10      	adds	r0, r2, #0
10004c04:	1c19      	adds	r1, r3, #0
10004c06:	f7fe f803 	bl	10002c10 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
10004c0a:	687b      	ldr	r3, [r7, #4]
10004c0c:	68fa      	ldr	r2, [r7, #12]
10004c0e:	0092      	lsls	r2, r2, #2
10004c10:	58d3      	ldr	r3, [r2, r3]
10004c12:	2200      	movs	r2, #0
10004c14:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
10004c16:	68fb      	ldr	r3, [r7, #12]
10004c18:	3301      	adds	r3, #1
10004c1a:	60fb      	str	r3, [r7, #12]
10004c1c:	68fb      	ldr	r3, [r7, #12]
10004c1e:	2b01      	cmp	r3, #1
10004c20:	d9c3      	bls.n	10004baa <GLOBAL_ADC_Init+0x26>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
    }
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetClockDivider(handle_ptr->global_shs_ptr, (uint8_t) GLOBAL_ADC_DIVS_VALUE);
10004c22:	687b      	ldr	r3, [r7, #4]
10004c24:	691b      	ldr	r3, [r3, #16]
10004c26:	1c18      	adds	r0, r3, #0
10004c28:	2100      	movs	r1, #0
10004c2a:	f7ff ff8b 	bl	10004b44 <XMC_VADC_GLOBAL_SHS_SetClockDivider>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
10004c2e:	687b      	ldr	r3, [r7, #4]
10004c30:	691b      	ldr	r3, [r3, #16]
10004c32:	1c18      	adds	r0, r3, #0
10004c34:	2100      	movs	r1, #0
10004c36:	f7ff ff6d 	bl	10004b14 <XMC_VADC_GLOBAL_SHS_SetAnalogReference>
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
10004c3a:	687b      	ldr	r3, [r7, #4]
10004c3c:	7e5b      	ldrb	r3, [r3, #25]
10004c3e:	2b00      	cmp	r3, #0
10004c40:	d004      	beq.n	10004c4c <GLOBAL_ADC_Init+0xc8>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
10004c42:	687b      	ldr	r3, [r7, #4]
10004c44:	68db      	ldr	r3, [r3, #12]
10004c46:	1c18      	adds	r0, r3, #0
10004c48:	f7fd feae 	bl	100029a8 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
10004c4c:	687b      	ldr	r3, [r7, #4]
10004c4e:	2200      	movs	r2, #0
10004c50:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
10004c52:	687b      	ldr	r3, [r7, #4]
10004c54:	7e1b      	ldrb	r3, [r3, #24]
}
10004c56:	1c18      	adds	r0, r3, #0
10004c58:	46bd      	mov	sp, r7
10004c5a:	b004      	add	sp, #16
10004c5c:	bd80      	pop	{r7, pc}
10004c5e:	46c0      	nop			; (mov r8, r8)

10004c60 <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
10004c60:	b580      	push	{r7, lr}
10004c62:	af00      	add	r7, sp, #0
#if UC_SERIES == XMC14
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
10004c64:	4b03      	ldr	r3, [pc, #12]	; (10004c74 <SystemCoreSetup+0x14>)
10004c66:	4a03      	ldr	r2, [pc, #12]	; (10004c74 <SystemCoreSetup+0x14>)
10004c68:	6e92      	ldr	r2, [r2, #104]	; 0x68
10004c6a:	2101      	movs	r1, #1
10004c6c:	438a      	bics	r2, r1
10004c6e:	669a      	str	r2, [r3, #104]	; 0x68
#endif
}
10004c70:	46bd      	mov	sp, r7
10004c72:	bd80      	pop	{r7, pc}
10004c74:	40010000 	.word	0x40010000

10004c78 <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
10004c78:	b580      	push	{r7, lr}
10004c7a:	b084      	sub	sp, #16
10004c7c:	af00      	add	r7, sp, #0
10004c7e:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
10004c80:	230f      	movs	r3, #15
10004c82:	18fb      	adds	r3, r7, r3
10004c84:	2200      	movs	r2, #0
10004c86:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10004c88:	230e      	movs	r3, #14
10004c8a:	18fb      	adds	r3, r7, r3
10004c8c:	2200      	movs	r2, #0
10004c8e:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
10004c90:	230d      	movs	r3, #13
10004c92:	18fb      	adds	r3, r7, r3
10004c94:	2200      	movs	r2, #0
10004c96:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10004c98:	230c      	movs	r3, #12
10004c9a:	18fb      	adds	r3, r7, r3
10004c9c:	2200      	movs	r2, #0
10004c9e:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
10004ca0:	230b      	movs	r3, #11
10004ca2:	18fb      	adds	r3, r7, r3
10004ca4:	2200      	movs	r2, #0
10004ca6:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
10004ca8:	687b      	ldr	r3, [r7, #4]
10004caa:	781b      	ldrb	r3, [r3, #0]
10004cac:	2201      	movs	r2, #1
10004cae:	4053      	eors	r3, r2
10004cb0:	b2db      	uxtb	r3, r3
10004cb2:	2b00      	cmp	r3, #0
10004cb4:	d01b      	beq.n	10004cee <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
10004cb6:	230e      	movs	r3, #14
10004cb8:	18fa      	adds	r2, r7, r3
10004cba:	230d      	movs	r3, #13
10004cbc:	18fb      	adds	r3, r7, r3
10004cbe:	7812      	ldrb	r2, [r2, #0]
10004cc0:	781b      	ldrb	r3, [r3, #0]
10004cc2:	4313      	orrs	r3, r2
10004cc4:	b2da      	uxtb	r2, r3
10004cc6:	230c      	movs	r3, #12
10004cc8:	18fb      	adds	r3, r7, r3
10004cca:	781b      	ldrb	r3, [r3, #0]
10004ccc:	4313      	orrs	r3, r2
10004cce:	b2d9      	uxtb	r1, r3
10004cd0:	230f      	movs	r3, #15
10004cd2:	18fb      	adds	r3, r7, r3
10004cd4:	220b      	movs	r2, #11
10004cd6:	18ba      	adds	r2, r7, r2
10004cd8:	7812      	ldrb	r2, [r2, #0]
10004cda:	430a      	orrs	r2, r1
10004cdc:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
10004cde:	230f      	movs	r3, #15
10004ce0:	18fb      	adds	r3, r7, r3
10004ce2:	781b      	ldrb	r3, [r3, #0]
10004ce4:	2b00      	cmp	r3, #0
10004ce6:	d102      	bne.n	10004cee <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
10004ce8:	687b      	ldr	r3, [r7, #4]
10004cea:	2201      	movs	r2, #1
10004cec:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
10004cee:	230f      	movs	r3, #15
10004cf0:	18fb      	adds	r3, r7, r3
10004cf2:	781b      	ldrb	r3, [r3, #0]
}
10004cf4:	1c18      	adds	r0, r3, #0
10004cf6:	46bd      	mov	sp, r7
10004cf8:	b004      	add	sp, #16
10004cfa:	bd80      	pop	{r7, pc}

10004cfc <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10004cfc:	b590      	push	{r4, r7, lr}
10004cfe:	b085      	sub	sp, #20
10004d00:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
10004d02:	1c3b      	adds	r3, r7, #0
10004d04:	4a05      	ldr	r2, [pc, #20]	; (10004d1c <SystemCoreClockSetup+0x20>)
10004d06:	ca13      	ldmia	r2!, {r0, r1, r4}
10004d08:	c313      	stmia	r3!, {r0, r1, r4}
10004d0a:	6812      	ldr	r2, [r2, #0]
10004d0c:	601a      	str	r2, [r3, #0]
  .osclp_mode = XMC_SCU_CLOCK_OSCLP_MODE_DISABLED

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
10004d0e:	1c3b      	adds	r3, r7, #0
10004d10:	1c18      	adds	r0, r3, #0
10004d12:	f7fc fb11 	bl	10001338 <XMC_SCU_CLOCK_Init>
}
10004d16:	46bd      	mov	sp, r7
10004d18:	b005      	add	sp, #20
10004d1a:	bd90      	pop	{r4, r7, pc}
10004d1c:	10005dc0 	.word	0x10005dc0

10004d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10004d20:	b580      	push	{r7, lr}
10004d22:	b082      	sub	sp, #8
10004d24:	af00      	add	r7, sp, #0
10004d26:	1c02      	adds	r2, r0, #0
10004d28:	1dfb      	adds	r3, r7, #7
10004d2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004d2c:	1dfb      	adds	r3, r7, #7
10004d2e:	781b      	ldrb	r3, [r3, #0]
10004d30:	2b7f      	cmp	r3, #127	; 0x7f
10004d32:	d809      	bhi.n	10004d48 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10004d34:	4b06      	ldr	r3, [pc, #24]	; (10004d50 <__NVIC_EnableIRQ+0x30>)
10004d36:	1dfa      	adds	r2, r7, #7
10004d38:	7812      	ldrb	r2, [r2, #0]
10004d3a:	1c11      	adds	r1, r2, #0
10004d3c:	221f      	movs	r2, #31
10004d3e:	400a      	ands	r2, r1
10004d40:	2101      	movs	r1, #1
10004d42:	4091      	lsls	r1, r2
10004d44:	1c0a      	adds	r2, r1, #0
10004d46:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10004d48:	46bd      	mov	sp, r7
10004d4a:	b002      	add	sp, #8
10004d4c:	bd80      	pop	{r7, pc}
10004d4e:	46c0      	nop			; (mov r8, r8)
10004d50:	e000e100 	.word	0xe000e100

10004d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10004d54:	b5b0      	push	{r4, r5, r7, lr}
10004d56:	b082      	sub	sp, #8
10004d58:	af00      	add	r7, sp, #0
10004d5a:	1c02      	adds	r2, r0, #0
10004d5c:	6039      	str	r1, [r7, #0]
10004d5e:	1dfb      	adds	r3, r7, #7
10004d60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004d62:	1dfb      	adds	r3, r7, #7
10004d64:	781b      	ldrb	r3, [r3, #0]
10004d66:	2b7f      	cmp	r3, #127	; 0x7f
10004d68:	d827      	bhi.n	10004dba <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004d6a:	4c2d      	ldr	r4, [pc, #180]	; (10004e20 <__NVIC_SetPriority+0xcc>)
10004d6c:	1dfb      	adds	r3, r7, #7
10004d6e:	781b      	ldrb	r3, [r3, #0]
10004d70:	b25b      	sxtb	r3, r3
10004d72:	089b      	lsrs	r3, r3, #2
10004d74:	492a      	ldr	r1, [pc, #168]	; (10004e20 <__NVIC_SetPriority+0xcc>)
10004d76:	1dfa      	adds	r2, r7, #7
10004d78:	7812      	ldrb	r2, [r2, #0]
10004d7a:	b252      	sxtb	r2, r2
10004d7c:	0892      	lsrs	r2, r2, #2
10004d7e:	32c0      	adds	r2, #192	; 0xc0
10004d80:	0092      	lsls	r2, r2, #2
10004d82:	5852      	ldr	r2, [r2, r1]
10004d84:	1df9      	adds	r1, r7, #7
10004d86:	7809      	ldrb	r1, [r1, #0]
10004d88:	1c08      	adds	r0, r1, #0
10004d8a:	2103      	movs	r1, #3
10004d8c:	4001      	ands	r1, r0
10004d8e:	00c9      	lsls	r1, r1, #3
10004d90:	1c08      	adds	r0, r1, #0
10004d92:	21ff      	movs	r1, #255	; 0xff
10004d94:	4081      	lsls	r1, r0
10004d96:	43c9      	mvns	r1, r1
10004d98:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004d9a:	683a      	ldr	r2, [r7, #0]
10004d9c:	0192      	lsls	r2, r2, #6
10004d9e:	20ff      	movs	r0, #255	; 0xff
10004da0:	4002      	ands	r2, r0
10004da2:	1df8      	adds	r0, r7, #7
10004da4:	7800      	ldrb	r0, [r0, #0]
10004da6:	1c05      	adds	r5, r0, #0
10004da8:	2003      	movs	r0, #3
10004daa:	4028      	ands	r0, r5
10004dac:	00c0      	lsls	r0, r0, #3
10004dae:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004db0:	430a      	orrs	r2, r1
10004db2:	33c0      	adds	r3, #192	; 0xc0
10004db4:	009b      	lsls	r3, r3, #2
10004db6:	511a      	str	r2, [r3, r4]
10004db8:	e02e      	b.n	10004e18 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004dba:	4c1a      	ldr	r4, [pc, #104]	; (10004e24 <__NVIC_SetPriority+0xd0>)
10004dbc:	1dfb      	adds	r3, r7, #7
10004dbe:	781b      	ldrb	r3, [r3, #0]
10004dc0:	1c1a      	adds	r2, r3, #0
10004dc2:	230f      	movs	r3, #15
10004dc4:	4013      	ands	r3, r2
10004dc6:	3b08      	subs	r3, #8
10004dc8:	0899      	lsrs	r1, r3, #2
10004dca:	4a16      	ldr	r2, [pc, #88]	; (10004e24 <__NVIC_SetPriority+0xd0>)
10004dcc:	1dfb      	adds	r3, r7, #7
10004dce:	781b      	ldrb	r3, [r3, #0]
10004dd0:	1c18      	adds	r0, r3, #0
10004dd2:	230f      	movs	r3, #15
10004dd4:	4003      	ands	r3, r0
10004dd6:	3b08      	subs	r3, #8
10004dd8:	089b      	lsrs	r3, r3, #2
10004dda:	3306      	adds	r3, #6
10004ddc:	009b      	lsls	r3, r3, #2
10004dde:	18d3      	adds	r3, r2, r3
10004de0:	685b      	ldr	r3, [r3, #4]
10004de2:	1dfa      	adds	r2, r7, #7
10004de4:	7812      	ldrb	r2, [r2, #0]
10004de6:	1c10      	adds	r0, r2, #0
10004de8:	2203      	movs	r2, #3
10004dea:	4002      	ands	r2, r0
10004dec:	00d2      	lsls	r2, r2, #3
10004dee:	1c10      	adds	r0, r2, #0
10004df0:	22ff      	movs	r2, #255	; 0xff
10004df2:	4082      	lsls	r2, r0
10004df4:	43d2      	mvns	r2, r2
10004df6:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004df8:	683b      	ldr	r3, [r7, #0]
10004dfa:	019b      	lsls	r3, r3, #6
10004dfc:	20ff      	movs	r0, #255	; 0xff
10004dfe:	4003      	ands	r3, r0
10004e00:	1df8      	adds	r0, r7, #7
10004e02:	7800      	ldrb	r0, [r0, #0]
10004e04:	1c05      	adds	r5, r0, #0
10004e06:	2003      	movs	r0, #3
10004e08:	4028      	ands	r0, r5
10004e0a:	00c0      	lsls	r0, r0, #3
10004e0c:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004e0e:	431a      	orrs	r2, r3
10004e10:	1d8b      	adds	r3, r1, #6
10004e12:	009b      	lsls	r3, r3, #2
10004e14:	18e3      	adds	r3, r4, r3
10004e16:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10004e18:	46bd      	mov	sp, r7
10004e1a:	b002      	add	sp, #8
10004e1c:	bdb0      	pop	{r4, r5, r7, pc}
10004e1e:	46c0      	nop			; (mov r8, r8)
10004e20:	e000e100 	.word	0xe000e100
10004e24:	e000ed00 	.word	0xe000ed00

10004e28 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
10004e28:	b580      	push	{r7, lr}
10004e2a:	b082      	sub	sp, #8
10004e2c:	af00      	add	r7, sp, #0
10004e2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
10004e30:	687a      	ldr	r2, [r7, #4]
10004e32:	2381      	movs	r3, #129	; 0x81
10004e34:	009b      	lsls	r3, r3, #2
10004e36:	58d3      	ldr	r3, [r2, r3]
10004e38:	2280      	movs	r2, #128	; 0x80
10004e3a:	0092      	lsls	r2, r2, #2
10004e3c:	431a      	orrs	r2, r3
10004e3e:	1c11      	adds	r1, r2, #0
10004e40:	687a      	ldr	r2, [r7, #4]
10004e42:	2381      	movs	r3, #129	; 0x81
10004e44:	009b      	lsls	r3, r3, #2
10004e46:	50d1      	str	r1, [r2, r3]
}
10004e48:	46bd      	mov	sp, r7
10004e4a:	b002      	add	sp, #8
10004e4c:	bd80      	pop	{r7, pc}
10004e4e:	46c0      	nop			; (mov r8, r8)

10004e50 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
    const uint32_t grp_num,
    const uint32_t ch_num)
{
10004e50:	b580      	push	{r7, lr}
10004e52:	b084      	sub	sp, #16
10004e54:	af00      	add	r7, sp, #0
10004e56:	60f8      	str	r0, [r7, #12]
10004e58:	60b9      	str	r1, [r7, #8]
10004e5a:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
10004e5c:	68fb      	ldr	r3, [r7, #12]
10004e5e:	68ba      	ldr	r2, [r7, #8]
10004e60:	3260      	adds	r2, #96	; 0x60
10004e62:	0092      	lsls	r2, r2, #2
10004e64:	58d2      	ldr	r2, [r2, r3]
10004e66:	687b      	ldr	r3, [r7, #4]
10004e68:	2101      	movs	r1, #1
10004e6a:	4099      	lsls	r1, r3
10004e6c:	1c0b      	adds	r3, r1, #0
10004e6e:	431a      	orrs	r2, r3
10004e70:	1c11      	adds	r1, r2, #0
10004e72:	68fb      	ldr	r3, [r7, #12]
10004e74:	68ba      	ldr	r2, [r7, #8]
10004e76:	3260      	adds	r2, #96	; 0x60
10004e78:	0092      	lsls	r2, r2, #2
10004e7a:	50d1      	str	r1, [r2, r3]
}
10004e7c:	46bd      	mov	sp, r7
10004e7e:	b004      	add	sp, #16
10004e80:	bd80      	pop	{r7, pc}
10004e82:	46c0      	nop			; (mov r8, r8)

10004e84 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg_num,
    const XMC_VADC_RESULT_CONFIG_t *config)
{
10004e84:	b580      	push	{r7, lr}
10004e86:	b084      	sub	sp, #16
10004e88:	af00      	add	r7, sp, #0
10004e8a:	60f8      	str	r0, [r7, #12]
10004e8c:	60b9      	str	r1, [r7, #8]
10004e8e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
10004e90:	687b      	ldr	r3, [r7, #4]
10004e92:	6819      	ldr	r1, [r3, #0]
10004e94:	68fb      	ldr	r3, [r7, #12]
10004e96:	68ba      	ldr	r2, [r7, #8]
10004e98:	32a0      	adds	r2, #160	; 0xa0
10004e9a:	0092      	lsls	r2, r2, #2
10004e9c:	50d1      	str	r1, [r2, r3]

}
10004e9e:	46bd      	mov	sp, r7
10004ea0:	b004      	add	sp, #16
10004ea2:	bd80      	pop	{r7, pc}

10004ea4 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
10004ea4:	b590      	push	{r4, r7, lr}
10004ea6:	b085      	sub	sp, #20
10004ea8:	af00      	add	r7, sp, #0
10004eaa:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL));

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
10004eac:	687b      	ldr	r3, [r7, #4]
10004eae:	7e1b      	ldrb	r3, [r3, #24]
10004eb0:	2b02      	cmp	r3, #2
10004eb2:	d000      	beq.n	10004eb6 <ADC_MEASUREMENT_Init+0x12>
10004eb4:	e09b      	b.n	10004fee <ADC_MEASUREMENT_Init+0x14a>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
10004eb6:	687b      	ldr	r3, [r7, #4]
10004eb8:	68db      	ldr	r3, [r3, #12]
10004eba:	220e      	movs	r2, #14
10004ebc:	18bc      	adds	r4, r7, r2
10004ebe:	1c18      	adds	r0, r3, #0
10004ec0:	f7ff fe60 	bl	10004b84 <GLOBAL_ADC_Init>
10004ec4:	1c03      	adds	r3, r0, #0
10004ec6:	7023      	strb	r3, [r4, #0]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
10004ec8:	687b      	ldr	r3, [r7, #4]
10004eca:	68db      	ldr	r3, [r3, #12]
10004ecc:	68da      	ldr	r2, [r3, #12]
10004ece:	687b      	ldr	r3, [r7, #4]
10004ed0:	689b      	ldr	r3, [r3, #8]
10004ed2:	681b      	ldr	r3, [r3, #0]
10004ed4:	1c10      	adds	r0, r2, #0
10004ed6:	1c19      	adds	r1, r3, #0
10004ed8:	2200      	movs	r2, #0
10004eda:	2300      	movs	r3, #0
10004edc:	f7fd fd3e 	bl	1000295c <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
                                      XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
10004ee0:	687b      	ldr	r3, [r7, #4]
10004ee2:	68db      	ldr	r3, [r3, #12]
10004ee4:	68da      	ldr	r2, [r3, #12]
10004ee6:	687b      	ldr	r3, [r7, #4]
10004ee8:	685b      	ldr	r3, [r3, #4]
10004eea:	1c10      	adds	r0, r2, #0
10004eec:	1c19      	adds	r1, r3, #0
10004eee:	f7fd feb3 	bl	10002c58 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
10004ef2:	230f      	movs	r3, #15
10004ef4:	18fb      	adds	r3, r7, r3
10004ef6:	2200      	movs	r2, #0
10004ef8:	701a      	strb	r2, [r3, #0]
10004efa:	e034      	b.n	10004f66 <ADC_MEASUREMENT_Init+0xc2>
    {
      indexed = handle_ptr->array->channel_array[j];
10004efc:	687b      	ldr	r3, [r7, #4]
10004efe:	681b      	ldr	r3, [r3, #0]
10004f00:	220f      	movs	r2, #15
10004f02:	18ba      	adds	r2, r7, r2
10004f04:	7812      	ldrb	r2, [r2, #0]
10004f06:	0092      	lsls	r2, r2, #2
10004f08:	58d3      	ldr	r3, [r2, r3]
10004f0a:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
10004f0c:	68bb      	ldr	r3, [r7, #8]
10004f0e:	689a      	ldr	r2, [r3, #8]
10004f10:	68bb      	ldr	r3, [r7, #8]
10004f12:	7b5b      	ldrb	r3, [r3, #13]
10004f14:	1c19      	adds	r1, r3, #0
10004f16:	68bb      	ldr	r3, [r7, #8]
10004f18:	681b      	ldr	r3, [r3, #0]
10004f1a:	1c10      	adds	r0, r2, #0
10004f1c:	1c1a      	adds	r2, r3, #0
10004f1e:	f7fd ff43 	bl	10002da8 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
10004f22:	68bb      	ldr	r3, [r7, #8]
10004f24:	689a      	ldr	r2, [r3, #8]
10004f26:	68bb      	ldr	r3, [r7, #8]
10004f28:	681b      	ldr	r3, [r3, #0]
10004f2a:	789b      	ldrb	r3, [r3, #2]
10004f2c:	071b      	lsls	r3, r3, #28
10004f2e:	0f1b      	lsrs	r3, r3, #28
10004f30:	b2db      	uxtb	r3, r3
10004f32:	1c19      	adds	r1, r3, #0
                                indexed->res_handle);
10004f34:	68bb      	ldr	r3, [r7, #8]
10004f36:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
10004f38:	1c10      	adds	r0, r2, #0
10004f3a:	1c1a      	adds	r2, r3, #0
10004f3c:	f7ff ffa2 	bl	10004e84 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
10004f40:	687b      	ldr	r3, [r7, #4]
10004f42:	68db      	ldr	r3, [r3, #12]
10004f44:	68da      	ldr	r2, [r3, #12]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
10004f46:	68bb      	ldr	r3, [r7, #8]
10004f48:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
10004f4a:	1c19      	adds	r1, r3, #0
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
10004f4c:	68bb      	ldr	r3, [r7, #8]
10004f4e:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
10004f50:	1c10      	adds	r0, r2, #0
10004f52:	1c1a      	adds	r2, r3, #0
10004f54:	f7ff ff7c 	bl	10004e50 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
10004f58:	230f      	movs	r3, #15
10004f5a:	18fb      	adds	r3, r7, r3
10004f5c:	781a      	ldrb	r2, [r3, #0]
10004f5e:	230f      	movs	r3, #15
10004f60:	18fb      	adds	r3, r7, r3
10004f62:	3201      	adds	r2, #1
10004f64:	701a      	strb	r2, [r3, #0]
10004f66:	230f      	movs	r3, #15
10004f68:	18fb      	adds	r3, r7, r3
10004f6a:	781b      	ldrb	r3, [r3, #0]
10004f6c:	2b08      	cmp	r3, #8
10004f6e:	d9c5      	bls.n	10004efc <ADC_MEASUREMENT_Init+0x58>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
10004f70:	687b      	ldr	r3, [r7, #4]
10004f72:	685b      	ldr	r3, [r3, #4]
10004f74:	7a1b      	ldrb	r3, [r3, #8]
10004f76:	2208      	movs	r2, #8
10004f78:	4013      	ands	r3, r2
10004f7a:	b2db      	uxtb	r3, r3
10004f7c:	2b00      	cmp	r3, #0
10004f7e:	d020      	beq.n	10004fc2 <ADC_MEASUREMENT_Init+0x11e>
10004f80:	687b      	ldr	r3, [r7, #4]
10004f82:	691b      	ldr	r3, [r3, #16]
10004f84:	2b00      	cmp	r3, #0
10004f86:	d01c      	beq.n	10004fc2 <ADC_MEASUREMENT_Init+0x11e>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
10004f88:	687b      	ldr	r3, [r7, #4]
10004f8a:	691b      	ldr	r3, [r3, #16]
10004f8c:	681b      	ldr	r3, [r3, #0]
10004f8e:	b2da      	uxtb	r2, r3
                        handle_ptr->req_src_intr_handle->priority);
10004f90:	687b      	ldr	r3, [r7, #4]
10004f92:	691b      	ldr	r3, [r3, #16]
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
10004f94:	685b      	ldr	r3, [r3, #4]
10004f96:	b252      	sxtb	r2, r2
10004f98:	1c10      	adds	r0, r2, #0
10004f9a:	1c19      	adds	r1, r3, #0
10004f9c:	f7ff feda 	bl	10004d54 <__NVIC_SetPriority>
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
10004fa0:	687b      	ldr	r3, [r7, #4]
10004fa2:	68db      	ldr	r3, [r3, #12]
10004fa4:	68da      	ldr	r2, [r3, #12]
10004fa6:	687b      	ldr	r3, [r7, #4]
10004fa8:	7e5b      	ldrb	r3, [r3, #25]
10004faa:	1c10      	adds	r0, r2, #0
10004fac:	1c19      	adds	r1, r3, #0
10004fae:	f7fd fd3f 	bl	10002a30 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
                                                 (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
10004fb2:	687b      	ldr	r3, [r7, #4]
10004fb4:	691b      	ldr	r3, [r3, #16]
10004fb6:	681b      	ldr	r3, [r3, #0]
10004fb8:	b2db      	uxtb	r3, r3
10004fba:	b25b      	sxtb	r3, r3
10004fbc:	1c18      	adds	r0, r3, #0
10004fbe:	f7ff feaf 	bl	10004d20 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
10004fc2:	687b      	ldr	r3, [r7, #4]
10004fc4:	695b      	ldr	r3, [r3, #20]
10004fc6:	2b00      	cmp	r3, #0
10004fc8:	d002      	beq.n	10004fd0 <ADC_MEASUREMENT_Init+0x12c>
    {
      (handle_ptr->mux_config)();
10004fca:	687b      	ldr	r3, [r7, #4]
10004fcc:	695b      	ldr	r3, [r3, #20]
10004fce:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
10004fd0:	687b      	ldr	r3, [r7, #4]
10004fd2:	7e9b      	ldrb	r3, [r3, #26]
10004fd4:	2b00      	cmp	r3, #0
10004fd6:	d005      	beq.n	10004fe4 <ADC_MEASUREMENT_Init+0x140>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
10004fd8:	687b      	ldr	r3, [r7, #4]
10004fda:	68db      	ldr	r3, [r3, #12]
10004fdc:	68db      	ldr	r3, [r3, #12]
10004fde:	1c18      	adds	r0, r3, #0
10004fe0:	f7ff ff22 	bl	10004e28 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
10004fe4:	687b      	ldr	r3, [r7, #4]
10004fe6:	220e      	movs	r2, #14
10004fe8:	18ba      	adds	r2, r7, r2
10004fea:	7812      	ldrb	r2, [r2, #0]
10004fec:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
10004fee:	687b      	ldr	r3, [r7, #4]
10004ff0:	7e1b      	ldrb	r3, [r3, #24]
}
10004ff2:	1c18      	adds	r0, r3, #0
10004ff4:	46bd      	mov	sp, r7
10004ff6:	b005      	add	sp, #20
10004ff8:	bd90      	pop	{r4, r7, pc}
10004ffa:	46c0      	nop			; (mov r8, r8)

10004ffc <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
10004ffc:	b590      	push	{r4, r7, lr}
10004ffe:	b083      	sub	sp, #12
10005000:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
10005002:	1dfb      	adds	r3, r7, #7
10005004:	2200      	movs	r2, #0
10005006:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
10005008:	1dfc      	adds	r4, r7, #7
1000500a:	4b42      	ldr	r3, [pc, #264]	; (10005114 <DAVE_Init+0x118>)
1000500c:	1c18      	adds	r0, r3, #0
1000500e:	f7ff fe33 	bl	10004c78 <CLOCK_XMC1_Init>
10005012:	1c03      	adds	r3, r0, #0
10005014:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
10005016:	1dfb      	adds	r3, r7, #7
10005018:	781b      	ldrb	r3, [r3, #0]
1000501a:	2b00      	cmp	r3, #0
1000501c:	d106      	bne.n	1000502c <DAVE_Init+0x30>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
1000501e:	1dfc      	adds	r4, r7, #7
10005020:	4b3d      	ldr	r3, [pc, #244]	; (10005118 <DAVE_Init+0x11c>)
10005022:	1c18      	adds	r0, r3, #0
10005024:	f7fe fa82 	bl	1000352c <SYSTIMER_Init>
10005028:	1c03      	adds	r3, r0, #0
1000502a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000502c:	1dfb      	adds	r3, r7, #7
1000502e:	781b      	ldrb	r3, [r3, #0]
10005030:	2b00      	cmp	r3, #0
10005032:	d106      	bne.n	10005042 <DAVE_Init+0x46>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
10005034:	1dfc      	adds	r4, r7, #7
10005036:	4b39      	ldr	r3, [pc, #228]	; (1000511c <DAVE_Init+0x120>)
10005038:	1c18      	adds	r0, r3, #0
1000503a:	f7ff ff33 	bl	10004ea4 <ADC_MEASUREMENT_Init>
1000503e:	1c03      	adds	r3, r0, #0
10005040:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10005042:	1dfb      	adds	r3, r7, #7
10005044:	781b      	ldrb	r3, [r3, #0]
10005046:	2b00      	cmp	r3, #0
10005048:	d106      	bne.n	10005058 <DAVE_Init+0x5c>
  {
	 /**  Initialization of HALL_POSIF APP instance HALL_POSIF_0 */
	 init_status = (DAVE_STATUS_t)HALL_POSIF_Init(&HALL_POSIF_0); 
1000504a:	1dfc      	adds	r4, r7, #7
1000504c:	4b34      	ldr	r3, [pc, #208]	; (10005120 <DAVE_Init+0x124>)
1000504e:	1c18      	adds	r0, r3, #0
10005050:	f7ff fb0e 	bl	10004670 <HALL_POSIF_Init>
10005054:	1c03      	adds	r3, r0, #0
10005056:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10005058:	1dfb      	adds	r3, r7, #7
1000505a:	781b      	ldrb	r3, [r3, #0]
1000505c:	2b00      	cmp	r3, #0
1000505e:	d106      	bne.n	1000506e <DAVE_Init+0x72>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_HV */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_HV); 
10005060:	1dfc      	adds	r4, r7, #7
10005062:	4b30      	ldr	r3, [pc, #192]	; (10005124 <DAVE_Init+0x128>)
10005064:	1c18      	adds	r0, r3, #0
10005066:	f7fe fb47 	bl	100036f8 <PWM_CCU8_Init>
1000506a:	1c03      	adds	r3, r0, #0
1000506c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000506e:	1dfb      	adds	r3, r7, #7
10005070:	781b      	ldrb	r3, [r3, #0]
10005072:	2b00      	cmp	r3, #0
10005074:	d106      	bne.n	10005084 <DAVE_Init+0x88>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_HU */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_HU); 
10005076:	1dfc      	adds	r4, r7, #7
10005078:	4b2b      	ldr	r3, [pc, #172]	; (10005128 <DAVE_Init+0x12c>)
1000507a:	1c18      	adds	r0, r3, #0
1000507c:	f7fe ff4a 	bl	10003f14 <PWM_CCU4_Init>
10005080:	1c03      	adds	r3, r0, #0
10005082:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10005084:	1dfb      	adds	r3, r7, #7
10005086:	781b      	ldrb	r3, [r3, #0]
10005088:	2b00      	cmp	r3, #0
1000508a:	d106      	bne.n	1000509a <DAVE_Init+0x9e>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_LU */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_LU); 
1000508c:	1dfc      	adds	r4, r7, #7
1000508e:	4b27      	ldr	r3, [pc, #156]	; (1000512c <DAVE_Init+0x130>)
10005090:	1c18      	adds	r0, r3, #0
10005092:	f7fe ff3f 	bl	10003f14 <PWM_CCU4_Init>
10005096:	1c03      	adds	r3, r0, #0
10005098:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000509a:	1dfb      	adds	r3, r7, #7
1000509c:	781b      	ldrb	r3, [r3, #0]
1000509e:	2b00      	cmp	r3, #0
100050a0:	d106      	bne.n	100050b0 <DAVE_Init+0xb4>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_LV */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_LV); 
100050a2:	1dfc      	adds	r4, r7, #7
100050a4:	4b22      	ldr	r3, [pc, #136]	; (10005130 <DAVE_Init+0x134>)
100050a6:	1c18      	adds	r0, r3, #0
100050a8:	f7fe fb26 	bl	100036f8 <PWM_CCU8_Init>
100050ac:	1c03      	adds	r3, r0, #0
100050ae:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100050b0:	1dfb      	adds	r3, r7, #7
100050b2:	781b      	ldrb	r3, [r3, #0]
100050b4:	2b00      	cmp	r3, #0
100050b6:	d106      	bne.n	100050c6 <DAVE_Init+0xca>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_HW */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_HW); 
100050b8:	1dfc      	adds	r4, r7, #7
100050ba:	4b1e      	ldr	r3, [pc, #120]	; (10005134 <DAVE_Init+0x138>)
100050bc:	1c18      	adds	r0, r3, #0
100050be:	f7fe fb1b 	bl	100036f8 <PWM_CCU8_Init>
100050c2:	1c03      	adds	r3, r0, #0
100050c4:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100050c6:	1dfb      	adds	r3, r7, #7
100050c8:	781b      	ldrb	r3, [r3, #0]
100050ca:	2b00      	cmp	r3, #0
100050cc:	d106      	bne.n	100050dc <DAVE_Init+0xe0>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_LW */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_LW); 
100050ce:	1dfc      	adds	r4, r7, #7
100050d0:	4b19      	ldr	r3, [pc, #100]	; (10005138 <DAVE_Init+0x13c>)
100050d2:	1c18      	adds	r0, r3, #0
100050d4:	f7fe fb10 	bl	100036f8 <PWM_CCU8_Init>
100050d8:	1c03      	adds	r3, r0, #0
100050da:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100050dc:	1dfb      	adds	r3, r7, #7
100050de:	781b      	ldrb	r3, [r3, #0]
100050e0:	2b00      	cmp	r3, #0
100050e2:	d106      	bne.n	100050f2 <DAVE_Init+0xf6>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
100050e4:	1dfc      	adds	r4, r7, #7
100050e6:	4b15      	ldr	r3, [pc, #84]	; (1000513c <DAVE_Init+0x140>)
100050e8:	1c18      	adds	r0, r3, #0
100050ea:	f7fd ff31 	bl	10002f50 <TIMER_Init>
100050ee:	1c03      	adds	r3, r0, #0
100050f0:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100050f2:	1dfb      	adds	r3, r7, #7
100050f4:	781b      	ldrb	r3, [r3, #0]
100050f6:	2b00      	cmp	r3, #0
100050f8:	d106      	bne.n	10005108 <DAVE_Init+0x10c>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
100050fa:	1dfc      	adds	r4, r7, #7
100050fc:	4b10      	ldr	r3, [pc, #64]	; (10005140 <DAVE_Init+0x144>)
100050fe:	1c18      	adds	r0, r3, #0
10005100:	f7ff fa44 	bl	1000458c <INTERRUPT_Init>
10005104:	1c03      	adds	r3, r0, #0
10005106:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
10005108:	1dfb      	adds	r3, r7, #7
1000510a:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
1000510c:	1c18      	adds	r0, r3, #0
1000510e:	46bd      	mov	sp, r7
10005110:	b003      	add	sp, #12
10005112:	bd90      	pop	{r4, r7, pc}
10005114:	20000990 	.word	0x20000990
10005118:	20000988 	.word	0x20000988
1000511c:	20000950 	.word	0x20000950
10005120:	20000714 	.word	0x20000714
10005124:	20000578 	.word	0x20000578
10005128:	20000648 	.word	0x20000648
1000512c:	20000670 	.word	0x20000670
10005130:	200005ac 	.word	0x200005ac
10005134:	200005e0 	.word	0x200005e0
10005138:	20000614 	.word	0x20000614
1000513c:	20000550 	.word	0x20000550
10005140:	10005d78 	.word	0x10005d78

10005144 <main>:
#define one_on_sqrt_2 0.7071
#define one_on_sqrt_3 0.57735
#define PI 3.141592

int main(void)
{
10005144:	b590      	push	{r4, r7, lr}
10005146:	b083      	sub	sp, #12
10005148:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
1000514a:	1dfc      	adds	r4, r7, #7
1000514c:	f7ff ff56 	bl	10004ffc <DAVE_Init>
10005150:	1c03      	adds	r3, r0, #0
10005152:	7023      	strb	r3, [r4, #0]

  if (status != DAVE_STATUS_SUCCESS)
10005154:	1dfb      	adds	r3, r7, #7
10005156:	781b      	ldrb	r3, [r3, #0]
10005158:	2b00      	cmp	r3, #0
1000515a:	d000      	beq.n	1000515e <main+0x1a>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
1000515c:	e7fe      	b.n	1000515c <main+0x18>
  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  /*Alignment*/

  }
1000515e:	e7fe      	b.n	1000515e <main+0x1a>

10005160 <IRQ21_Handler>:
}
void NgatHandler(){
10005160:	b580      	push	{r7, lr}
10005162:	af00      	add	r7, sp, #0
	timetick_count++;
10005164:	4be1      	ldr	r3, [pc, #900]	; (100054ec <IRQ21_Handler+0x38c>)
10005166:	681b      	ldr	r3, [r3, #0]
10005168:	1c5a      	adds	r2, r3, #1
1000516a:	4be0      	ldr	r3, [pc, #896]	; (100054ec <IRQ21_Handler+0x38c>)
1000516c:	601a      	str	r2, [r3, #0]
	timetick_count1++;
1000516e:	4be0      	ldr	r3, [pc, #896]	; (100054f0 <IRQ21_Handler+0x390>)
10005170:	681b      	ldr	r3, [r3, #0]
10005172:	1c5a      	adds	r2, r3, #1
10005174:	4bde      	ldr	r3, [pc, #888]	; (100054f0 <IRQ21_Handler+0x390>)
10005176:	601a      	str	r2, [r3, #0]
	timetick_count2++;
10005178:	4bde      	ldr	r3, [pc, #888]	; (100054f4 <IRQ21_Handler+0x394>)
1000517a:	681b      	ldr	r3, [r3, #0]
1000517c:	1c5a      	adds	r2, r3, #1
1000517e:	4bdd      	ldr	r3, [pc, #884]	; (100054f4 <IRQ21_Handler+0x394>)
10005180:	601a      	str	r2, [r3, #0]
	timetick_count3++;
10005182:	4bdd      	ldr	r3, [pc, #884]	; (100054f8 <IRQ21_Handler+0x398>)
10005184:	681b      	ldr	r3, [r3, #0]
10005186:	1c5a      	adds	r2, r3, #1
10005188:	4bdb      	ldr	r3, [pc, #876]	; (100054f8 <IRQ21_Handler+0x398>)
1000518a:	601a      	str	r2, [r3, #0]
    if (timetick_count==0){
1000518c:	4bd7      	ldr	r3, [pc, #860]	; (100054ec <IRQ21_Handler+0x38c>)
1000518e:	681b      	ldr	r3, [r3, #0]
10005190:	2b00      	cmp	r3, #0
10005192:	d117      	bne.n	100051c4 <IRQ21_Handler+0x64>
			   PWM_CCU4_Stop(&PWM_HU);
10005194:	4bd9      	ldr	r3, [pc, #868]	; (100054fc <IRQ21_Handler+0x39c>)
10005196:	1c18      	adds	r0, r3, #0
10005198:	f7ff f942 	bl	10004420 <PWM_CCU4_Stop>
			   PWM_CCU4_Stop(&PWM_LU);
1000519c:	4bd8      	ldr	r3, [pc, #864]	; (10005500 <IRQ21_Handler+0x3a0>)
1000519e:	1c18      	adds	r0, r3, #0
100051a0:	f7ff f93e 	bl	10004420 <PWM_CCU4_Stop>
			   PWM_CCU8_Stop(&PWM_LV);
100051a4:	4bd7      	ldr	r3, [pc, #860]	; (10005504 <IRQ21_Handler+0x3a4>)
100051a6:	1c18      	adds	r0, r3, #0
100051a8:	f7fe fdcc 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Stop(&PWM_HW);
100051ac:	4bd6      	ldr	r3, [pc, #856]	; (10005508 <IRQ21_Handler+0x3a8>)
100051ae:	1c18      	adds	r0, r3, #0
100051b0:	f7fe fdc8 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Start(&PWM_HV);
100051b4:	4bd5      	ldr	r3, [pc, #852]	; (1000550c <IRQ21_Handler+0x3ac>)
100051b6:	1c18      	adds	r0, r3, #0
100051b8:	f7fe fd92 	bl	10003ce0 <PWM_CCU8_Start>
			   PWM_CCU8_Start(&PWM_LW);
100051bc:	4bd4      	ldr	r3, [pc, #848]	; (10005510 <IRQ21_Handler+0x3b0>)
100051be:	1c18      	adds	r0, r3, #0
100051c0:	f7fe fd8e 	bl	10003ce0 <PWM_CCU8_Start>
    }
		   if (timetick_count==50000){
100051c4:	4bc9      	ldr	r3, [pc, #804]	; (100054ec <IRQ21_Handler+0x38c>)
100051c6:	681b      	ldr	r3, [r3, #0]
100051c8:	4ad2      	ldr	r2, [pc, #840]	; (10005514 <IRQ21_Handler+0x3b4>)
100051ca:	4293      	cmp	r3, r2
100051cc:	d117      	bne.n	100051fe <IRQ21_Handler+0x9e>
			   PWM_CCU4_Stop(&PWM_LU);
100051ce:	4bcc      	ldr	r3, [pc, #816]	; (10005500 <IRQ21_Handler+0x3a0>)
100051d0:	1c18      	adds	r0, r3, #0
100051d2:	f7ff f925 	bl	10004420 <PWM_CCU4_Stop>
			   PWM_CCU8_Stop(&PWM_HV);
100051d6:	4bcd      	ldr	r3, [pc, #820]	; (1000550c <IRQ21_Handler+0x3ac>)
100051d8:	1c18      	adds	r0, r3, #0
100051da:	f7fe fdb3 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Stop(&PWM_LV);
100051de:	4bc9      	ldr	r3, [pc, #804]	; (10005504 <IRQ21_Handler+0x3a4>)
100051e0:	1c18      	adds	r0, r3, #0
100051e2:	f7fe fdaf 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Stop(&PWM_HW);
100051e6:	4bc8      	ldr	r3, [pc, #800]	; (10005508 <IRQ21_Handler+0x3a8>)
100051e8:	1c18      	adds	r0, r3, #0
100051ea:	f7fe fdab 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU4_Stop(&PWM_HU);
100051ee:	4bc3      	ldr	r3, [pc, #780]	; (100054fc <IRQ21_Handler+0x39c>)
100051f0:	1c18      	adds	r0, r3, #0
100051f2:	f7ff f915 	bl	10004420 <PWM_CCU4_Stop>
			   PWM_CCU8_Stop(&PWM_LW);
100051f6:	4bc6      	ldr	r3, [pc, #792]	; (10005510 <IRQ21_Handler+0x3b0>)
100051f8:	1c18      	adds	r0, r3, #0
100051fa:	f7fe fda3 	bl	10003d44 <PWM_CCU8_Stop>
		   }
		  /*Back emf zero crossing detect, calculate time delay 30 degrees*/
	       if ((volt_u>0.5) && (volt_u<12)){
100051fe:	4bc6      	ldr	r3, [pc, #792]	; (10005518 <IRQ21_Handler+0x3b8>)
10005200:	681b      	ldr	r3, [r3, #0]
10005202:	1c18      	adds	r0, r3, #0
10005204:	21fc      	movs	r1, #252	; 0xfc
10005206:	0589      	lsls	r1, r1, #22
10005208:	f000 fa7a 	bl	10005700 <__aeabi_fcmpgt>
1000520c:	1e03      	subs	r3, r0, #0
1000520e:	d029      	beq.n	10005264 <IRQ21_Handler+0x104>
10005210:	4bc1      	ldr	r3, [pc, #772]	; (10005518 <IRQ21_Handler+0x3b8>)
10005212:	681b      	ldr	r3, [r3, #0]
10005214:	1c18      	adds	r0, r3, #0
10005216:	49c1      	ldr	r1, [pc, #772]	; (1000551c <IRQ21_Handler+0x3bc>)
10005218:	f000 fa5e 	bl	100056d8 <__aeabi_fcmplt>
1000521c:	1e03      	subs	r3, r0, #0
1000521e:	d021      	beq.n	10005264 <IRQ21_Handler+0x104>
	    	   sector=4;
10005220:	4bbf      	ldr	r3, [pc, #764]	; (10005520 <IRQ21_Handler+0x3c0>)
10005222:	2204      	movs	r2, #4
10005224:	601a      	str	r2, [r3, #0]
			   PWM_CCU4_Stop(&PWM_HU);
10005226:	4bb5      	ldr	r3, [pc, #724]	; (100054fc <IRQ21_Handler+0x39c>)
10005228:	1c18      	adds	r0, r3, #0
1000522a:	f7ff f8f9 	bl	10004420 <PWM_CCU4_Stop>
			   PWM_CCU4_Stop(&PWM_LU);
1000522e:	4bb4      	ldr	r3, [pc, #720]	; (10005500 <IRQ21_Handler+0x3a0>)
10005230:	1c18      	adds	r0, r3, #0
10005232:	f7ff f8f5 	bl	10004420 <PWM_CCU4_Stop>
			   PWM_CCU8_Stop(&PWM_HV);
10005236:	4bb5      	ldr	r3, [pc, #724]	; (1000550c <IRQ21_Handler+0x3ac>)
10005238:	1c18      	adds	r0, r3, #0
1000523a:	f7fe fd83 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Stop(&PWM_LW);
1000523e:	4bb4      	ldr	r3, [pc, #720]	; (10005510 <IRQ21_Handler+0x3b0>)
10005240:	1c18      	adds	r0, r3, #0
10005242:	f7fe fd7f 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Start(&PWM_LV);
10005246:	4baf      	ldr	r3, [pc, #700]	; (10005504 <IRQ21_Handler+0x3a4>)
10005248:	1c18      	adds	r0, r3, #0
1000524a:	f7fe fd49 	bl	10003ce0 <PWM_CCU8_Start>
			   PWM_CCU8_Start(&PWM_HW);
1000524e:	4bae      	ldr	r3, [pc, #696]	; (10005508 <IRQ21_Handler+0x3a8>)
10005250:	1c18      	adds	r0, r3, #0
10005252:	f7fe fd45 	bl	10003ce0 <PWM_CCU8_Start>
			   time1=timetick_count2;
10005256:	4ba7      	ldr	r3, [pc, #668]	; (100054f4 <IRQ21_Handler+0x394>)
10005258:	681a      	ldr	r2, [r3, #0]
1000525a:	4bb2      	ldr	r3, [pc, #712]	; (10005524 <IRQ21_Handler+0x3c4>)
1000525c:	601a      	str	r2, [r3, #0]
			   flag1=1;
1000525e:	4bb2      	ldr	r3, [pc, #712]	; (10005528 <IRQ21_Handler+0x3c8>)
10005260:	2201      	movs	r2, #1
10005262:	601a      	str	r2, [r3, #0]
	       }
	       if ((volt_u>12) && (volt_u<23.5)){
10005264:	4bac      	ldr	r3, [pc, #688]	; (10005518 <IRQ21_Handler+0x3b8>)
10005266:	681b      	ldr	r3, [r3, #0]
10005268:	1c18      	adds	r0, r3, #0
1000526a:	49ac      	ldr	r1, [pc, #688]	; (1000551c <IRQ21_Handler+0x3bc>)
1000526c:	f000 fa48 	bl	10005700 <__aeabi_fcmpgt>
10005270:	1e03      	subs	r3, r0, #0
10005272:	d029      	beq.n	100052c8 <IRQ21_Handler+0x168>
10005274:	4ba8      	ldr	r3, [pc, #672]	; (10005518 <IRQ21_Handler+0x3b8>)
10005276:	681b      	ldr	r3, [r3, #0]
10005278:	1c18      	adds	r0, r3, #0
1000527a:	49ac      	ldr	r1, [pc, #688]	; (1000552c <IRQ21_Handler+0x3cc>)
1000527c:	f000 fa2c 	bl	100056d8 <__aeabi_fcmplt>
10005280:	1e03      	subs	r3, r0, #0
10005282:	d021      	beq.n	100052c8 <IRQ21_Handler+0x168>
	    	   sector=1;
10005284:	4ba6      	ldr	r3, [pc, #664]	; (10005520 <IRQ21_Handler+0x3c0>)
10005286:	2201      	movs	r2, #1
10005288:	601a      	str	r2, [r3, #0]
			   PWM_CCU4_Stop(&PWM_HU);
1000528a:	4b9c      	ldr	r3, [pc, #624]	; (100054fc <IRQ21_Handler+0x39c>)
1000528c:	1c18      	adds	r0, r3, #0
1000528e:	f7ff f8c7 	bl	10004420 <PWM_CCU4_Stop>
			   PWM_CCU4_Stop(&PWM_LU);
10005292:	4b9b      	ldr	r3, [pc, #620]	; (10005500 <IRQ21_Handler+0x3a0>)
10005294:	1c18      	adds	r0, r3, #0
10005296:	f7ff f8c3 	bl	10004420 <PWM_CCU4_Stop>
			   PWM_CCU8_Stop(&PWM_LV);
1000529a:	4b9a      	ldr	r3, [pc, #616]	; (10005504 <IRQ21_Handler+0x3a4>)
1000529c:	1c18      	adds	r0, r3, #0
1000529e:	f7fe fd51 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Stop(&PWM_HW);
100052a2:	4b99      	ldr	r3, [pc, #612]	; (10005508 <IRQ21_Handler+0x3a8>)
100052a4:	1c18      	adds	r0, r3, #0
100052a6:	f7fe fd4d 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Start(&PWM_HV);
100052aa:	4b98      	ldr	r3, [pc, #608]	; (1000550c <IRQ21_Handler+0x3ac>)
100052ac:	1c18      	adds	r0, r3, #0
100052ae:	f7fe fd17 	bl	10003ce0 <PWM_CCU8_Start>
			   PWM_CCU8_Start(&PWM_LW);
100052b2:	4b97      	ldr	r3, [pc, #604]	; (10005510 <IRQ21_Handler+0x3b0>)
100052b4:	1c18      	adds	r0, r3, #0
100052b6:	f7fe fd13 	bl	10003ce0 <PWM_CCU8_Start>
			   time2=timetick_count2;
100052ba:	4b8e      	ldr	r3, [pc, #568]	; (100054f4 <IRQ21_Handler+0x394>)
100052bc:	681a      	ldr	r2, [r3, #0]
100052be:	4b9c      	ldr	r3, [pc, #624]	; (10005530 <IRQ21_Handler+0x3d0>)
100052c0:	601a      	str	r2, [r3, #0]
			   flag2=1;
100052c2:	4b9c      	ldr	r3, [pc, #624]	; (10005534 <IRQ21_Handler+0x3d4>)
100052c4:	2201      	movs	r2, #1
100052c6:	601a      	str	r2, [r3, #0]
	       }
	       if ( (volt_v>0.5) && (volt_v<12)){
100052c8:	4b9b      	ldr	r3, [pc, #620]	; (10005538 <IRQ21_Handler+0x3d8>)
100052ca:	681b      	ldr	r3, [r3, #0]
100052cc:	1c18      	adds	r0, r3, #0
100052ce:	21fc      	movs	r1, #252	; 0xfc
100052d0:	0589      	lsls	r1, r1, #22
100052d2:	f000 fa15 	bl	10005700 <__aeabi_fcmpgt>
100052d6:	1e03      	subs	r3, r0, #0
100052d8:	d022      	beq.n	10005320 <IRQ21_Handler+0x1c0>
100052da:	4b97      	ldr	r3, [pc, #604]	; (10005538 <IRQ21_Handler+0x3d8>)
100052dc:	681b      	ldr	r3, [r3, #0]
100052de:	1c18      	adds	r0, r3, #0
100052e0:	498e      	ldr	r1, [pc, #568]	; (1000551c <IRQ21_Handler+0x3bc>)
100052e2:	f000 f9f9 	bl	100056d8 <__aeabi_fcmplt>
100052e6:	1e03      	subs	r3, r0, #0
100052e8:	d01a      	beq.n	10005320 <IRQ21_Handler+0x1c0>
	    	   sector=6;
100052ea:	4b8d      	ldr	r3, [pc, #564]	; (10005520 <IRQ21_Handler+0x3c0>)
100052ec:	2206      	movs	r2, #6
100052ee:	601a      	str	r2, [r3, #0]
			   PWM_CCU4_Stop(&PWM_LU);
100052f0:	4b83      	ldr	r3, [pc, #524]	; (10005500 <IRQ21_Handler+0x3a0>)
100052f2:	1c18      	adds	r0, r3, #0
100052f4:	f7ff f894 	bl	10004420 <PWM_CCU4_Stop>
			   PWM_CCU8_Stop(&PWM_HV);
100052f8:	4b84      	ldr	r3, [pc, #528]	; (1000550c <IRQ21_Handler+0x3ac>)
100052fa:	1c18      	adds	r0, r3, #0
100052fc:	f7fe fd22 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Stop(&PWM_LV);
10005300:	4b80      	ldr	r3, [pc, #512]	; (10005504 <IRQ21_Handler+0x3a4>)
10005302:	1c18      	adds	r0, r3, #0
10005304:	f7fe fd1e 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Stop(&PWM_HW);
10005308:	4b7f      	ldr	r3, [pc, #508]	; (10005508 <IRQ21_Handler+0x3a8>)
1000530a:	1c18      	adds	r0, r3, #0
1000530c:	f7fe fd1a 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU4_Start(&PWM_HU);
10005310:	4b7a      	ldr	r3, [pc, #488]	; (100054fc <IRQ21_Handler+0x39c>)
10005312:	1c18      	adds	r0, r3, #0
10005314:	f7ff f852 	bl	100043bc <PWM_CCU4_Start>
			   PWM_CCU8_Start(&PWM_LW);
10005318:	4b7d      	ldr	r3, [pc, #500]	; (10005510 <IRQ21_Handler+0x3b0>)
1000531a:	1c18      	adds	r0, r3, #0
1000531c:	f7fe fce0 	bl	10003ce0 <PWM_CCU8_Start>
	       }
	       if ( (volt_v>12) && (volt_v<23.5)){
10005320:	4b85      	ldr	r3, [pc, #532]	; (10005538 <IRQ21_Handler+0x3d8>)
10005322:	681b      	ldr	r3, [r3, #0]
10005324:	1c18      	adds	r0, r3, #0
10005326:	497d      	ldr	r1, [pc, #500]	; (1000551c <IRQ21_Handler+0x3bc>)
10005328:	f000 f9ea 	bl	10005700 <__aeabi_fcmpgt>
1000532c:	1e03      	subs	r3, r0, #0
1000532e:	d022      	beq.n	10005376 <IRQ21_Handler+0x216>
10005330:	4b81      	ldr	r3, [pc, #516]	; (10005538 <IRQ21_Handler+0x3d8>)
10005332:	681b      	ldr	r3, [r3, #0]
10005334:	1c18      	adds	r0, r3, #0
10005336:	497d      	ldr	r1, [pc, #500]	; (1000552c <IRQ21_Handler+0x3cc>)
10005338:	f000 f9ce 	bl	100056d8 <__aeabi_fcmplt>
1000533c:	1e03      	subs	r3, r0, #0
1000533e:	d01a      	beq.n	10005376 <IRQ21_Handler+0x216>
	    	   sector=3;
10005340:	4b77      	ldr	r3, [pc, #476]	; (10005520 <IRQ21_Handler+0x3c0>)
10005342:	2203      	movs	r2, #3
10005344:	601a      	str	r2, [r3, #0]
			   PWM_CCU4_Stop(&PWM_HU);
10005346:	4b6d      	ldr	r3, [pc, #436]	; (100054fc <IRQ21_Handler+0x39c>)
10005348:	1c18      	adds	r0, r3, #0
1000534a:	f7ff f869 	bl	10004420 <PWM_CCU4_Stop>
			   PWM_CCU8_Stop(&PWM_HV);
1000534e:	4b6f      	ldr	r3, [pc, #444]	; (1000550c <IRQ21_Handler+0x3ac>)
10005350:	1c18      	adds	r0, r3, #0
10005352:	f7fe fcf7 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Stop(&PWM_LV);
10005356:	4b6b      	ldr	r3, [pc, #428]	; (10005504 <IRQ21_Handler+0x3a4>)
10005358:	1c18      	adds	r0, r3, #0
1000535a:	f7fe fcf3 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Stop(&PWM_LW);
1000535e:	4b6c      	ldr	r3, [pc, #432]	; (10005510 <IRQ21_Handler+0x3b0>)
10005360:	1c18      	adds	r0, r3, #0
10005362:	f7fe fcef 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU4_Start(&PWM_LU);
10005366:	4b66      	ldr	r3, [pc, #408]	; (10005500 <IRQ21_Handler+0x3a0>)
10005368:	1c18      	adds	r0, r3, #0
1000536a:	f7ff f827 	bl	100043bc <PWM_CCU4_Start>
			   PWM_CCU8_Start(&PWM_HW);
1000536e:	4b66      	ldr	r3, [pc, #408]	; (10005508 <IRQ21_Handler+0x3a8>)
10005370:	1c18      	adds	r0, r3, #0
10005372:	f7fe fcb5 	bl	10003ce0 <PWM_CCU8_Start>
	       }
	       if ((volt_w>0.5) && (volt_w<12)){
10005376:	4b71      	ldr	r3, [pc, #452]	; (1000553c <IRQ21_Handler+0x3dc>)
10005378:	681b      	ldr	r3, [r3, #0]
1000537a:	1c18      	adds	r0, r3, #0
1000537c:	21fc      	movs	r1, #252	; 0xfc
1000537e:	0589      	lsls	r1, r1, #22
10005380:	f000 f9be 	bl	10005700 <__aeabi_fcmpgt>
10005384:	1e03      	subs	r3, r0, #0
10005386:	d022      	beq.n	100053ce <IRQ21_Handler+0x26e>
10005388:	4b6c      	ldr	r3, [pc, #432]	; (1000553c <IRQ21_Handler+0x3dc>)
1000538a:	681b      	ldr	r3, [r3, #0]
1000538c:	1c18      	adds	r0, r3, #0
1000538e:	4963      	ldr	r1, [pc, #396]	; (1000551c <IRQ21_Handler+0x3bc>)
10005390:	f000 f9a2 	bl	100056d8 <__aeabi_fcmplt>
10005394:	1e03      	subs	r3, r0, #0
10005396:	d01a      	beq.n	100053ce <IRQ21_Handler+0x26e>
	    	   sector=2;
10005398:	4b61      	ldr	r3, [pc, #388]	; (10005520 <IRQ21_Handler+0x3c0>)
1000539a:	2202      	movs	r2, #2
1000539c:	601a      	str	r2, [r3, #0]
			   PWM_CCU4_Stop(&PWM_HU);
1000539e:	4b57      	ldr	r3, [pc, #348]	; (100054fc <IRQ21_Handler+0x39c>)
100053a0:	1c18      	adds	r0, r3, #0
100053a2:	f7ff f83d 	bl	10004420 <PWM_CCU4_Stop>
			   PWM_CCU8_Stop(&PWM_LV);
100053a6:	4b57      	ldr	r3, [pc, #348]	; (10005504 <IRQ21_Handler+0x3a4>)
100053a8:	1c18      	adds	r0, r3, #0
100053aa:	f7fe fccb 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Stop(&PWM_HW);
100053ae:	4b56      	ldr	r3, [pc, #344]	; (10005508 <IRQ21_Handler+0x3a8>)
100053b0:	1c18      	adds	r0, r3, #0
100053b2:	f7fe fcc7 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Stop(&PWM_LW);
100053b6:	4b56      	ldr	r3, [pc, #344]	; (10005510 <IRQ21_Handler+0x3b0>)
100053b8:	1c18      	adds	r0, r3, #0
100053ba:	f7fe fcc3 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU4_Start(&PWM_LU);
100053be:	4b50      	ldr	r3, [pc, #320]	; (10005500 <IRQ21_Handler+0x3a0>)
100053c0:	1c18      	adds	r0, r3, #0
100053c2:	f7fe fffb 	bl	100043bc <PWM_CCU4_Start>
			   PWM_CCU8_Start(&PWM_HV);
100053c6:	4b51      	ldr	r3, [pc, #324]	; (1000550c <IRQ21_Handler+0x3ac>)
100053c8:	1c18      	adds	r0, r3, #0
100053ca:	f7fe fc89 	bl	10003ce0 <PWM_CCU8_Start>
	       }
	       if ((volt_w>12) && (volt_w<23.5)){
100053ce:	4b5b      	ldr	r3, [pc, #364]	; (1000553c <IRQ21_Handler+0x3dc>)
100053d0:	681b      	ldr	r3, [r3, #0]
100053d2:	1c18      	adds	r0, r3, #0
100053d4:	4951      	ldr	r1, [pc, #324]	; (1000551c <IRQ21_Handler+0x3bc>)
100053d6:	f000 f993 	bl	10005700 <__aeabi_fcmpgt>
100053da:	1e03      	subs	r3, r0, #0
100053dc:	d022      	beq.n	10005424 <IRQ21_Handler+0x2c4>
100053de:	4b57      	ldr	r3, [pc, #348]	; (1000553c <IRQ21_Handler+0x3dc>)
100053e0:	681b      	ldr	r3, [r3, #0]
100053e2:	1c18      	adds	r0, r3, #0
100053e4:	4951      	ldr	r1, [pc, #324]	; (1000552c <IRQ21_Handler+0x3cc>)
100053e6:	f000 f977 	bl	100056d8 <__aeabi_fcmplt>
100053ea:	1e03      	subs	r3, r0, #0
100053ec:	d01a      	beq.n	10005424 <IRQ21_Handler+0x2c4>
	    	   sector=5;
100053ee:	4b4c      	ldr	r3, [pc, #304]	; (10005520 <IRQ21_Handler+0x3c0>)
100053f0:	2205      	movs	r2, #5
100053f2:	601a      	str	r2, [r3, #0]
			   PWM_CCU4_Stop(&PWM_HU);
100053f4:	4b41      	ldr	r3, [pc, #260]	; (100054fc <IRQ21_Handler+0x39c>)
100053f6:	1c18      	adds	r0, r3, #0
100053f8:	f7ff f812 	bl	10004420 <PWM_CCU4_Stop>
			   PWM_CCU8_Stop(&PWM_LV);
100053fc:	4b41      	ldr	r3, [pc, #260]	; (10005504 <IRQ21_Handler+0x3a4>)
100053fe:	1c18      	adds	r0, r3, #0
10005400:	f7fe fca0 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Stop(&PWM_HW);
10005404:	4b40      	ldr	r3, [pc, #256]	; (10005508 <IRQ21_Handler+0x3a8>)
10005406:	1c18      	adds	r0, r3, #0
10005408:	f7fe fc9c 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU8_Stop(&PWM_LW);
1000540c:	4b40      	ldr	r3, [pc, #256]	; (10005510 <IRQ21_Handler+0x3b0>)
1000540e:	1c18      	adds	r0, r3, #0
10005410:	f7fe fc98 	bl	10003d44 <PWM_CCU8_Stop>
			   PWM_CCU4_Start(&PWM_LU);
10005414:	4b3a      	ldr	r3, [pc, #232]	; (10005500 <IRQ21_Handler+0x3a0>)
10005416:	1c18      	adds	r0, r3, #0
10005418:	f7fe ffd0 	bl	100043bc <PWM_CCU4_Start>
			   PWM_CCU8_Start(&PWM_HV);
1000541c:	4b3b      	ldr	r3, [pc, #236]	; (1000550c <IRQ21_Handler+0x3ac>)
1000541e:	1c18      	adds	r0, r3, #0
10005420:	f7fe fc5e 	bl	10003ce0 <PWM_CCU8_Start>
	       }
	           if ((volt_u>0.5) && (volt_u<12)){
10005424:	4b3c      	ldr	r3, [pc, #240]	; (10005518 <IRQ21_Handler+0x3b8>)
10005426:	681b      	ldr	r3, [r3, #0]
10005428:	1c18      	adds	r0, r3, #0
1000542a:	21fc      	movs	r1, #252	; 0xfc
1000542c:	0589      	lsls	r1, r1, #22
1000542e:	f000 f967 	bl	10005700 <__aeabi_fcmpgt>
10005432:	1e03      	subs	r3, r0, #0
10005434:	d022      	beq.n	1000547c <IRQ21_Handler+0x31c>
10005436:	4b38      	ldr	r3, [pc, #224]	; (10005518 <IRQ21_Handler+0x3b8>)
10005438:	681b      	ldr	r3, [r3, #0]
1000543a:	1c18      	adds	r0, r3, #0
1000543c:	4937      	ldr	r1, [pc, #220]	; (1000551c <IRQ21_Handler+0x3bc>)
1000543e:	f000 f94b 	bl	100056d8 <__aeabi_fcmplt>
10005442:	1e03      	subs	r3, r0, #0
10005444:	d01a      	beq.n	1000547c <IRQ21_Handler+0x31c>
	        	   sector=4;
10005446:	4b36      	ldr	r3, [pc, #216]	; (10005520 <IRQ21_Handler+0x3c0>)
10005448:	2204      	movs	r2, #4
1000544a:	601a      	str	r2, [r3, #0]
	    		   PWM_CCU4_Stop(&PWM_HU);
1000544c:	4b2b      	ldr	r3, [pc, #172]	; (100054fc <IRQ21_Handler+0x39c>)
1000544e:	1c18      	adds	r0, r3, #0
10005450:	f7fe ffe6 	bl	10004420 <PWM_CCU4_Stop>
	    		   PWM_CCU4_Stop(&PWM_LU);
10005454:	4b2a      	ldr	r3, [pc, #168]	; (10005500 <IRQ21_Handler+0x3a0>)
10005456:	1c18      	adds	r0, r3, #0
10005458:	f7fe ffe2 	bl	10004420 <PWM_CCU4_Stop>
	    		   PWM_CCU8_Stop(&PWM_HV);
1000545c:	4b2b      	ldr	r3, [pc, #172]	; (1000550c <IRQ21_Handler+0x3ac>)
1000545e:	1c18      	adds	r0, r3, #0
10005460:	f7fe fc70 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU8_Stop(&PWM_LW);
10005464:	4b2a      	ldr	r3, [pc, #168]	; (10005510 <IRQ21_Handler+0x3b0>)
10005466:	1c18      	adds	r0, r3, #0
10005468:	f7fe fc6c 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU8_Start(&PWM_LV);
1000546c:	4b25      	ldr	r3, [pc, #148]	; (10005504 <IRQ21_Handler+0x3a4>)
1000546e:	1c18      	adds	r0, r3, #0
10005470:	f7fe fc36 	bl	10003ce0 <PWM_CCU8_Start>
	    		   PWM_CCU8_Start(&PWM_HW);
10005474:	4b24      	ldr	r3, [pc, #144]	; (10005508 <IRQ21_Handler+0x3a8>)
10005476:	1c18      	adds	r0, r3, #0
10005478:	f7fe fc32 	bl	10003ce0 <PWM_CCU8_Start>

	           }
	           if ((volt_u>12) && (volt_u<23.5)){
1000547c:	4b26      	ldr	r3, [pc, #152]	; (10005518 <IRQ21_Handler+0x3b8>)
1000547e:	681b      	ldr	r3, [r3, #0]
10005480:	1c18      	adds	r0, r3, #0
10005482:	4926      	ldr	r1, [pc, #152]	; (1000551c <IRQ21_Handler+0x3bc>)
10005484:	f000 f93c 	bl	10005700 <__aeabi_fcmpgt>
10005488:	1e03      	subs	r3, r0, #0
1000548a:	d022      	beq.n	100054d2 <IRQ21_Handler+0x372>
1000548c:	4b22      	ldr	r3, [pc, #136]	; (10005518 <IRQ21_Handler+0x3b8>)
1000548e:	681b      	ldr	r3, [r3, #0]
10005490:	1c18      	adds	r0, r3, #0
10005492:	4926      	ldr	r1, [pc, #152]	; (1000552c <IRQ21_Handler+0x3cc>)
10005494:	f000 f920 	bl	100056d8 <__aeabi_fcmplt>
10005498:	1e03      	subs	r3, r0, #0
1000549a:	d01a      	beq.n	100054d2 <IRQ21_Handler+0x372>
	        	   sector=1;
1000549c:	4b20      	ldr	r3, [pc, #128]	; (10005520 <IRQ21_Handler+0x3c0>)
1000549e:	2201      	movs	r2, #1
100054a0:	601a      	str	r2, [r3, #0]
	    		   PWM_CCU4_Stop(&PWM_HU);
100054a2:	4b16      	ldr	r3, [pc, #88]	; (100054fc <IRQ21_Handler+0x39c>)
100054a4:	1c18      	adds	r0, r3, #0
100054a6:	f7fe ffbb 	bl	10004420 <PWM_CCU4_Stop>
	    		   PWM_CCU4_Stop(&PWM_LU);
100054aa:	4b15      	ldr	r3, [pc, #84]	; (10005500 <IRQ21_Handler+0x3a0>)
100054ac:	1c18      	adds	r0, r3, #0
100054ae:	f7fe ffb7 	bl	10004420 <PWM_CCU4_Stop>
	    		   PWM_CCU8_Stop(&PWM_LV);
100054b2:	4b14      	ldr	r3, [pc, #80]	; (10005504 <IRQ21_Handler+0x3a4>)
100054b4:	1c18      	adds	r0, r3, #0
100054b6:	f7fe fc45 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU8_Stop(&PWM_HW);
100054ba:	4b13      	ldr	r3, [pc, #76]	; (10005508 <IRQ21_Handler+0x3a8>)
100054bc:	1c18      	adds	r0, r3, #0
100054be:	f7fe fc41 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU8_Start(&PWM_HV);
100054c2:	4b12      	ldr	r3, [pc, #72]	; (1000550c <IRQ21_Handler+0x3ac>)
100054c4:	1c18      	adds	r0, r3, #0
100054c6:	f7fe fc0b 	bl	10003ce0 <PWM_CCU8_Start>
	    		   PWM_CCU8_Start(&PWM_LW);
100054ca:	4b11      	ldr	r3, [pc, #68]	; (10005510 <IRQ21_Handler+0x3b0>)
100054cc:	1c18      	adds	r0, r3, #0
100054ce:	f7fe fc07 	bl	10003ce0 <PWM_CCU8_Start>

	           }
	           if ( (volt_v>0.5) && (volt_v<12)){
100054d2:	4b19      	ldr	r3, [pc, #100]	; (10005538 <IRQ21_Handler+0x3d8>)
100054d4:	681b      	ldr	r3, [r3, #0]
100054d6:	1c18      	adds	r0, r3, #0
100054d8:	21fc      	movs	r1, #252	; 0xfc
100054da:	0589      	lsls	r1, r1, #22
100054dc:	f000 f910 	bl	10005700 <__aeabi_fcmpgt>
100054e0:	1e03      	subs	r3, r0, #0
100054e2:	d04d      	beq.n	10005580 <IRQ21_Handler+0x420>
100054e4:	4b14      	ldr	r3, [pc, #80]	; (10005538 <IRQ21_Handler+0x3d8>)
100054e6:	681b      	ldr	r3, [r3, #0]
100054e8:	1c18      	adds	r0, r3, #0
100054ea:	e029      	b.n	10005540 <IRQ21_Handler+0x3e0>
100054ec:	200009c0 	.word	0x200009c0
100054f0:	200009c4 	.word	0x200009c4
100054f4:	200009c8 	.word	0x200009c8
100054f8:	200009cc 	.word	0x200009cc
100054fc:	20000648 	.word	0x20000648
10005500:	20000670 	.word	0x20000670
10005504:	200005ac 	.word	0x200005ac
10005508:	200005e0 	.word	0x200005e0
1000550c:	20000578 	.word	0x20000578
10005510:	20000614 	.word	0x20000614
10005514:	0000c350 	.word	0x0000c350
10005518:	20000b5c 	.word	0x20000b5c
1000551c:	41400000 	.word	0x41400000
10005520:	20000b54 	.word	0x20000b54
10005524:	20000b60 	.word	0x20000b60
10005528:	200009b8 	.word	0x200009b8
1000552c:	41bc0000 	.word	0x41bc0000
10005530:	20000bb4 	.word	0x20000bb4
10005534:	200009bc 	.word	0x200009bc
10005538:	20000bac 	.word	0x20000bac
1000553c:	20000bc0 	.word	0x20000bc0
10005540:	4951      	ldr	r1, [pc, #324]	; (10005688 <IRQ21_Handler+0x528>)
10005542:	f000 f8c9 	bl	100056d8 <__aeabi_fcmplt>
10005546:	1e03      	subs	r3, r0, #0
10005548:	d01a      	beq.n	10005580 <IRQ21_Handler+0x420>
	        	   sector=6;
1000554a:	4b50      	ldr	r3, [pc, #320]	; (1000568c <IRQ21_Handler+0x52c>)
1000554c:	2206      	movs	r2, #6
1000554e:	601a      	str	r2, [r3, #0]
	    		   PWM_CCU4_Stop(&PWM_LU);
10005550:	4b4f      	ldr	r3, [pc, #316]	; (10005690 <IRQ21_Handler+0x530>)
10005552:	1c18      	adds	r0, r3, #0
10005554:	f7fe ff64 	bl	10004420 <PWM_CCU4_Stop>
	    		   PWM_CCU8_Stop(&PWM_HV);
10005558:	4b4e      	ldr	r3, [pc, #312]	; (10005694 <IRQ21_Handler+0x534>)
1000555a:	1c18      	adds	r0, r3, #0
1000555c:	f7fe fbf2 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU8_Stop(&PWM_LV);
10005560:	4b4d      	ldr	r3, [pc, #308]	; (10005698 <IRQ21_Handler+0x538>)
10005562:	1c18      	adds	r0, r3, #0
10005564:	f7fe fbee 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU8_Stop(&PWM_HW);
10005568:	4b4c      	ldr	r3, [pc, #304]	; (1000569c <IRQ21_Handler+0x53c>)
1000556a:	1c18      	adds	r0, r3, #0
1000556c:	f7fe fbea 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU4_Start(&PWM_HU);
10005570:	4b4b      	ldr	r3, [pc, #300]	; (100056a0 <IRQ21_Handler+0x540>)
10005572:	1c18      	adds	r0, r3, #0
10005574:	f7fe ff22 	bl	100043bc <PWM_CCU4_Start>
	    		   PWM_CCU8_Start(&PWM_LW);
10005578:	4b4a      	ldr	r3, [pc, #296]	; (100056a4 <IRQ21_Handler+0x544>)
1000557a:	1c18      	adds	r0, r3, #0
1000557c:	f7fe fbb0 	bl	10003ce0 <PWM_CCU8_Start>

	           }
	           if ( (volt_v>12) && (volt_v<23.5)){
10005580:	4b49      	ldr	r3, [pc, #292]	; (100056a8 <IRQ21_Handler+0x548>)
10005582:	681b      	ldr	r3, [r3, #0]
10005584:	1c18      	adds	r0, r3, #0
10005586:	4940      	ldr	r1, [pc, #256]	; (10005688 <IRQ21_Handler+0x528>)
10005588:	f000 f8ba 	bl	10005700 <__aeabi_fcmpgt>
1000558c:	1e03      	subs	r3, r0, #0
1000558e:	d022      	beq.n	100055d6 <IRQ21_Handler+0x476>
10005590:	4b45      	ldr	r3, [pc, #276]	; (100056a8 <IRQ21_Handler+0x548>)
10005592:	681b      	ldr	r3, [r3, #0]
10005594:	1c18      	adds	r0, r3, #0
10005596:	4945      	ldr	r1, [pc, #276]	; (100056ac <IRQ21_Handler+0x54c>)
10005598:	f000 f89e 	bl	100056d8 <__aeabi_fcmplt>
1000559c:	1e03      	subs	r3, r0, #0
1000559e:	d01a      	beq.n	100055d6 <IRQ21_Handler+0x476>
	        	   sector=3;
100055a0:	4b3a      	ldr	r3, [pc, #232]	; (1000568c <IRQ21_Handler+0x52c>)
100055a2:	2203      	movs	r2, #3
100055a4:	601a      	str	r2, [r3, #0]
	    		   PWM_CCU4_Stop(&PWM_HU);
100055a6:	4b3e      	ldr	r3, [pc, #248]	; (100056a0 <IRQ21_Handler+0x540>)
100055a8:	1c18      	adds	r0, r3, #0
100055aa:	f7fe ff39 	bl	10004420 <PWM_CCU4_Stop>
	    		   PWM_CCU8_Stop(&PWM_HV);
100055ae:	4b39      	ldr	r3, [pc, #228]	; (10005694 <IRQ21_Handler+0x534>)
100055b0:	1c18      	adds	r0, r3, #0
100055b2:	f7fe fbc7 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU8_Stop(&PWM_LV);
100055b6:	4b38      	ldr	r3, [pc, #224]	; (10005698 <IRQ21_Handler+0x538>)
100055b8:	1c18      	adds	r0, r3, #0
100055ba:	f7fe fbc3 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU8_Stop(&PWM_LW);
100055be:	4b39      	ldr	r3, [pc, #228]	; (100056a4 <IRQ21_Handler+0x544>)
100055c0:	1c18      	adds	r0, r3, #0
100055c2:	f7fe fbbf 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU4_Start(&PWM_LU);
100055c6:	4b32      	ldr	r3, [pc, #200]	; (10005690 <IRQ21_Handler+0x530>)
100055c8:	1c18      	adds	r0, r3, #0
100055ca:	f7fe fef7 	bl	100043bc <PWM_CCU4_Start>
	    		   PWM_CCU8_Start(&PWM_HW);
100055ce:	4b33      	ldr	r3, [pc, #204]	; (1000569c <IRQ21_Handler+0x53c>)
100055d0:	1c18      	adds	r0, r3, #0
100055d2:	f7fe fb85 	bl	10003ce0 <PWM_CCU8_Start>

	           }
	           if ((volt_w>0.5) && (volt_w<12)){
100055d6:	4b36      	ldr	r3, [pc, #216]	; (100056b0 <IRQ21_Handler+0x550>)
100055d8:	681b      	ldr	r3, [r3, #0]
100055da:	1c18      	adds	r0, r3, #0
100055dc:	21fc      	movs	r1, #252	; 0xfc
100055de:	0589      	lsls	r1, r1, #22
100055e0:	f000 f88e 	bl	10005700 <__aeabi_fcmpgt>
100055e4:	1e03      	subs	r3, r0, #0
100055e6:	d022      	beq.n	1000562e <IRQ21_Handler+0x4ce>
100055e8:	4b31      	ldr	r3, [pc, #196]	; (100056b0 <IRQ21_Handler+0x550>)
100055ea:	681b      	ldr	r3, [r3, #0]
100055ec:	1c18      	adds	r0, r3, #0
100055ee:	4926      	ldr	r1, [pc, #152]	; (10005688 <IRQ21_Handler+0x528>)
100055f0:	f000 f872 	bl	100056d8 <__aeabi_fcmplt>
100055f4:	1e03      	subs	r3, r0, #0
100055f6:	d01a      	beq.n	1000562e <IRQ21_Handler+0x4ce>
	        	   sector=2;
100055f8:	4b24      	ldr	r3, [pc, #144]	; (1000568c <IRQ21_Handler+0x52c>)
100055fa:	2202      	movs	r2, #2
100055fc:	601a      	str	r2, [r3, #0]
	    		   PWM_CCU4_Stop(&PWM_HU);
100055fe:	4b28      	ldr	r3, [pc, #160]	; (100056a0 <IRQ21_Handler+0x540>)
10005600:	1c18      	adds	r0, r3, #0
10005602:	f7fe ff0d 	bl	10004420 <PWM_CCU4_Stop>
	    		   PWM_CCU8_Stop(&PWM_LV);
10005606:	4b24      	ldr	r3, [pc, #144]	; (10005698 <IRQ21_Handler+0x538>)
10005608:	1c18      	adds	r0, r3, #0
1000560a:	f7fe fb9b 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU8_Stop(&PWM_HW);
1000560e:	4b23      	ldr	r3, [pc, #140]	; (1000569c <IRQ21_Handler+0x53c>)
10005610:	1c18      	adds	r0, r3, #0
10005612:	f7fe fb97 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU8_Stop(&PWM_LW);
10005616:	4b23      	ldr	r3, [pc, #140]	; (100056a4 <IRQ21_Handler+0x544>)
10005618:	1c18      	adds	r0, r3, #0
1000561a:	f7fe fb93 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU4_Start(&PWM_LU);
1000561e:	4b1c      	ldr	r3, [pc, #112]	; (10005690 <IRQ21_Handler+0x530>)
10005620:	1c18      	adds	r0, r3, #0
10005622:	f7fe fecb 	bl	100043bc <PWM_CCU4_Start>
	    		   PWM_CCU8_Start(&PWM_HV);
10005626:	4b1b      	ldr	r3, [pc, #108]	; (10005694 <IRQ21_Handler+0x534>)
10005628:	1c18      	adds	r0, r3, #0
1000562a:	f7fe fb59 	bl	10003ce0 <PWM_CCU8_Start>
	           }
	           if ((volt_w>12) && (volt_w<23.5)){
1000562e:	4b20      	ldr	r3, [pc, #128]	; (100056b0 <IRQ21_Handler+0x550>)
10005630:	681b      	ldr	r3, [r3, #0]
10005632:	1c18      	adds	r0, r3, #0
10005634:	4914      	ldr	r1, [pc, #80]	; (10005688 <IRQ21_Handler+0x528>)
10005636:	f000 f863 	bl	10005700 <__aeabi_fcmpgt>
1000563a:	1e03      	subs	r3, r0, #0
1000563c:	d022      	beq.n	10005684 <IRQ21_Handler+0x524>
1000563e:	4b1c      	ldr	r3, [pc, #112]	; (100056b0 <IRQ21_Handler+0x550>)
10005640:	681b      	ldr	r3, [r3, #0]
10005642:	1c18      	adds	r0, r3, #0
10005644:	4919      	ldr	r1, [pc, #100]	; (100056ac <IRQ21_Handler+0x54c>)
10005646:	f000 f847 	bl	100056d8 <__aeabi_fcmplt>
1000564a:	1e03      	subs	r3, r0, #0
1000564c:	d01a      	beq.n	10005684 <IRQ21_Handler+0x524>
	        	   sector=5;
1000564e:	4b0f      	ldr	r3, [pc, #60]	; (1000568c <IRQ21_Handler+0x52c>)
10005650:	2205      	movs	r2, #5
10005652:	601a      	str	r2, [r3, #0]
	    		   PWM_CCU4_Stop(&PWM_HU);
10005654:	4b12      	ldr	r3, [pc, #72]	; (100056a0 <IRQ21_Handler+0x540>)
10005656:	1c18      	adds	r0, r3, #0
10005658:	f7fe fee2 	bl	10004420 <PWM_CCU4_Stop>
	    		   PWM_CCU8_Stop(&PWM_LV);
1000565c:	4b0e      	ldr	r3, [pc, #56]	; (10005698 <IRQ21_Handler+0x538>)
1000565e:	1c18      	adds	r0, r3, #0
10005660:	f7fe fb70 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU8_Stop(&PWM_HW);
10005664:	4b0d      	ldr	r3, [pc, #52]	; (1000569c <IRQ21_Handler+0x53c>)
10005666:	1c18      	adds	r0, r3, #0
10005668:	f7fe fb6c 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU8_Stop(&PWM_LW);
1000566c:	4b0d      	ldr	r3, [pc, #52]	; (100056a4 <IRQ21_Handler+0x544>)
1000566e:	1c18      	adds	r0, r3, #0
10005670:	f7fe fb68 	bl	10003d44 <PWM_CCU8_Stop>
	    		   PWM_CCU4_Start(&PWM_LU);
10005674:	4b06      	ldr	r3, [pc, #24]	; (10005690 <IRQ21_Handler+0x530>)
10005676:	1c18      	adds	r0, r3, #0
10005678:	f7fe fea0 	bl	100043bc <PWM_CCU4_Start>
	    		   PWM_CCU8_Start(&PWM_HV);
1000567c:	4b05      	ldr	r3, [pc, #20]	; (10005694 <IRQ21_Handler+0x534>)
1000567e:	1c18      	adds	r0, r3, #0
10005680:	f7fe fb2e 	bl	10003ce0 <PWM_CCU8_Start>
	        	   }

}
10005684:	46bd      	mov	sp, r7
10005686:	bd80      	pop	{r7, pc}
10005688:	41400000 	.word	0x41400000
1000568c:	20000b54 	.word	0x20000b54
10005690:	20000670 	.word	0x20000670
10005694:	20000578 	.word	0x20000578
10005698:	200005ac 	.word	0x200005ac
1000569c:	200005e0 	.word	0x200005e0
100056a0:	20000648 	.word	0x20000648
100056a4:	20000614 	.word	0x20000614
100056a8:	20000bac 	.word	0x20000bac
100056ac:	41bc0000 	.word	0x41bc0000
100056b0:	20000bc0 	.word	0x20000bc0

100056b4 <__aeabi_cfrcmple>:
100056b4:	4684      	mov	ip, r0
100056b6:	1c08      	adds	r0, r1, #0
100056b8:	4661      	mov	r1, ip
100056ba:	e7ff      	b.n	100056bc <__aeabi_cfcmpeq>

100056bc <__aeabi_cfcmpeq>:
100056bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100056be:	f000 f8a7 	bl	10005810 <__lesf2>
100056c2:	2800      	cmp	r0, #0
100056c4:	d401      	bmi.n	100056ca <__aeabi_cfcmpeq+0xe>
100056c6:	2100      	movs	r1, #0
100056c8:	42c8      	cmn	r0, r1
100056ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100056cc <__aeabi_fcmpeq>:
100056cc:	b510      	push	{r4, lr}
100056ce:	f000 f82b 	bl	10005728 <__eqsf2>
100056d2:	4240      	negs	r0, r0
100056d4:	3001      	adds	r0, #1
100056d6:	bd10      	pop	{r4, pc}

100056d8 <__aeabi_fcmplt>:
100056d8:	b510      	push	{r4, lr}
100056da:	f000 f899 	bl	10005810 <__lesf2>
100056de:	2800      	cmp	r0, #0
100056e0:	db01      	blt.n	100056e6 <__aeabi_fcmplt+0xe>
100056e2:	2000      	movs	r0, #0
100056e4:	bd10      	pop	{r4, pc}
100056e6:	2001      	movs	r0, #1
100056e8:	bd10      	pop	{r4, pc}
100056ea:	46c0      	nop			; (mov r8, r8)

100056ec <__aeabi_fcmple>:
100056ec:	b510      	push	{r4, lr}
100056ee:	f000 f88f 	bl	10005810 <__lesf2>
100056f2:	2800      	cmp	r0, #0
100056f4:	dd01      	ble.n	100056fa <__aeabi_fcmple+0xe>
100056f6:	2000      	movs	r0, #0
100056f8:	bd10      	pop	{r4, pc}
100056fa:	2001      	movs	r0, #1
100056fc:	bd10      	pop	{r4, pc}
100056fe:	46c0      	nop			; (mov r8, r8)

10005700 <__aeabi_fcmpgt>:
10005700:	b510      	push	{r4, lr}
10005702:	f000 f83b 	bl	1000577c <__gesf2>
10005706:	2800      	cmp	r0, #0
10005708:	dc01      	bgt.n	1000570e <__aeabi_fcmpgt+0xe>
1000570a:	2000      	movs	r0, #0
1000570c:	bd10      	pop	{r4, pc}
1000570e:	2001      	movs	r0, #1
10005710:	bd10      	pop	{r4, pc}
10005712:	46c0      	nop			; (mov r8, r8)

10005714 <__aeabi_fcmpge>:
10005714:	b510      	push	{r4, lr}
10005716:	f000 f831 	bl	1000577c <__gesf2>
1000571a:	2800      	cmp	r0, #0
1000571c:	da01      	bge.n	10005722 <__aeabi_fcmpge+0xe>
1000571e:	2000      	movs	r0, #0
10005720:	bd10      	pop	{r4, pc}
10005722:	2001      	movs	r0, #1
10005724:	bd10      	pop	{r4, pc}
10005726:	46c0      	nop			; (mov r8, r8)

10005728 <__eqsf2>:
10005728:	0243      	lsls	r3, r0, #9
1000572a:	b570      	push	{r4, r5, r6, lr}
1000572c:	0042      	lsls	r2, r0, #1
1000572e:	004c      	lsls	r4, r1, #1
10005730:	0a5d      	lsrs	r5, r3, #9
10005732:	0fc3      	lsrs	r3, r0, #31
10005734:	0248      	lsls	r0, r1, #9
10005736:	0e12      	lsrs	r2, r2, #24
10005738:	0a46      	lsrs	r6, r0, #9
1000573a:	0e24      	lsrs	r4, r4, #24
1000573c:	0fc9      	lsrs	r1, r1, #31
1000573e:	2aff      	cmp	r2, #255	; 0xff
10005740:	d005      	beq.n	1000574e <__eqsf2+0x26>
10005742:	2cff      	cmp	r4, #255	; 0xff
10005744:	d008      	beq.n	10005758 <__eqsf2+0x30>
10005746:	2001      	movs	r0, #1
10005748:	42a2      	cmp	r2, r4
1000574a:	d00b      	beq.n	10005764 <__eqsf2+0x3c>
1000574c:	bd70      	pop	{r4, r5, r6, pc}
1000574e:	2001      	movs	r0, #1
10005750:	2d00      	cmp	r5, #0
10005752:	d1fb      	bne.n	1000574c <__eqsf2+0x24>
10005754:	2cff      	cmp	r4, #255	; 0xff
10005756:	d1f6      	bne.n	10005746 <__eqsf2+0x1e>
10005758:	2001      	movs	r0, #1
1000575a:	2e00      	cmp	r6, #0
1000575c:	d1f6      	bne.n	1000574c <__eqsf2+0x24>
1000575e:	2001      	movs	r0, #1
10005760:	42a2      	cmp	r2, r4
10005762:	d1f3      	bne.n	1000574c <__eqsf2+0x24>
10005764:	42b5      	cmp	r5, r6
10005766:	d1f1      	bne.n	1000574c <__eqsf2+0x24>
10005768:	428b      	cmp	r3, r1
1000576a:	d005      	beq.n	10005778 <__eqsf2+0x50>
1000576c:	2a00      	cmp	r2, #0
1000576e:	d1ed      	bne.n	1000574c <__eqsf2+0x24>
10005770:	1c28      	adds	r0, r5, #0
10005772:	1e43      	subs	r3, r0, #1
10005774:	4198      	sbcs	r0, r3
10005776:	e7e9      	b.n	1000574c <__eqsf2+0x24>
10005778:	2000      	movs	r0, #0
1000577a:	e7e7      	b.n	1000574c <__eqsf2+0x24>

1000577c <__gesf2>:
1000577c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000577e:	0243      	lsls	r3, r0, #9
10005780:	024d      	lsls	r5, r1, #9
10005782:	004a      	lsls	r2, r1, #1
10005784:	0044      	lsls	r4, r0, #1
10005786:	0a5e      	lsrs	r6, r3, #9
10005788:	0e24      	lsrs	r4, r4, #24
1000578a:	0fc3      	lsrs	r3, r0, #31
1000578c:	0a6d      	lsrs	r5, r5, #9
1000578e:	0e12      	lsrs	r2, r2, #24
10005790:	0fc9      	lsrs	r1, r1, #31
10005792:	2cff      	cmp	r4, #255	; 0xff
10005794:	d00d      	beq.n	100057b2 <__gesf2+0x36>
10005796:	2aff      	cmp	r2, #255	; 0xff
10005798:	d031      	beq.n	100057fe <__gesf2+0x82>
1000579a:	2c00      	cmp	r4, #0
1000579c:	d10d      	bne.n	100057ba <__gesf2+0x3e>
1000579e:	4277      	negs	r7, r6
100057a0:	4177      	adcs	r7, r6
100057a2:	2a00      	cmp	r2, #0
100057a4:	d123      	bne.n	100057ee <__gesf2+0x72>
100057a6:	2d00      	cmp	r5, #0
100057a8:	d121      	bne.n	100057ee <__gesf2+0x72>
100057aa:	2000      	movs	r0, #0
100057ac:	2f00      	cmp	r7, #0
100057ae:	d10b      	bne.n	100057c8 <__gesf2+0x4c>
100057b0:	e007      	b.n	100057c2 <__gesf2+0x46>
100057b2:	2e00      	cmp	r6, #0
100057b4:	d128      	bne.n	10005808 <__gesf2+0x8c>
100057b6:	2aff      	cmp	r2, #255	; 0xff
100057b8:	d021      	beq.n	100057fe <__gesf2+0x82>
100057ba:	2a00      	cmp	r2, #0
100057bc:	d005      	beq.n	100057ca <__gesf2+0x4e>
100057be:	428b      	cmp	r3, r1
100057c0:	d007      	beq.n	100057d2 <__gesf2+0x56>
100057c2:	4258      	negs	r0, r3
100057c4:	2301      	movs	r3, #1
100057c6:	4318      	orrs	r0, r3
100057c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100057ca:	2d00      	cmp	r5, #0
100057cc:	d0f9      	beq.n	100057c2 <__gesf2+0x46>
100057ce:	428b      	cmp	r3, r1
100057d0:	d1f7      	bne.n	100057c2 <__gesf2+0x46>
100057d2:	4294      	cmp	r4, r2
100057d4:	dcf5      	bgt.n	100057c2 <__gesf2+0x46>
100057d6:	db04      	blt.n	100057e2 <__gesf2+0x66>
100057d8:	42ae      	cmp	r6, r5
100057da:	d8f2      	bhi.n	100057c2 <__gesf2+0x46>
100057dc:	2000      	movs	r0, #0
100057de:	42ae      	cmp	r6, r5
100057e0:	d2f2      	bcs.n	100057c8 <__gesf2+0x4c>
100057e2:	4258      	negs	r0, r3
100057e4:	4143      	adcs	r3, r0
100057e6:	2001      	movs	r0, #1
100057e8:	425b      	negs	r3, r3
100057ea:	4318      	orrs	r0, r3
100057ec:	e7ec      	b.n	100057c8 <__gesf2+0x4c>
100057ee:	2f00      	cmp	r7, #0
100057f0:	d0e5      	beq.n	100057be <__gesf2+0x42>
100057f2:	4248      	negs	r0, r1
100057f4:	4141      	adcs	r1, r0
100057f6:	2001      	movs	r0, #1
100057f8:	4249      	negs	r1, r1
100057fa:	4308      	orrs	r0, r1
100057fc:	e7e4      	b.n	100057c8 <__gesf2+0x4c>
100057fe:	2d00      	cmp	r5, #0
10005800:	d102      	bne.n	10005808 <__gesf2+0x8c>
10005802:	2c00      	cmp	r4, #0
10005804:	d0cb      	beq.n	1000579e <__gesf2+0x22>
10005806:	e7da      	b.n	100057be <__gesf2+0x42>
10005808:	2002      	movs	r0, #2
1000580a:	4240      	negs	r0, r0
1000580c:	e7dc      	b.n	100057c8 <__gesf2+0x4c>
1000580e:	46c0      	nop			; (mov r8, r8)

10005810 <__lesf2>:
10005810:	0243      	lsls	r3, r0, #9
10005812:	b5f0      	push	{r4, r5, r6, r7, lr}
10005814:	0042      	lsls	r2, r0, #1
10005816:	004c      	lsls	r4, r1, #1
10005818:	0a5e      	lsrs	r6, r3, #9
1000581a:	0fc3      	lsrs	r3, r0, #31
1000581c:	0248      	lsls	r0, r1, #9
1000581e:	0e12      	lsrs	r2, r2, #24
10005820:	0a45      	lsrs	r5, r0, #9
10005822:	0e24      	lsrs	r4, r4, #24
10005824:	0fc9      	lsrs	r1, r1, #31
10005826:	2aff      	cmp	r2, #255	; 0xff
10005828:	d00f      	beq.n	1000584a <__lesf2+0x3a>
1000582a:	2cff      	cmp	r4, #255	; 0xff
1000582c:	d01a      	beq.n	10005864 <__lesf2+0x54>
1000582e:	2a00      	cmp	r2, #0
10005830:	d110      	bne.n	10005854 <__lesf2+0x44>
10005832:	4277      	negs	r7, r6
10005834:	4177      	adcs	r7, r6
10005836:	2c00      	cmp	r4, #0
10005838:	d029      	beq.n	1000588e <__lesf2+0x7e>
1000583a:	2f00      	cmp	r7, #0
1000583c:	d017      	beq.n	1000586e <__lesf2+0x5e>
1000583e:	4248      	negs	r0, r1
10005840:	4141      	adcs	r1, r0
10005842:	2001      	movs	r0, #1
10005844:	4249      	negs	r1, r1
10005846:	4308      	orrs	r0, r1
10005848:	e00b      	b.n	10005862 <__lesf2+0x52>
1000584a:	2002      	movs	r0, #2
1000584c:	2e00      	cmp	r6, #0
1000584e:	d108      	bne.n	10005862 <__lesf2+0x52>
10005850:	2cff      	cmp	r4, #255	; 0xff
10005852:	d007      	beq.n	10005864 <__lesf2+0x54>
10005854:	2c00      	cmp	r4, #0
10005856:	d10a      	bne.n	1000586e <__lesf2+0x5e>
10005858:	2d00      	cmp	r5, #0
1000585a:	d108      	bne.n	1000586e <__lesf2+0x5e>
1000585c:	4258      	negs	r0, r3
1000585e:	2301      	movs	r3, #1
10005860:	4318      	orrs	r0, r3
10005862:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005864:	2002      	movs	r0, #2
10005866:	2d00      	cmp	r5, #0
10005868:	d1fb      	bne.n	10005862 <__lesf2+0x52>
1000586a:	2a00      	cmp	r2, #0
1000586c:	d0e1      	beq.n	10005832 <__lesf2+0x22>
1000586e:	428b      	cmp	r3, r1
10005870:	d1f4      	bne.n	1000585c <__lesf2+0x4c>
10005872:	42a2      	cmp	r2, r4
10005874:	dcf2      	bgt.n	1000585c <__lesf2+0x4c>
10005876:	db04      	blt.n	10005882 <__lesf2+0x72>
10005878:	42ae      	cmp	r6, r5
1000587a:	d8ef      	bhi.n	1000585c <__lesf2+0x4c>
1000587c:	2000      	movs	r0, #0
1000587e:	42ae      	cmp	r6, r5
10005880:	d2ef      	bcs.n	10005862 <__lesf2+0x52>
10005882:	4258      	negs	r0, r3
10005884:	4143      	adcs	r3, r0
10005886:	2001      	movs	r0, #1
10005888:	425b      	negs	r3, r3
1000588a:	4318      	orrs	r0, r3
1000588c:	e7e9      	b.n	10005862 <__lesf2+0x52>
1000588e:	2d00      	cmp	r5, #0
10005890:	d1d3      	bne.n	1000583a <__lesf2+0x2a>
10005892:	2000      	movs	r0, #0
10005894:	2f00      	cmp	r7, #0
10005896:	d1e4      	bne.n	10005862 <__lesf2+0x52>
10005898:	e7e0      	b.n	1000585c <__lesf2+0x4c>
1000589a:	46c0      	nop			; (mov r8, r8)

1000589c <__libc_init_array>:
1000589c:	4b0e      	ldr	r3, [pc, #56]	; (100058d8 <__libc_init_array+0x3c>)
1000589e:	b570      	push	{r4, r5, r6, lr}
100058a0:	2500      	movs	r5, #0
100058a2:	1c1e      	adds	r6, r3, #0
100058a4:	4c0d      	ldr	r4, [pc, #52]	; (100058dc <__libc_init_array+0x40>)
100058a6:	1ae4      	subs	r4, r4, r3
100058a8:	10a4      	asrs	r4, r4, #2
100058aa:	42a5      	cmp	r5, r4
100058ac:	d004      	beq.n	100058b8 <__libc_init_array+0x1c>
100058ae:	00ab      	lsls	r3, r5, #2
100058b0:	58f3      	ldr	r3, [r6, r3]
100058b2:	4798      	blx	r3
100058b4:	3501      	adds	r5, #1
100058b6:	e7f8      	b.n	100058aa <__libc_init_array+0xe>
100058b8:	f7fd fae4 	bl	10002e84 <_init>
100058bc:	4b08      	ldr	r3, [pc, #32]	; (100058e0 <__libc_init_array+0x44>)
100058be:	2500      	movs	r5, #0
100058c0:	1c1e      	adds	r6, r3, #0
100058c2:	4c08      	ldr	r4, [pc, #32]	; (100058e4 <__libc_init_array+0x48>)
100058c4:	1ae4      	subs	r4, r4, r3
100058c6:	10a4      	asrs	r4, r4, #2
100058c8:	42a5      	cmp	r5, r4
100058ca:	d004      	beq.n	100058d6 <__libc_init_array+0x3a>
100058cc:	00ab      	lsls	r3, r5, #2
100058ce:	58f3      	ldr	r3, [r6, r3]
100058d0:	4798      	blx	r3
100058d2:	3501      	adds	r5, #1
100058d4:	e7f8      	b.n	100058c8 <__libc_init_array+0x2c>
100058d6:	bd70      	pop	{r4, r5, r6, pc}
100058d8:	2000096c 	.word	0x2000096c
100058dc:	2000096c 	.word	0x2000096c
100058e0:	2000096c 	.word	0x2000096c
100058e4:	2000096c 	.word	0x2000096c
100058e8:	10001e46 	.word	0x10001e46
100058ec:	10001e46 	.word	0x10001e46
100058f0:	10001e50 	.word	0x10001e50
100058f4:	10001e50 	.word	0x10001e50
100058f8:	10001e7e 	.word	0x10001e7e
100058fc:	10001e7e 	.word	0x10001e7e
10005900:	10001e7e 	.word	0x10001e7e
10005904:	10001e7e 	.word	0x10001e7e
10005908:	10001e5a 	.word	0x10001e5a
1000590c:	10001e66 	.word	0x10001e66
10005910:	10001e72 	.word	0x10001e72
10005914:	10001e72 	.word	0x10001e72
10005918:	1000260a 	.word	0x1000260a
1000591c:	1000260a 	.word	0x1000260a
10005920:	10002614 	.word	0x10002614
10005924:	10002614 	.word	0x10002614
10005928:	1000261e 	.word	0x1000261e
1000592c:	1000261e 	.word	0x1000261e
10005930:	1000264c 	.word	0x1000264c
10005934:	1000264c 	.word	0x1000264c
10005938:	10002628 	.word	0x10002628
1000593c:	10002634 	.word	0x10002634
10005940:	10002640 	.word	0x10002640
10005944:	10002640 	.word	0x10002640

10005948 <g_xmc_vadc_group_array>:
10005948:	48030400 48030800                       ...H...H

10005950 <PWM_HV_timer_handle>:
	...

10005960 <PWM_HV_event0_config>:
10005960:	00010000                                ....

10005964 <PWM_HV_event1_config>:
10005964:	00010000                                ....

10005968 <PWM_HV_event2_config>:
10005968:	00010000                                ....

1000596c <PWM_HV_dt_config>:
	...

10005978 <PWM_HV_ch1_out0_config>:
10005978:	00000094 00010000                       ........

10005980 <PWM_HV_config_handle>:
10005980:	12bf0000 095d12c0 00000000 00000000     ......].........
	...
1000599c:	10005960 10005964 10005968 00000000     `Y..dY..hY......
	...
100059b8:	00000001 08000000 1000596c 00000001     ........lY......
	...
100059d4:	10005950 00000001 40040000 00000007     PY.........@....
100059e4:	10005978 00000000 00000000 00000000     xY..............
	...
10005a18:	200007a8                                ... 

10005a1c <PWM_LV_timer_handle>:
	...

10005a2c <PWM_LV_event0_config>:
10005a2c:	00010000                                ....

10005a30 <PWM_LV_event1_config>:
10005a30:	00010000                                ....

10005a34 <PWM_LV_event2_config>:
10005a34:	00010000                                ....

10005a38 <PWM_LV_dt_config>:
	...

10005a44 <PWM_LV_ch1_out0_config>:
10005a44:	00000094 00010000                       ........

10005a4c <PWM_LV_config_handle>:
10005a4c:	12bf0000 095d0000 00000000 00000000     ......].........
	...
10005a68:	10005a2c 10005a30 10005a34 00000000     ,Z..0Z..4Z......
	...
10005a84:	00000001 10000000 10005a38 00000001     ........8Z......
	...
10005aa0:	10005a1c 00000001 40040000 00000008     .Z.........@....
10005ab0:	10005a44 00000000 00000000 00000000     DZ..............
	...
10005ae4:	200007a8                                ... 

10005ae8 <PWM_HW_timer_handle>:
	...

10005af8 <PWM_HW_event0_config>:
10005af8:	00010013                                ....

10005afc <PWM_HW_event1_config>:
10005afc:	00010000                                ....

10005b00 <PWM_HW_event2_config>:
10005b00:	00010000                                ....

10005b04 <PWM_HW_dt_config>:
	...

10005b10 <PWM_HW_ch1_out0_config>:
10005b10:	00000094 00010000                       ........

10005b18 <PWM_HW_config_handle>:
10005b18:	12bf0000 095d12c0 00000000 00000000     ......].........
	...
10005b34:	10005af8 10005afc 10005b00 00000000     .Z...Z...[......
	...
10005b50:	00000001 04000000 10005b04 00000001     .........[......
	...
10005b6c:	10005ae8 00000001 40040000 00000000     .Z.........@....
10005b7c:	10005b10 00000000 00000000 00000000     .[..............
	...
10005bb0:	200007a8                                ... 

10005bb4 <PWM_LW_timer_handle>:
	...

10005bc4 <PWM_LW_event0_config>:
10005bc4:	00010000                                ....

10005bc8 <PWM_LW_event1_config>:
10005bc8:	00010000                                ....

10005bcc <PWM_LW_event2_config>:
10005bcc:	00010000                                ....

10005bd0 <PWM_LW_dt_config>:
	...

10005bdc <PWM_LW_ch1_out0_config>:
10005bdc:	00000094 00010000                       ........

10005be4 <PWM_LW_config_handle>:
10005be4:	12bf0000 095d0000 00000000 00000000     ......].........
	...
10005c00:	10005bc4 10005bc8 10005bcc 00000000     .[...[...[......
	...
10005c1c:	00000001 20000000 10005bd0 00000001     ....... .[......
	...
10005c38:	10005bb4 00000001 40040200 0000000a     .[.........@....
10005c48:	10005bdc 00000000 00000000 00000000     .[..............
	...
10005c7c:	200007a8                                ... 

10005c80 <PWM_HU_timer_handle>:
	...

10005c88 <PWM_HU_event0_config>:
10005c88:	00010000                                ....

10005c8c <PWM_HU_event1_config>:
10005c8c:	00010000                                ....

10005c90 <PWM_HU_event2_config>:
10005c90:	00010000                                ....

10005c94 <PWM_HU_ch1_out0_config>:
10005c94:	00000090 00010000                       ........

10005c9c <PWM_HU_config_handle>:
10005c9c:	12bf0000 000012c0 00000000 00000000     ................
10005cac:	00000000 10005c88 10005c8c 10005c90     .....\...\...\..
	...
10005cc8:	01000000 00000000 08000000 00000001     ................
	...
10005ce4:	10005c80 00000001 40040000 00000001     .\.........@....
10005cf4:	10005c94 200007b8                       .\..... 

10005cfc <PWM_LU_timer_handle>:
	...

10005d04 <PWM_LU_event0_config>:
10005d04:	00010000                                ....

10005d08 <PWM_LU_event1_config>:
10005d08:	00010000                                ....

10005d0c <PWM_LU_event2_config>:
10005d0c:	00010000                                ....

10005d10 <PWM_LU_ch1_out0_config>:
10005d10:	00000090 00010000                       ........

10005d18 <PWM_LU_config_handle>:
10005d18:	12bf0000 00000000 00000000 00000000     ................
10005d28:	00000000 10005d04 10005d08 10005d0c     .....]...]...]..
	...
10005d44:	01000000 00000000 10000000 00000001     ................
	...
10005d60:	10005cfc 00000001 40040000 00000002     .\.........@....
10005d70:	10005d10 200007b8                       .]..... 

10005d78 <INTERRUPT_0>:
10005d78:	03150001 00000001                       ........

10005d80 <group_init_handle0>:
	...

10005d94 <group_init_handle1>:
	...

10005da8 <global_config>:
10005da8:	00000000 00000001 00000000 00000000     ................
	...
10005dc0:	00010000 03300000 00010000 00000000     ......0.........

10005dd0 <global_iclass_config>:
10005dd0:	00000001                                ....

10005dd4 <backgnd_config>:
10005dd4:	00000005 00000000 00000010              ............

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	100034e5 	.word	0x100034e5
	
	Insert_InterruptVeener IRQ0	
200000d0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ1	
200000d4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ2	
200000d8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ3	
200000dc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ4	
200000e0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ7	
200000ec:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ8	
200000f0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ9	
200000f4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ10	
200000f8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ11	
200000fc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ12	
20000100:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ13	
20000104:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ14	
20000108:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ19	
2000011c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	10005161 	.word	0x10005161
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ24	
20000130:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
